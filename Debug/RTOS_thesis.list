
RTOS_thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f48  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c54  0800a058  0800a058  0001a058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acac  0800acac  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800acac  0800acac  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800acac  0800acac  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acac  0800acac  0001acac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acb0  0800acb0  0001acb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800acb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001388  200001ec  0800aea0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001574  0800aea0  00021574  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001adc9  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038d9  00000000  00000000  0003afde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  0003e8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e8  00000000  00000000  0003ffd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005071  00000000  00000000  000415b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019bbd  00000000  00000000  00046629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099540  00000000  00000000  000601e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f9726  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007674  00000000  00000000  000f977c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a040 	.word	0x0800a040

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800a040 	.word	0x0800a040

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	460c      	mov	r4, r1
 8000b6c:	4605      	mov	r5, r0
 8000b6e:	4621      	mov	r1, r4
 8000b70:	4628      	mov	r0, r5
 8000b72:	2200      	movs	r2, #0
 8000b74:	2300      	movs	r3, #0
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <ui_gLCDshow>:
char* buffCardID[10];
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ui_gLCDshow(void const * argument){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af02      	add	r7, sp, #8
 8000bde:	6078      	str	r0, [r7, #4]
  while (1)
  {
	  ST7565_Print(0, 0, "hello", &Font_7x9, 1, BLACK);
 8000be0:	2301      	movs	r3, #1
 8000be2:	9301      	str	r3, [sp, #4]
 8000be4:	2301      	movs	r3, #1
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <ui_gLCDshow+0x64>)
 8000bea:	4a15      	ldr	r2, [pc, #84]	; (8000c40 <ui_gLCDshow+0x68>)
 8000bec:	2100      	movs	r1, #0
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f004 fd5e 	bl	80056b0 <ST7565_Print>
	  if (MFRC522_Check(CardID) == MI_OK){
 8000bf4:	4813      	ldr	r0, [pc, #76]	; (8000c44 <ui_gLCDshow+0x6c>)
 8000bf6:	f004 f8b3 	bl	8004d60 <MFRC522_Check>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d1ef      	bne.n	8000be0 <ui_gLCDshow+0x8>
      sprintf(buffCardID, "%2X%2X%2X%2X", CardID[0], CardID[1], CardID[2], CardID[3]);
 8000c00:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <ui_gLCDshow+0x6c>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <ui_gLCDshow+0x6c>)
 8000c08:	785b      	ldrb	r3, [r3, #1]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <ui_gLCDshow+0x6c>)
 8000c0e:	789b      	ldrb	r3, [r3, #2]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <ui_gLCDshow+0x6c>)
 8000c14:	78db      	ldrb	r3, [r3, #3]
 8000c16:	9301      	str	r3, [sp, #4]
 8000c18:	9200      	str	r2, [sp, #0]
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	460a      	mov	r2, r1
 8000c1e:	490a      	ldr	r1, [pc, #40]	; (8000c48 <ui_gLCDshow+0x70>)
 8000c20:	480a      	ldr	r0, [pc, #40]	; (8000c4c <ui_gLCDshow+0x74>)
 8000c22:	f005 fc89 	bl	8006538 <siprintf>
      ST7565_Print(1, 55, buffCardID, &Font_7x9, 1, BLACK);
 8000c26:	2301      	movs	r3, #1
 8000c28:	9301      	str	r3, [sp, #4]
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <ui_gLCDshow+0x64>)
 8000c30:	4a06      	ldr	r2, [pc, #24]	; (8000c4c <ui_gLCDshow+0x74>)
 8000c32:	2137      	movs	r1, #55	; 0x37
 8000c34:	2001      	movs	r0, #1
 8000c36:	f004 fd3b 	bl	80056b0 <ST7565_Print>
	  ST7565_Print(0, 0, "hello", &Font_7x9, 1, BLACK);
 8000c3a:	e7d1      	b.n	8000be0 <ui_gLCDshow+0x8>
 8000c3c:	20000010 	.word	0x20000010
 8000c40:	0800a07c 	.word	0x0800a07c
 8000c44:	20001114 	.word	0x20001114
 8000c48:	0800a084 	.word	0x0800a084
 8000c4c:	20001004 	.word	0x20001004

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	b098      	sub	sp, #96	; 0x60
 8000c54:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c56:	f000 fd97 	bl	8001788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5a:	f000 f895 	bl	8000d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5e:	f000 f9f5 	bl	800104c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c62:	f000 f9c9 	bl	8000ff8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000c66:	f000 f939 	bl	8000edc <MX_SPI2_Init>
  MX_I2C1_Init();
 8000c6a:	f000 f8d3 	bl	8000e14 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c6e:	f000 f8ff 	bl	8000e70 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000c72:	f000 f969 	bl	8000f48 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ST7565_Init();
 8000c76:	f004 fb37 	bl	80052e8 <ST7565_Init>
  MFRC522_Init();
 8000c7a:	f004 fa3c 	bl	80050f6 <MFRC522_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000c7e:	4b36      	ldr	r3, [pc, #216]	; (8000d58 <main+0x108>)
 8000c80:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000c84:	461d      	mov	r5, r3
 8000c86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c92:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f002 ff92 	bl	8003bc2 <osThreadCreate>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a2e      	ldr	r2, [pc, #184]	; (8000d5c <main+0x10c>)
 8000ca2:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8000ca4:	4b2e      	ldr	r3, [pc, #184]	; (8000d60 <main+0x110>)
 8000ca6:	f107 0420 	add.w	r4, r7, #32
 8000caa:	461d      	mov	r5, r3
 8000cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000cb8:	f107 0320 	add.w	r3, r7, #32
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f002 ff7f 	bl	8003bc2 <osThreadCreate>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	4a27      	ldr	r2, [pc, #156]	; (8000d64 <main+0x114>)
 8000cc8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(ui_glcdTask, ui_gLCDshow, osPriorityNormal, 0, 128);
 8000cca:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <main+0x118>)
 8000ccc:	1d3c      	adds	r4, r7, #4
 8000cce:	461d      	mov	r5, r3
 8000cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cd4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ui_glcdTaskHandle =  osThreadCreate(osThread(ui_glcdTask), NULL);
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f002 ff6e 	bl	8003bc2 <osThreadCreate>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	4a20      	ldr	r2, [pc, #128]	; (8000d6c <main+0x11c>)
 8000cea:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  ST7565_Print(0, 0, "test display", &Font_7x9, 1, BLACK);
 8000cec:	2301      	movs	r3, #1
 8000cee:	9301      	str	r3, [sp, #4]
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <main+0x120>)
 8000cf6:	4a1f      	ldr	r2, [pc, #124]	; (8000d74 <main+0x124>)
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f004 fcd8 	bl	80056b0 <ST7565_Print>
 	  if (MFRC522_Check(CardID) == MI_OK){
 8000d00:	481d      	ldr	r0, [pc, #116]	; (8000d78 <main+0x128>)
 8000d02:	f004 f82d 	bl	8004d60 <MFRC522_Check>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d11c      	bne.n	8000d46 <main+0xf6>
       sprintf(buffCardID, "%02X%02X%02X%02X", CardID[1], CardID[2], CardID[3], CardID[4]);
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <main+0x128>)
 8000d0e:	785b      	ldrb	r3, [r3, #1]
 8000d10:	4619      	mov	r1, r3
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <main+0x128>)
 8000d14:	789b      	ldrb	r3, [r3, #2]
 8000d16:	4618      	mov	r0, r3
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <main+0x128>)
 8000d1a:	78db      	ldrb	r3, [r3, #3]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <main+0x128>)
 8000d20:	791b      	ldrb	r3, [r3, #4]
 8000d22:	9301      	str	r3, [sp, #4]
 8000d24:	9200      	str	r2, [sp, #0]
 8000d26:	4603      	mov	r3, r0
 8000d28:	460a      	mov	r2, r1
 8000d2a:	4914      	ldr	r1, [pc, #80]	; (8000d7c <main+0x12c>)
 8000d2c:	4814      	ldr	r0, [pc, #80]	; (8000d80 <main+0x130>)
 8000d2e:	f005 fc03 	bl	8006538 <siprintf>
       ST7565_Print(0, 55, buffCardID, &Font_7x9, 1, BLACK);
 8000d32:	2301      	movs	r3, #1
 8000d34:	9301      	str	r3, [sp, #4]
 8000d36:	2301      	movs	r3, #1
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <main+0x120>)
 8000d3c:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <main+0x130>)
 8000d3e:	2137      	movs	r1, #55	; 0x37
 8000d40:	2000      	movs	r0, #0
 8000d42:	f004 fcb5 	bl	80056b0 <ST7565_Print>
//       measurePress();
     }
//UIwait();
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000d46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4a:	480e      	ldr	r0, [pc, #56]	; (8000d84 <main+0x134>)
 8000d4c:	f000 ffee 	bl	8001d2c <HAL_GPIO_TogglePin>
    osDelay(200);
 8000d50:	20c8      	movs	r0, #200	; 0xc8
 8000d52:	f002 ff82 	bl	8003c5a <osDelay>
	  ST7565_Print(0, 0, "test display", &Font_7x9, 1, BLACK);
 8000d56:	e7c9      	b.n	8000cec <main+0x9c>
 8000d58:	0800a0b8 	.word	0x0800a0b8
 8000d5c:	20000f50 	.word	0x20000f50
 8000d60:	0800a0d4 	.word	0x0800a0d4
 8000d64:	2000102c 	.word	0x2000102c
 8000d68:	0800a0f0 	.word	0x0800a0f0
 8000d6c:	20001000 	.word	0x20001000
 8000d70:	20000010 	.word	0x20000010
 8000d74:	0800a094 	.word	0x0800a094
 8000d78:	20001114 	.word	0x20001114
 8000d7c:	0800a0a4 	.word	0x0800a0a4
 8000d80:	20001004 	.word	0x20001004
 8000d84:	40011000 	.word	0x40011000

08000d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b090      	sub	sp, #64	; 0x40
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 0318 	add.w	r3, r7, #24
 8000d92:	2228      	movs	r2, #40	; 0x28
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f004 fd50 	bl	800583c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000daa:	2301      	movs	r3, #1
 8000dac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db8:	2301      	movs	r3, #1
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dc6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dcc:	f107 0318 	add.w	r3, r7, #24
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 f909 	bl	8001fe8 <HAL_RCC_OscConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ddc:	f000 f9e4 	bl	80011a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de0:	230f      	movs	r3, #15
 8000de2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de4:	2302      	movs	r3, #2
 8000de6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2102      	movs	r1, #2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 fb74 	bl	80024e8 <HAL_RCC_ClockConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e06:	f000 f9cf 	bl	80011a8 <Error_Handler>
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	3740      	adds	r7, #64	; 0x40
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e1a:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <MX_I2C1_Init+0x54>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e20:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <MX_I2C1_Init+0x58>)
 8000e22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e52:	f000 ff85 	bl	8001d60 <HAL_I2C_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e5c:	f000 f9a4 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000fac 	.word	0x20000fac
 8000e68:	40005400 	.word	0x40005400
 8000e6c:	000186a0 	.word	0x000186a0

08000e70 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <MX_SPI1_Init+0x64>)
 8000e76:	4a18      	ldr	r2, [pc, #96]	; (8000ed8 <MX_SPI1_Init+0x68>)
 8000e78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <MX_SPI1_Init+0x64>)
 8000e7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <MX_SPI1_Init+0x64>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MX_SPI1_Init+0x64>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_SPI1_Init+0x64>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_SPI1_Init+0x64>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_SPI1_Init+0x64>)
 8000e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ea0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_SPI1_Init+0x64>)
 8000ea4:	2208      	movs	r2, #8
 8000ea6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <MX_SPI1_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_SPI1_Init+0x64>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <MX_SPI1_Init+0x64>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_SPI1_Init+0x64>)
 8000ebc:	220a      	movs	r2, #10
 8000ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ec0:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <MX_SPI1_Init+0x64>)
 8000ec2:	f001 fcdb 	bl	800287c <HAL_SPI_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ecc:	f000 f96c 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20001078 	.word	0x20001078
 8000ed8:	40013000 	.word	0x40013000

08000edc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ee0:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <MX_SPI2_Init+0x64>)
 8000ee2:	4a18      	ldr	r2, [pc, #96]	; (8000f44 <MX_SPI2_Init+0x68>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <MX_SPI2_Init+0x64>)
 8000ee8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000eec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000eee:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_SPI2_Init+0x64>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <MX_SPI2_Init+0x64>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_SPI2_Init+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_SPI2_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_SPI2_Init+0x64>)
 8000f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f0c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_SPI2_Init+0x64>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <MX_SPI2_Init+0x64>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_SPI2_Init+0x64>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <MX_SPI2_Init+0x64>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_SPI2_Init+0x64>)
 8000f28:	220a      	movs	r2, #10
 8000f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f2c:	4804      	ldr	r0, [pc, #16]	; (8000f40 <MX_SPI2_Init+0x64>)
 8000f2e:	f001 fca5 	bl	800287c <HAL_SPI_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f38:	f000 f936 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000f54 	.word	0x20000f54
 8000f44:	40003800 	.word	0x40003800

08000f48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4e:	f107 0310 	add.w	r3, r7, #16
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f64:	4b22      	ldr	r3, [pc, #136]	; (8000ff0 <MX_TIM1_Init+0xa8>)
 8000f66:	4a23      	ldr	r2, [pc, #140]	; (8000ff4 <MX_TIM1_Init+0xac>)
 8000f68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0xffff -1;
 8000f6a:	4b21      	ldr	r3, [pc, #132]	; (8000ff0 <MX_TIM1_Init+0xa8>)
 8000f6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f72:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <MX_TIM1_Init+0xa8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f78:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <MX_TIM1_Init+0xa8>)
 8000f7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f80:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <MX_TIM1_Init+0xa8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f86:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <MX_TIM1_Init+0xa8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8c:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <MX_TIM1_Init+0xa8>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000f92:	4817      	ldr	r0, [pc, #92]	; (8000ff0 <MX_TIM1_Init+0xa8>)
 8000f94:	f002 f932 	bl	80031fc <HAL_TIM_IC_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f9e:	f000 f903 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480f      	ldr	r0, [pc, #60]	; (8000ff0 <MX_TIM1_Init+0xa8>)
 8000fb2:	f002 fca3 	bl	80038fc <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000fbc:	f000 f8f4 	bl	80011a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4806      	ldr	r0, [pc, #24]	; (8000ff0 <MX_TIM1_Init+0xa8>)
 8000fd8:	f002 fa67 	bl	80034aa <HAL_TIM_IC_ConfigChannel>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000fe2:	f000 f8e1 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20001030 	.word	0x20001030
 8000ff4:	40012c00 	.word	0x40012c00

08000ff8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <MX_USART2_UART_Init+0x50>)
 8001000:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001008:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 800101e:	220c      	movs	r2, #12
 8001020:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001030:	f002 fcd4 	bl	80039dc <HAL_UART_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800103a:	f000 f8b5 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200010d0 	.word	0x200010d0
 8001048:	40004400 	.word	0x40004400

0800104c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001060:	4b3f      	ldr	r3, [pc, #252]	; (8001160 <MX_GPIO_Init+0x114>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a3e      	ldr	r2, [pc, #248]	; (8001160 <MX_GPIO_Init+0x114>)
 8001066:	f043 0310 	orr.w	r3, r3, #16
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b3c      	ldr	r3, [pc, #240]	; (8001160 <MX_GPIO_Init+0x114>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0310 	and.w	r3, r3, #16
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001078:	4b39      	ldr	r3, [pc, #228]	; (8001160 <MX_GPIO_Init+0x114>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a38      	ldr	r2, [pc, #224]	; (8001160 <MX_GPIO_Init+0x114>)
 800107e:	f043 0320 	orr.w	r3, r3, #32
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b36      	ldr	r3, [pc, #216]	; (8001160 <MX_GPIO_Init+0x114>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f003 0320 	and.w	r3, r3, #32
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	4b33      	ldr	r3, [pc, #204]	; (8001160 <MX_GPIO_Init+0x114>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a32      	ldr	r2, [pc, #200]	; (8001160 <MX_GPIO_Init+0x114>)
 8001096:	f043 0304 	orr.w	r3, r3, #4
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b30      	ldr	r3, [pc, #192]	; (8001160 <MX_GPIO_Init+0x114>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a8:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <MX_GPIO_Init+0x114>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a2c      	ldr	r2, [pc, #176]	; (8001160 <MX_GPIO_Init+0x114>)
 80010ae:	f043 0308 	orr.w	r3, r3, #8
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <MX_GPIO_Init+0x114>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|BUZZER_Pin, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80010c6:	4827      	ldr	r0, [pc, #156]	; (8001164 <MX_GPIO_Init+0x118>)
 80010c8:	f000 fe18 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|PUMP_Pin|GPIO_PIN_10|GPIO_PIN_11
 80010cc:	2200      	movs	r2, #0
 80010ce:	f641 6110 	movw	r1, #7696	; 0x1e10
 80010d2:	4825      	ldr	r0, [pc, #148]	; (8001168 <MX_GPIO_Init+0x11c>)
 80010d4:	f000 fe12 	bl	8001cfc <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|VALVE_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80010de:	4823      	ldr	r0, [pc, #140]	; (800116c <MX_GPIO_Init+0x120>)
 80010e0:	f000 fe0c 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 BUZZER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|BUZZER_Pin;
 80010e4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80010e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	4619      	mov	r1, r3
 80010fc:	4819      	ldr	r0, [pc, #100]	; (8001164 <MX_GPIO_Init+0x118>)
 80010fe:	f000 fc79 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PUMP_Pin PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|PUMP_Pin|GPIO_PIN_10|GPIO_PIN_11
 8001102:	f641 6310 	movw	r3, #7696	; 0x1e10
 8001106:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2302      	movs	r3, #2
 8001112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	4619      	mov	r1, r3
 800111a:	4813      	ldr	r0, [pc, #76]	; (8001168 <MX_GPIO_Init+0x11c>)
 800111c:	f000 fc6a 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 VALVE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|VALVE_Pin;
 8001120:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001124:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001126:	2301      	movs	r3, #1
 8001128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2302      	movs	r3, #2
 8001130:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	4619      	mov	r1, r3
 8001138:	480c      	ldr	r0, [pc, #48]	; (800116c <MX_GPIO_Init+0x120>)
 800113a:	f000 fc5b 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800113e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	4619      	mov	r1, r3
 8001152:	4806      	ldr	r0, [pc, #24]	; (800116c <MX_GPIO_Init+0x120>)
 8001154:	f000 fc4e 	bl	80019f4 <HAL_GPIO_Init>

}
 8001158:	bf00      	nop
 800115a:	3720      	adds	r7, #32
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40021000 	.word	0x40021000
 8001164:	40011000 	.word	0x40011000
 8001168:	40010800 	.word	0x40010800
 800116c:	40010c00 	.word	0x40010c00

08001170 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 8001178:	e7fe      	b.n	8001178 <StartDefaultTask+0x8>

0800117a <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
 8001182:	e7fe      	b.n	8001182 <StartTask02+0x8>

08001184 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d101      	bne.n	800119a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001196:	f000 fb0d 	bl	80017b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40000800 	.word	0x40000800

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <Error_Handler+0x8>
	...

080011b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <HAL_MspInit+0x68>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	4a17      	ldr	r2, [pc, #92]	; (800121c <HAL_MspInit+0x68>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6193      	str	r3, [r2, #24]
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_MspInit+0x68>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_MspInit+0x68>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	4a11      	ldr	r2, [pc, #68]	; (800121c <HAL_MspInit+0x68>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011dc:	61d3      	str	r3, [r2, #28]
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_MspInit+0x68>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	210f      	movs	r1, #15
 80011ee:	f06f 0001 	mvn.w	r0, #1
 80011f2:	f000 fbd4 	bl	800199e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_MspInit+0x6c>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	4a04      	ldr	r2, [pc, #16]	; (8001220 <HAL_MspInit+0x6c>)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000
 8001220:	40010000 	.word	0x40010000

08001224 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a15      	ldr	r2, [pc, #84]	; (8001294 <HAL_I2C_MspInit+0x70>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d123      	bne.n	800128c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <HAL_I2C_MspInit+0x74>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4a13      	ldr	r2, [pc, #76]	; (8001298 <HAL_I2C_MspInit+0x74>)
 800124a:	f043 0308 	orr.w	r3, r3, #8
 800124e:	6193      	str	r3, [r2, #24]
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_I2C_MspInit+0x74>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f003 0308 	and.w	r3, r3, #8
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800125c:	23c0      	movs	r3, #192	; 0xc0
 800125e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001260:	2312      	movs	r3, #18
 8001262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	4619      	mov	r1, r3
 800126e:	480b      	ldr	r0, [pc, #44]	; (800129c <HAL_I2C_MspInit+0x78>)
 8001270:	f000 fbc0 	bl	80019f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_I2C_MspInit+0x74>)
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	4a07      	ldr	r2, [pc, #28]	; (8001298 <HAL_I2C_MspInit+0x74>)
 800127a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800127e:	61d3      	str	r3, [r2, #28]
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_I2C_MspInit+0x74>)
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800128c:	bf00      	nop
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40005400 	.word	0x40005400
 8001298:	40021000 	.word	0x40021000
 800129c:	40010c00 	.word	0x40010c00

080012a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0318 	add.w	r3, r7, #24
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a37      	ldr	r2, [pc, #220]	; (8001398 <HAL_SPI_MspInit+0xf8>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d130      	bne.n	8001322 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012c0:	4b36      	ldr	r3, [pc, #216]	; (800139c <HAL_SPI_MspInit+0xfc>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a35      	ldr	r2, [pc, #212]	; (800139c <HAL_SPI_MspInit+0xfc>)
 80012c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b33      	ldr	r3, [pc, #204]	; (800139c <HAL_SPI_MspInit+0xfc>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	4b30      	ldr	r3, [pc, #192]	; (800139c <HAL_SPI_MspInit+0xfc>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a2f      	ldr	r2, [pc, #188]	; (800139c <HAL_SPI_MspInit+0xfc>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b2d      	ldr	r3, [pc, #180]	; (800139c <HAL_SPI_MspInit+0xfc>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012f0:	23a0      	movs	r3, #160	; 0xa0
 80012f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f8:	2303      	movs	r3, #3
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 0318 	add.w	r3, r7, #24
 8001300:	4619      	mov	r1, r3
 8001302:	4827      	ldr	r0, [pc, #156]	; (80013a0 <HAL_SPI_MspInit+0x100>)
 8001304:	f000 fb76 	bl	80019f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001308:	2340      	movs	r3, #64	; 0x40
 800130a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 0318 	add.w	r3, r7, #24
 8001318:	4619      	mov	r1, r3
 800131a:	4821      	ldr	r0, [pc, #132]	; (80013a0 <HAL_SPI_MspInit+0x100>)
 800131c:	f000 fb6a 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001320:	e036      	b.n	8001390 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a1f      	ldr	r2, [pc, #124]	; (80013a4 <HAL_SPI_MspInit+0x104>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d131      	bne.n	8001390 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <HAL_SPI_MspInit+0xfc>)
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	4a1a      	ldr	r2, [pc, #104]	; (800139c <HAL_SPI_MspInit+0xfc>)
 8001332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001336:	61d3      	str	r3, [r2, #28]
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <HAL_SPI_MspInit+0xfc>)
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_SPI_MspInit+0xfc>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a14      	ldr	r2, [pc, #80]	; (800139c <HAL_SPI_MspInit+0xfc>)
 800134a:	f043 0308 	orr.w	r3, r3, #8
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_SPI_MspInit+0xfc>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800135c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001366:	2303      	movs	r3, #3
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136a:	f107 0318 	add.w	r3, r7, #24
 800136e:	4619      	mov	r1, r3
 8001370:	480d      	ldr	r0, [pc, #52]	; (80013a8 <HAL_SPI_MspInit+0x108>)
 8001372:	f000 fb3f 	bl	80019f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001376:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800137a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001384:	f107 0318 	add.w	r3, r7, #24
 8001388:	4619      	mov	r1, r3
 800138a:	4807      	ldr	r0, [pc, #28]	; (80013a8 <HAL_SPI_MspInit+0x108>)
 800138c:	f000 fb32 	bl	80019f4 <HAL_GPIO_Init>
}
 8001390:	bf00      	nop
 8001392:	3728      	adds	r7, #40	; 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40013000 	.word	0x40013000
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010800 	.word	0x40010800
 80013a4:	40003800 	.word	0x40003800
 80013a8:	40010c00 	.word	0x40010c00

080013ac <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a16      	ldr	r2, [pc, #88]	; (8001420 <HAL_TIM_IC_MspInit+0x74>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d124      	bne.n	8001416 <HAL_TIM_IC_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013cc:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_TIM_IC_MspInit+0x78>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a14      	ldr	r2, [pc, #80]	; (8001424 <HAL_TIM_IC_MspInit+0x78>)
 80013d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_TIM_IC_MspInit+0x78>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <HAL_TIM_IC_MspInit+0x78>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <HAL_TIM_IC_MspInit+0x78>)
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_TIM_IC_MspInit+0x78>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001400:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <HAL_TIM_IC_MspInit+0x7c>)
 8001412:	f000 faef 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001416:	bf00      	nop
 8001418:	3720      	adds	r7, #32
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40012c00 	.word	0x40012c00
 8001424:	40021000 	.word	0x40021000
 8001428:	40010800 	.word	0x40010800

0800142c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a1b      	ldr	r2, [pc, #108]	; (80014b4 <HAL_UART_MspInit+0x88>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d12f      	bne.n	80014ac <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <HAL_UART_MspInit+0x8c>)
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	4a19      	ldr	r2, [pc, #100]	; (80014b8 <HAL_UART_MspInit+0x8c>)
 8001452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001456:	61d3      	str	r3, [r2, #28]
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <HAL_UART_MspInit+0x8c>)
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <HAL_UART_MspInit+0x8c>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <HAL_UART_MspInit+0x8c>)
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	6193      	str	r3, [r2, #24]
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <HAL_UART_MspInit+0x8c>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800147c:	2304      	movs	r3, #4
 800147e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	4619      	mov	r1, r3
 800148e:	480b      	ldr	r0, [pc, #44]	; (80014bc <HAL_UART_MspInit+0x90>)
 8001490:	f000 fab0 	bl	80019f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001494:	2308      	movs	r3, #8
 8001496:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	4619      	mov	r1, r3
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <HAL_UART_MspInit+0x90>)
 80014a8:	f000 faa4 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014ac:	bf00      	nop
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40004400 	.word	0x40004400
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010800 	.word	0x40010800

080014c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08c      	sub	sp, #48	; 0x30
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	201e      	movs	r0, #30
 80014d6:	f000 fa62 	bl	800199e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014da:	201e      	movs	r0, #30
 80014dc:	f000 fa7b 	bl	80019d6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80014e0:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <HAL_InitTick+0xa0>)
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	4a1e      	ldr	r2, [pc, #120]	; (8001560 <HAL_InitTick+0xa0>)
 80014e6:	f043 0304 	orr.w	r3, r3, #4
 80014ea:	61d3      	str	r3, [r2, #28]
 80014ec:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <HAL_InitTick+0xa0>)
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014f8:	f107 0210 	add.w	r2, r7, #16
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4611      	mov	r1, r2
 8001502:	4618      	mov	r0, r3
 8001504:	f001 f96c 	bl	80027e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001508:	f001 f942 	bl	8002790 <HAL_RCC_GetPCLK1Freq>
 800150c:	4603      	mov	r3, r0
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001514:	4a13      	ldr	r2, [pc, #76]	; (8001564 <HAL_InitTick+0xa4>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	0c9b      	lsrs	r3, r3, #18
 800151c:	3b01      	subs	r3, #1
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_InitTick+0xa8>)
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <HAL_InitTick+0xac>)
 8001524:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_InitTick+0xa8>)
 8001528:	f240 32e7 	movw	r2, #999	; 0x3e7
 800152c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800152e:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <HAL_InitTick+0xa8>)
 8001530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001532:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_InitTick+0xa8>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <HAL_InitTick+0xa8>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001540:	4809      	ldr	r0, [pc, #36]	; (8001568 <HAL_InitTick+0xa8>)
 8001542:	f001 fdb1 	bl	80030a8 <HAL_TIM_Base_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d104      	bne.n	8001556 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800154c:	4806      	ldr	r0, [pc, #24]	; (8001568 <HAL_InitTick+0xa8>)
 800154e:	f001 fe03 	bl	8003158 <HAL_TIM_Base_Start_IT>
 8001552:	4603      	mov	r3, r0
 8001554:	e000      	b.n	8001558 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3730      	adds	r7, #48	; 0x30
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40021000 	.word	0x40021000
 8001564:	431bde83 	.word	0x431bde83
 8001568:	20001118 	.word	0x20001118
 800156c:	40000800 	.word	0x40000800

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <NMI_Handler+0x4>

08001576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <HardFault_Handler+0x4>

0800157c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <MemManage_Handler+0x4>

08001582 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <BusFault_Handler+0x4>

08001588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <UsageFault_Handler+0x4>

0800158e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
	...

0800159c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <TIM4_IRQHandler+0x10>)
 80015a2:	f001 fe7a 	bl	800329a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20001118 	.word	0x20001118

080015b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
	return 1;
 80015b4:	2301      	movs	r3, #1
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <_kill>:

int _kill(int pid, int sig)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015c8:	f004 f900 	bl	80057cc <__errno>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2216      	movs	r2, #22
 80015d0:	601a      	str	r2, [r3, #0]
	return -1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <_exit>:

void _exit (int status)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015e6:	f04f 31ff 	mov.w	r1, #4294967295
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff ffe7 	bl	80015be <_kill>
	while (1) {}		/* Make sure we hang here */
 80015f0:	e7fe      	b.n	80015f0 <_exit+0x12>

080015f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	e00a      	b.n	800161a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001604:	f3af 8000 	nop.w
 8001608:	4601      	mov	r1, r0
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	60ba      	str	r2, [r7, #8]
 8001610:	b2ca      	uxtb	r2, r1
 8001612:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	3301      	adds	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	429a      	cmp	r2, r3
 8001620:	dbf0      	blt.n	8001604 <_read+0x12>
	}

return len;
 8001622:	687b      	ldr	r3, [r7, #4]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	e009      	b.n	8001652 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	60ba      	str	r2, [r7, #8]
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3301      	adds	r3, #1
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	429a      	cmp	r2, r3
 8001658:	dbf1      	blt.n	800163e <_write+0x12>
	}
	return len;
 800165a:	687b      	ldr	r3, [r7, #4]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <_close>:

int _close(int file)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	return -1;
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800168a:	605a      	str	r2, [r3, #4]
	return 0;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <_isatty>:

int _isatty(int file)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	return 1;
 80016a0:	2301      	movs	r3, #1
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
	return 0;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016cc:	4a14      	ldr	r2, [pc, #80]	; (8001720 <_sbrk+0x5c>)
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <_sbrk+0x60>)
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <_sbrk+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <_sbrk+0x64>)
 80016e2:	4a12      	ldr	r2, [pc, #72]	; (800172c <_sbrk+0x68>)
 80016e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <_sbrk+0x64>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d207      	bcs.n	8001704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f4:	f004 f86a 	bl	80057cc <__errno>
 80016f8:	4603      	mov	r3, r0
 80016fa:	220c      	movs	r2, #12
 80016fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	e009      	b.n	8001718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <_sbrk+0x64>)
 8001714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20005000 	.word	0x20005000
 8001724:	00000400 	.word	0x00000400
 8001728:	20000208 	.word	0x20000208
 800172c:	20001578 	.word	0x20001578

08001730 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800173c:	480c      	ldr	r0, [pc, #48]	; (8001770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800173e:	490d      	ldr	r1, [pc, #52]	; (8001774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001740:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001744:	e002      	b.n	800174c <LoopCopyDataInit>

08001746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174a:	3304      	adds	r3, #4

0800174c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800174c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001750:	d3f9      	bcc.n	8001746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001754:	4c0a      	ldr	r4, [pc, #40]	; (8001780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001758:	e001      	b.n	800175e <LoopFillZerobss>

0800175a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800175c:	3204      	adds	r2, #4

0800175e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001760:	d3fb      	bcc.n	800175a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001762:	f7ff ffe5 	bl	8001730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001766:	f004 f837 	bl	80057d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800176a:	f7ff fa71 	bl	8000c50 <main>
  bx lr
 800176e:	4770      	bx	lr
  ldr r0, =_sdata
 8001770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001774:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001778:	0800acb4 	.word	0x0800acb4
  ldr r2, =_sbss
 800177c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001780:	20001574 	.word	0x20001574

08001784 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001784:	e7fe      	b.n	8001784 <ADC1_2_IRQHandler>
	...

08001788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_Init+0x28>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_Init+0x28>)
 8001792:	f043 0310 	orr.w	r3, r3, #16
 8001796:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001798:	2003      	movs	r0, #3
 800179a:	f000 f8f5 	bl	8001988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179e:	2000      	movs	r0, #0
 80017a0:	f7ff fe8e 	bl	80014c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a4:	f7ff fd06 	bl	80011b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40022000 	.word	0x40022000

080017b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_IncTick+0x1c>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_IncTick+0x20>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	4a03      	ldr	r2, [pc, #12]	; (80017d4 <HAL_IncTick+0x20>)
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr
 80017d0:	20000008 	.word	0x20000008
 80017d4:	20001160 	.word	0x20001160

080017d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;
 80017dc:	4b02      	ldr	r3, [pc, #8]	; (80017e8 <HAL_GetTick+0x10>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	20001160 	.word	0x20001160

080017ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f4:	f7ff fff0 	bl	80017d8 <HAL_GetTick>
 80017f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001804:	d005      	beq.n	8001812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_Delay+0x44>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001812:	bf00      	nop
 8001814:	f7ff ffe0 	bl	80017d8 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	429a      	cmp	r2, r3
 8001822:	d8f7      	bhi.n	8001814 <HAL_Delay+0x28>
  {
  }
}
 8001824:	bf00      	nop
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000008 	.word	0x20000008

08001834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001850:	4013      	ands	r3, r2
 8001852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800185c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001866:	4a04      	ldr	r2, [pc, #16]	; (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	60d3      	str	r3, [r2, #12]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <__NVIC_GetPriorityGrouping+0x18>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	f003 0307 	and.w	r3, r3, #7
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	db0b      	blt.n	80018c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f003 021f 	and.w	r2, r3, #31
 80018b0:	4906      	ldr	r1, [pc, #24]	; (80018cc <__NVIC_EnableIRQ+0x34>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	095b      	lsrs	r3, r3, #5
 80018b8:	2001      	movs	r0, #1
 80018ba:	fa00 f202 	lsl.w	r2, r0, r2
 80018be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	e000e100 	.word	0xe000e100

080018d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	db0a      	blt.n	80018fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	490c      	ldr	r1, [pc, #48]	; (800191c <__NVIC_SetPriority+0x4c>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	440b      	add	r3, r1
 80018f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f8:	e00a      	b.n	8001910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4908      	ldr	r1, [pc, #32]	; (8001920 <__NVIC_SetPriority+0x50>)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	3b04      	subs	r3, #4
 8001908:	0112      	lsls	r2, r2, #4
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	440b      	add	r3, r1
 800190e:	761a      	strb	r2, [r3, #24]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f1c3 0307 	rsb	r3, r3, #7
 800193e:	2b04      	cmp	r3, #4
 8001940:	bf28      	it	cs
 8001942:	2304      	movcs	r3, #4
 8001944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3304      	adds	r3, #4
 800194a:	2b06      	cmp	r3, #6
 800194c:	d902      	bls.n	8001954 <NVIC_EncodePriority+0x30>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3b03      	subs	r3, #3
 8001952:	e000      	b.n	8001956 <NVIC_EncodePriority+0x32>
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	f04f 32ff 	mov.w	r2, #4294967295
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	401a      	ands	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800196c:	f04f 31ff 	mov.w	r1, #4294967295
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	43d9      	mvns	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	4313      	orrs	r3, r2
         );
}
 800197e:	4618      	mov	r0, r3
 8001980:	3724      	adds	r7, #36	; 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ff4f 	bl	8001834 <__NVIC_SetPriorityGrouping>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b0:	f7ff ff64 	bl	800187c <__NVIC_GetPriorityGrouping>
 80019b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	68b9      	ldr	r1, [r7, #8]
 80019ba:	6978      	ldr	r0, [r7, #20]
 80019bc:	f7ff ffb2 	bl	8001924 <NVIC_EncodePriority>
 80019c0:	4602      	mov	r2, r0
 80019c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff81 	bl	80018d0 <__NVIC_SetPriority>
}
 80019ce:	bf00      	nop
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff57 	bl	8001898 <__NVIC_EnableIRQ>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b08b      	sub	sp, #44	; 0x2c
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019fe:	2300      	movs	r3, #0
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a06:	e169      	b.n	8001cdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	f040 8158 	bne.w	8001cd6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	4a9a      	ldr	r2, [pc, #616]	; (8001c94 <HAL_GPIO_Init+0x2a0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d05e      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
 8001a30:	4a98      	ldr	r2, [pc, #608]	; (8001c94 <HAL_GPIO_Init+0x2a0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d875      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a36:	4a98      	ldr	r2, [pc, #608]	; (8001c98 <HAL_GPIO_Init+0x2a4>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d058      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
 8001a3c:	4a96      	ldr	r2, [pc, #600]	; (8001c98 <HAL_GPIO_Init+0x2a4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d86f      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a42:	4a96      	ldr	r2, [pc, #600]	; (8001c9c <HAL_GPIO_Init+0x2a8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d052      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
 8001a48:	4a94      	ldr	r2, [pc, #592]	; (8001c9c <HAL_GPIO_Init+0x2a8>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d869      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a4e:	4a94      	ldr	r2, [pc, #592]	; (8001ca0 <HAL_GPIO_Init+0x2ac>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d04c      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
 8001a54:	4a92      	ldr	r2, [pc, #584]	; (8001ca0 <HAL_GPIO_Init+0x2ac>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d863      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a5a:	4a92      	ldr	r2, [pc, #584]	; (8001ca4 <HAL_GPIO_Init+0x2b0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d046      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
 8001a60:	4a90      	ldr	r2, [pc, #576]	; (8001ca4 <HAL_GPIO_Init+0x2b0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d85d      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a66:	2b12      	cmp	r3, #18
 8001a68:	d82a      	bhi.n	8001ac0 <HAL_GPIO_Init+0xcc>
 8001a6a:	2b12      	cmp	r3, #18
 8001a6c:	d859      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a6e:	a201      	add	r2, pc, #4	; (adr r2, 8001a74 <HAL_GPIO_Init+0x80>)
 8001a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a74:	08001aef 	.word	0x08001aef
 8001a78:	08001ac9 	.word	0x08001ac9
 8001a7c:	08001adb 	.word	0x08001adb
 8001a80:	08001b1d 	.word	0x08001b1d
 8001a84:	08001b23 	.word	0x08001b23
 8001a88:	08001b23 	.word	0x08001b23
 8001a8c:	08001b23 	.word	0x08001b23
 8001a90:	08001b23 	.word	0x08001b23
 8001a94:	08001b23 	.word	0x08001b23
 8001a98:	08001b23 	.word	0x08001b23
 8001a9c:	08001b23 	.word	0x08001b23
 8001aa0:	08001b23 	.word	0x08001b23
 8001aa4:	08001b23 	.word	0x08001b23
 8001aa8:	08001b23 	.word	0x08001b23
 8001aac:	08001b23 	.word	0x08001b23
 8001ab0:	08001b23 	.word	0x08001b23
 8001ab4:	08001b23 	.word	0x08001b23
 8001ab8:	08001ad1 	.word	0x08001ad1
 8001abc:	08001ae5 	.word	0x08001ae5
 8001ac0:	4a79      	ldr	r2, [pc, #484]	; (8001ca8 <HAL_GPIO_Init+0x2b4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d013      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ac6:	e02c      	b.n	8001b22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	623b      	str	r3, [r7, #32]
          break;
 8001ace:	e029      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	623b      	str	r3, [r7, #32]
          break;
 8001ad8:	e024      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	3308      	adds	r3, #8
 8001ae0:	623b      	str	r3, [r7, #32]
          break;
 8001ae2:	e01f      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	330c      	adds	r3, #12
 8001aea:	623b      	str	r3, [r7, #32]
          break;
 8001aec:	e01a      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d102      	bne.n	8001afc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001af6:	2304      	movs	r3, #4
 8001af8:	623b      	str	r3, [r7, #32]
          break;
 8001afa:	e013      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d105      	bne.n	8001b10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b04:	2308      	movs	r3, #8
 8001b06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	611a      	str	r2, [r3, #16]
          break;
 8001b0e:	e009      	b.n	8001b24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b10:	2308      	movs	r3, #8
 8001b12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	615a      	str	r2, [r3, #20]
          break;
 8001b1a:	e003      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
          break;
 8001b20:	e000      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          break;
 8001b22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2bff      	cmp	r3, #255	; 0xff
 8001b28:	d801      	bhi.n	8001b2e <HAL_GPIO_Init+0x13a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	e001      	b.n	8001b32 <HAL_GPIO_Init+0x13e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3304      	adds	r3, #4
 8001b32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	2bff      	cmp	r3, #255	; 0xff
 8001b38:	d802      	bhi.n	8001b40 <HAL_GPIO_Init+0x14c>
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	e002      	b.n	8001b46 <HAL_GPIO_Init+0x152>
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	3b08      	subs	r3, #8
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	210f      	movs	r1, #15
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	fa01 f303 	lsl.w	r3, r1, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	401a      	ands	r2, r3
 8001b58:	6a39      	ldr	r1, [r7, #32]
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	431a      	orrs	r2, r3
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 80b1 	beq.w	8001cd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b74:	4b4d      	ldr	r3, [pc, #308]	; (8001cac <HAL_GPIO_Init+0x2b8>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	4a4c      	ldr	r2, [pc, #304]	; (8001cac <HAL_GPIO_Init+0x2b8>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6193      	str	r3, [r2, #24]
 8001b80:	4b4a      	ldr	r3, [pc, #296]	; (8001cac <HAL_GPIO_Init+0x2b8>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b8c:	4a48      	ldr	r2, [pc, #288]	; (8001cb0 <HAL_GPIO_Init+0x2bc>)
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	089b      	lsrs	r3, r3, #2
 8001b92:	3302      	adds	r3, #2
 8001b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a40      	ldr	r2, [pc, #256]	; (8001cb4 <HAL_GPIO_Init+0x2c0>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d013      	beq.n	8001be0 <HAL_GPIO_Init+0x1ec>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a3f      	ldr	r2, [pc, #252]	; (8001cb8 <HAL_GPIO_Init+0x2c4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d00d      	beq.n	8001bdc <HAL_GPIO_Init+0x1e8>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a3e      	ldr	r2, [pc, #248]	; (8001cbc <HAL_GPIO_Init+0x2c8>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d007      	beq.n	8001bd8 <HAL_GPIO_Init+0x1e4>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a3d      	ldr	r2, [pc, #244]	; (8001cc0 <HAL_GPIO_Init+0x2cc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d101      	bne.n	8001bd4 <HAL_GPIO_Init+0x1e0>
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e006      	b.n	8001be2 <HAL_GPIO_Init+0x1ee>
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	e004      	b.n	8001be2 <HAL_GPIO_Init+0x1ee>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e002      	b.n	8001be2 <HAL_GPIO_Init+0x1ee>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <HAL_GPIO_Init+0x1ee>
 8001be0:	2300      	movs	r3, #0
 8001be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be4:	f002 0203 	and.w	r2, r2, #3
 8001be8:	0092      	lsls	r2, r2, #2
 8001bea:	4093      	lsls	r3, r2
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bf2:	492f      	ldr	r1, [pc, #188]	; (8001cb0 <HAL_GPIO_Init+0x2bc>)
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	089b      	lsrs	r3, r3, #2
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	492c      	ldr	r1, [pc, #176]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c1a:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	4928      	ldr	r1, [pc, #160]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d006      	beq.n	8001c42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c34:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	4922      	ldr	r1, [pc, #136]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
 8001c40:	e006      	b.n	8001c50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c42:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	491e      	ldr	r1, [pc, #120]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d006      	beq.n	8001c6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c5c:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	4918      	ldr	r1, [pc, #96]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	608b      	str	r3, [r1, #8]
 8001c68:	e006      	b.n	8001c78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	4914      	ldr	r1, [pc, #80]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d021      	beq.n	8001cc8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	490e      	ldr	r1, [pc, #56]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60cb      	str	r3, [r1, #12]
 8001c90:	e021      	b.n	8001cd6 <HAL_GPIO_Init+0x2e2>
 8001c92:	bf00      	nop
 8001c94:	10320000 	.word	0x10320000
 8001c98:	10310000 	.word	0x10310000
 8001c9c:	10220000 	.word	0x10220000
 8001ca0:	10210000 	.word	0x10210000
 8001ca4:	10120000 	.word	0x10120000
 8001ca8:	10110000 	.word	0x10110000
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40010000 	.word	0x40010000
 8001cb4:	40010800 	.word	0x40010800
 8001cb8:	40010c00 	.word	0x40010c00
 8001cbc:	40011000 	.word	0x40011000
 8001cc0:	40011400 	.word	0x40011400
 8001cc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_GPIO_Init+0x304>)
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	4909      	ldr	r1, [pc, #36]	; (8001cf8 <HAL_GPIO_Init+0x304>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	3301      	adds	r3, #1
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f47f ae8e 	bne.w	8001a08 <HAL_GPIO_Init+0x14>
  }
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	372c      	adds	r7, #44	; 0x2c
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	40010400 	.word	0x40010400

08001cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	807b      	strh	r3, [r7, #2]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d0c:	787b      	ldrb	r3, [r7, #1]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d12:	887a      	ldrh	r2, [r7, #2]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d18:	e003      	b.n	8001d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d1a:	887b      	ldrh	r3, [r7, #2]
 8001d1c:	041a      	lsls	r2, r3, #16
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	611a      	str	r2, [r3, #16]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4013      	ands	r3, r2
 8001d44:	041a      	lsls	r2, r3, #16
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	43d9      	mvns	r1, r3
 8001d4a:	887b      	ldrh	r3, [r7, #2]
 8001d4c:	400b      	ands	r3, r1
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	611a      	str	r2, [r3, #16]
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
	...

08001d60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e12b      	b.n	8001fca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff fa4c 	bl	8001224 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2224      	movs	r2, #36	; 0x24
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0201 	bic.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001db2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dc4:	f000 fce4 	bl	8002790 <HAL_RCC_GetPCLK1Freq>
 8001dc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4a81      	ldr	r2, [pc, #516]	; (8001fd4 <HAL_I2C_Init+0x274>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d807      	bhi.n	8001de4 <HAL_I2C_Init+0x84>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4a80      	ldr	r2, [pc, #512]	; (8001fd8 <HAL_I2C_Init+0x278>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	bf94      	ite	ls
 8001ddc:	2301      	movls	r3, #1
 8001dde:	2300      	movhi	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	e006      	b.n	8001df2 <HAL_I2C_Init+0x92>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4a7d      	ldr	r2, [pc, #500]	; (8001fdc <HAL_I2C_Init+0x27c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	bf94      	ite	ls
 8001dec:	2301      	movls	r3, #1
 8001dee:	2300      	movhi	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e0e7      	b.n	8001fca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4a78      	ldr	r2, [pc, #480]	; (8001fe0 <HAL_I2C_Init+0x280>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	0c9b      	lsrs	r3, r3, #18
 8001e04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4a6a      	ldr	r2, [pc, #424]	; (8001fd4 <HAL_I2C_Init+0x274>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d802      	bhi.n	8001e34 <HAL_I2C_Init+0xd4>
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	3301      	adds	r3, #1
 8001e32:	e009      	b.n	8001e48 <HAL_I2C_Init+0xe8>
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e3a:	fb02 f303 	mul.w	r3, r2, r3
 8001e3e:	4a69      	ldr	r2, [pc, #420]	; (8001fe4 <HAL_I2C_Init+0x284>)
 8001e40:	fba2 2303 	umull	r2, r3, r2, r3
 8001e44:	099b      	lsrs	r3, r3, #6
 8001e46:	3301      	adds	r3, #1
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	495c      	ldr	r1, [pc, #368]	; (8001fd4 <HAL_I2C_Init+0x274>)
 8001e64:	428b      	cmp	r3, r1
 8001e66:	d819      	bhi.n	8001e9c <HAL_I2C_Init+0x13c>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1e59      	subs	r1, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e76:	1c59      	adds	r1, r3, #1
 8001e78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e7c:	400b      	ands	r3, r1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00a      	beq.n	8001e98 <HAL_I2C_Init+0x138>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1e59      	subs	r1, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e90:	3301      	adds	r3, #1
 8001e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e96:	e051      	b.n	8001f3c <HAL_I2C_Init+0x1dc>
 8001e98:	2304      	movs	r3, #4
 8001e9a:	e04f      	b.n	8001f3c <HAL_I2C_Init+0x1dc>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d111      	bne.n	8001ec8 <HAL_I2C_Init+0x168>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1e58      	subs	r0, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6859      	ldr	r1, [r3, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	440b      	add	r3, r1
 8001eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	e012      	b.n	8001eee <HAL_I2C_Init+0x18e>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1e58      	subs	r0, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6859      	ldr	r1, [r3, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	0099      	lsls	r1, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf0c      	ite	eq
 8001ee8:	2301      	moveq	r3, #1
 8001eea:	2300      	movne	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_I2C_Init+0x196>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e022      	b.n	8001f3c <HAL_I2C_Init+0x1dc>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10e      	bne.n	8001f1c <HAL_I2C_Init+0x1bc>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1e58      	subs	r0, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6859      	ldr	r1, [r3, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	440b      	add	r3, r1
 8001f0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f10:	3301      	adds	r3, #1
 8001f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f1a:	e00f      	b.n	8001f3c <HAL_I2C_Init+0x1dc>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1e58      	subs	r0, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6859      	ldr	r1, [r3, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	0099      	lsls	r1, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f32:	3301      	adds	r3, #1
 8001f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	6809      	ldr	r1, [r1, #0]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69da      	ldr	r2, [r3, #28]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6911      	ldr	r1, [r2, #16]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68d2      	ldr	r2, [r2, #12]
 8001f76:	4311      	orrs	r1, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	000186a0 	.word	0x000186a0
 8001fd8:	001e847f 	.word	0x001e847f
 8001fdc:	003d08ff 	.word	0x003d08ff
 8001fe0:	431bde83 	.word	0x431bde83
 8001fe4:	10624dd3 	.word	0x10624dd3

08001fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e26c      	b.n	80024d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 8087 	beq.w	8002116 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002008:	4b92      	ldr	r3, [pc, #584]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b04      	cmp	r3, #4
 8002012:	d00c      	beq.n	800202e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002014:	4b8f      	ldr	r3, [pc, #572]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 030c 	and.w	r3, r3, #12
 800201c:	2b08      	cmp	r3, #8
 800201e:	d112      	bne.n	8002046 <HAL_RCC_OscConfig+0x5e>
 8002020:	4b8c      	ldr	r3, [pc, #560]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202c:	d10b      	bne.n	8002046 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202e:	4b89      	ldr	r3, [pc, #548]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d06c      	beq.n	8002114 <HAL_RCC_OscConfig+0x12c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d168      	bne.n	8002114 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e246      	b.n	80024d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204e:	d106      	bne.n	800205e <HAL_RCC_OscConfig+0x76>
 8002050:	4b80      	ldr	r3, [pc, #512]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a7f      	ldr	r2, [pc, #508]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	e02e      	b.n	80020bc <HAL_RCC_OscConfig+0xd4>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10c      	bne.n	8002080 <HAL_RCC_OscConfig+0x98>
 8002066:	4b7b      	ldr	r3, [pc, #492]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a7a      	ldr	r2, [pc, #488]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 800206c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4b78      	ldr	r3, [pc, #480]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a77      	ldr	r2, [pc, #476]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002078:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e01d      	b.n	80020bc <HAL_RCC_OscConfig+0xd4>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002088:	d10c      	bne.n	80020a4 <HAL_RCC_OscConfig+0xbc>
 800208a:	4b72      	ldr	r3, [pc, #456]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a71      	ldr	r2, [pc, #452]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	4b6f      	ldr	r3, [pc, #444]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a6e      	ldr	r2, [pc, #440]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 800209c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e00b      	b.n	80020bc <HAL_RCC_OscConfig+0xd4>
 80020a4:	4b6b      	ldr	r3, [pc, #428]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a6a      	ldr	r2, [pc, #424]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	4b68      	ldr	r3, [pc, #416]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a67      	ldr	r2, [pc, #412]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d013      	beq.n	80020ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7ff fb88 	bl	80017d8 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020cc:	f7ff fb84 	bl	80017d8 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	; 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e1fa      	b.n	80024d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020de:	4b5d      	ldr	r3, [pc, #372]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0xe4>
 80020ea:	e014      	b.n	8002116 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7ff fb74 	bl	80017d8 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f4:	f7ff fb70 	bl	80017d8 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b64      	cmp	r3, #100	; 0x64
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e1e6      	b.n	80024d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002106:	4b53      	ldr	r3, [pc, #332]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0x10c>
 8002112:	e000      	b.n	8002116 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d063      	beq.n	80021ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002122:	4b4c      	ldr	r3, [pc, #304]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00b      	beq.n	8002146 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800212e:	4b49      	ldr	r3, [pc, #292]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b08      	cmp	r3, #8
 8002138:	d11c      	bne.n	8002174 <HAL_RCC_OscConfig+0x18c>
 800213a:	4b46      	ldr	r3, [pc, #280]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d116      	bne.n	8002174 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002146:	4b43      	ldr	r3, [pc, #268]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_RCC_OscConfig+0x176>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d001      	beq.n	800215e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e1ba      	b.n	80024d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215e:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4939      	ldr	r1, [pc, #228]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002172:	e03a      	b.n	80021ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d020      	beq.n	80021be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800217c:	4b36      	ldr	r3, [pc, #216]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002182:	f7ff fb29 	bl	80017d8 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218a:	f7ff fb25 	bl	80017d8 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e19b      	b.n	80024d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219c:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a8:	4b2a      	ldr	r3, [pc, #168]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4927      	ldr	r1, [pc, #156]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	600b      	str	r3, [r1, #0]
 80021bc:	e015      	b.n	80021ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021be:	4b26      	ldr	r3, [pc, #152]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff fb08 	bl	80017d8 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021cc:	f7ff fb04 	bl	80017d8 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e17a      	b.n	80024d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021de:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d03a      	beq.n	800226c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d019      	beq.n	8002232 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021fe:	4b17      	ldr	r3, [pc, #92]	; (800225c <HAL_RCC_OscConfig+0x274>)
 8002200:	2201      	movs	r2, #1
 8002202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002204:	f7ff fae8 	bl	80017d8 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800220c:	f7ff fae4 	bl	80017d8 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e15a      	b.n	80024d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800222a:	2001      	movs	r0, #1
 800222c:	f000 fb08 	bl	8002840 <RCC_Delay>
 8002230:	e01c      	b.n	800226c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <HAL_RCC_OscConfig+0x274>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002238:	f7ff face 	bl	80017d8 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223e:	e00f      	b.n	8002260 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002240:	f7ff faca 	bl	80017d8 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d908      	bls.n	8002260 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e140      	b.n	80024d4 <HAL_RCC_OscConfig+0x4ec>
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	42420000 	.word	0x42420000
 800225c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002260:	4b9e      	ldr	r3, [pc, #632]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1e9      	bne.n	8002240 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80a6 	beq.w	80023c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227a:	2300      	movs	r3, #0
 800227c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800227e:	4b97      	ldr	r3, [pc, #604]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10d      	bne.n	80022a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800228a:	4b94      	ldr	r3, [pc, #592]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	4a93      	ldr	r2, [pc, #588]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 8002290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002294:	61d3      	str	r3, [r2, #28]
 8002296:	4b91      	ldr	r3, [pc, #580]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022a2:	2301      	movs	r3, #1
 80022a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a6:	4b8e      	ldr	r3, [pc, #568]	; (80024e0 <HAL_RCC_OscConfig+0x4f8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d118      	bne.n	80022e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022b2:	4b8b      	ldr	r3, [pc, #556]	; (80024e0 <HAL_RCC_OscConfig+0x4f8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a8a      	ldr	r2, [pc, #552]	; (80024e0 <HAL_RCC_OscConfig+0x4f8>)
 80022b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022be:	f7ff fa8b 	bl	80017d8 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c6:	f7ff fa87 	bl	80017d8 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b64      	cmp	r3, #100	; 0x64
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e0fd      	b.n	80024d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d8:	4b81      	ldr	r3, [pc, #516]	; (80024e0 <HAL_RCC_OscConfig+0x4f8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d106      	bne.n	80022fa <HAL_RCC_OscConfig+0x312>
 80022ec:	4b7b      	ldr	r3, [pc, #492]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	4a7a      	ldr	r2, [pc, #488]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6213      	str	r3, [r2, #32]
 80022f8:	e02d      	b.n	8002356 <HAL_RCC_OscConfig+0x36e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10c      	bne.n	800231c <HAL_RCC_OscConfig+0x334>
 8002302:	4b76      	ldr	r3, [pc, #472]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	4a75      	ldr	r2, [pc, #468]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	6213      	str	r3, [r2, #32]
 800230e:	4b73      	ldr	r3, [pc, #460]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	4a72      	ldr	r2, [pc, #456]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 8002314:	f023 0304 	bic.w	r3, r3, #4
 8002318:	6213      	str	r3, [r2, #32]
 800231a:	e01c      	b.n	8002356 <HAL_RCC_OscConfig+0x36e>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	2b05      	cmp	r3, #5
 8002322:	d10c      	bne.n	800233e <HAL_RCC_OscConfig+0x356>
 8002324:	4b6d      	ldr	r3, [pc, #436]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	4a6c      	ldr	r2, [pc, #432]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	6213      	str	r3, [r2, #32]
 8002330:	4b6a      	ldr	r3, [pc, #424]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4a69      	ldr	r2, [pc, #420]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6213      	str	r3, [r2, #32]
 800233c:	e00b      	b.n	8002356 <HAL_RCC_OscConfig+0x36e>
 800233e:	4b67      	ldr	r3, [pc, #412]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	4a66      	ldr	r2, [pc, #408]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 8002344:	f023 0301 	bic.w	r3, r3, #1
 8002348:	6213      	str	r3, [r2, #32]
 800234a:	4b64      	ldr	r3, [pc, #400]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	4a63      	ldr	r2, [pc, #396]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 8002350:	f023 0304 	bic.w	r3, r3, #4
 8002354:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d015      	beq.n	800238a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235e:	f7ff fa3b 	bl	80017d8 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002364:	e00a      	b.n	800237c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002366:	f7ff fa37 	bl	80017d8 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	f241 3288 	movw	r2, #5000	; 0x1388
 8002374:	4293      	cmp	r3, r2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e0ab      	b.n	80024d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237c:	4b57      	ldr	r3, [pc, #348]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0ee      	beq.n	8002366 <HAL_RCC_OscConfig+0x37e>
 8002388:	e014      	b.n	80023b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238a:	f7ff fa25 	bl	80017d8 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002390:	e00a      	b.n	80023a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002392:	f7ff fa21 	bl	80017d8 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e095      	b.n	80024d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a8:	4b4c      	ldr	r3, [pc, #304]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1ee      	bne.n	8002392 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023b4:	7dfb      	ldrb	r3, [r7, #23]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d105      	bne.n	80023c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ba:	4b48      	ldr	r3, [pc, #288]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	4a47      	ldr	r2, [pc, #284]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 8081 	beq.w	80024d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023d0:	4b42      	ldr	r3, [pc, #264]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d061      	beq.n	80024a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d146      	bne.n	8002472 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e4:	4b3f      	ldr	r3, [pc, #252]	; (80024e4 <HAL_RCC_OscConfig+0x4fc>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ea:	f7ff f9f5 	bl	80017d8 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f2:	f7ff f9f1 	bl	80017d8 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e067      	b.n	80024d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002404:	4b35      	ldr	r3, [pc, #212]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f0      	bne.n	80023f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002418:	d108      	bne.n	800242c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800241a:	4b30      	ldr	r3, [pc, #192]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	492d      	ldr	r1, [pc, #180]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800242c:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a19      	ldr	r1, [r3, #32]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	430b      	orrs	r3, r1
 800243e:	4927      	ldr	r1, [pc, #156]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002444:	4b27      	ldr	r3, [pc, #156]	; (80024e4 <HAL_RCC_OscConfig+0x4fc>)
 8002446:	2201      	movs	r2, #1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7ff f9c5 	bl	80017d8 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002452:	f7ff f9c1 	bl	80017d8 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e037      	b.n	80024d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002464:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x46a>
 8002470:	e02f      	b.n	80024d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002472:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCC_OscConfig+0x4fc>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7ff f9ae 	bl	80017d8 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002480:	f7ff f9aa 	bl	80017d8 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e020      	b.n	80024d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002492:	4b12      	ldr	r3, [pc, #72]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x498>
 800249e:	e018      	b.n	80024d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e013      	b.n	80024d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_RCC_OscConfig+0x4f4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d106      	bne.n	80024ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d001      	beq.n	80024d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40007000 	.word	0x40007000
 80024e4:	42420060 	.word	0x42420060

080024e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0d0      	b.n	800269e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024fc:	4b6a      	ldr	r3, [pc, #424]	; (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d910      	bls.n	800252c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b67      	ldr	r3, [pc, #412]	; (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 0207 	bic.w	r2, r3, #7
 8002512:	4965      	ldr	r1, [pc, #404]	; (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b63      	ldr	r3, [pc, #396]	; (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0b8      	b.n	800269e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d020      	beq.n	800257a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002544:	4b59      	ldr	r3, [pc, #356]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4a58      	ldr	r2, [pc, #352]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800254e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800255c:	4b53      	ldr	r3, [pc, #332]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4a52      	ldr	r2, [pc, #328]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002566:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002568:	4b50      	ldr	r3, [pc, #320]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	494d      	ldr	r1, [pc, #308]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	4313      	orrs	r3, r2
 8002578:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d040      	beq.n	8002608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	4b47      	ldr	r3, [pc, #284]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d115      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e07f      	b.n	800269e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d107      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a6:	4b41      	ldr	r3, [pc, #260]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d109      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e073      	b.n	800269e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b6:	4b3d      	ldr	r3, [pc, #244]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e06b      	b.n	800269e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025c6:	4b39      	ldr	r3, [pc, #228]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f023 0203 	bic.w	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4936      	ldr	r1, [pc, #216]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025d8:	f7ff f8fe 	bl	80017d8 <HAL_GetTick>
 80025dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025de:	e00a      	b.n	80025f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e0:	f7ff f8fa 	bl	80017d8 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e053      	b.n	800269e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f6:	4b2d      	ldr	r3, [pc, #180]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 020c 	and.w	r2, r3, #12
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	429a      	cmp	r2, r3
 8002606:	d1eb      	bne.n	80025e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002608:	4b27      	ldr	r3, [pc, #156]	; (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d210      	bcs.n	8002638 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002616:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 0207 	bic.w	r2, r3, #7
 800261e:	4922      	ldr	r1, [pc, #136]	; (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e032      	b.n	800269e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4916      	ldr	r1, [pc, #88]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	490e      	ldr	r1, [pc, #56]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002676:	f000 f821 	bl	80026bc <HAL_RCC_GetSysClockFreq>
 800267a:	4602      	mov	r2, r0
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	490a      	ldr	r1, [pc, #40]	; (80026b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002688:	5ccb      	ldrb	r3, [r1, r3]
 800268a:	fa22 f303 	lsr.w	r3, r2, r3
 800268e:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe ff12 	bl	80014c0 <HAL_InitTick>

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40022000 	.word	0x40022000
 80026ac:	40021000 	.word	0x40021000
 80026b0:	0800a11c 	.word	0x0800a11c
 80026b4:	20000000 	.word	0x20000000
 80026b8:	20000004 	.word	0x20000004

080026bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026bc:	b490      	push	{r4, r7}
 80026be:	b08a      	sub	sp, #40	; 0x28
 80026c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026c2:	4b2a      	ldr	r3, [pc, #168]	; (800276c <HAL_RCC_GetSysClockFreq+0xb0>)
 80026c4:	1d3c      	adds	r4, r7, #4
 80026c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026cc:	f240 2301 	movw	r3, #513	; 0x201
 80026d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	2300      	movs	r3, #0
 80026d8:	61bb      	str	r3, [r7, #24]
 80026da:	2300      	movs	r3, #0
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026e6:	4b22      	ldr	r3, [pc, #136]	; (8002770 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d002      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x40>
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d003      	beq.n	8002702 <HAL_RCC_GetSysClockFreq+0x46>
 80026fa:	e02d      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026fc:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026fe:	623b      	str	r3, [r7, #32]
      break;
 8002700:	e02d      	b.n	800275e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	0c9b      	lsrs	r3, r3, #18
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800270e:	4413      	add	r3, r2
 8002710:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002714:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d013      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002720:	4b13      	ldr	r3, [pc, #76]	; (8002770 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	0c5b      	lsrs	r3, r3, #17
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800272e:	4413      	add	r3, r2
 8002730:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002734:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	4a0e      	ldr	r2, [pc, #56]	; (8002774 <HAL_RCC_GetSysClockFreq+0xb8>)
 800273a:	fb02 f203 	mul.w	r2, r2, r3
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	fbb2 f3f3 	udiv	r3, r2, r3
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
 8002746:	e004      	b.n	8002752 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	4a0b      	ldr	r2, [pc, #44]	; (8002778 <HAL_RCC_GetSysClockFreq+0xbc>)
 800274c:	fb02 f303 	mul.w	r3, r2, r3
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	623b      	str	r3, [r7, #32]
      break;
 8002756:	e002      	b.n	800275e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_RCC_GetSysClockFreq+0xb8>)
 800275a:	623b      	str	r3, [r7, #32]
      break;
 800275c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800275e:	6a3b      	ldr	r3, [r7, #32]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3728      	adds	r7, #40	; 0x28
 8002764:	46bd      	mov	sp, r7
 8002766:	bc90      	pop	{r4, r7}
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	0800a10c 	.word	0x0800a10c
 8002770:	40021000 	.word	0x40021000
 8002774:	007a1200 	.word	0x007a1200
 8002778:	003d0900 	.word	0x003d0900

0800277c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002780:	4b02      	ldr	r3, [pc, #8]	; (800278c <HAL_RCC_GetHCLKFreq+0x10>)
 8002782:	681b      	ldr	r3, [r3, #0]
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	20000000 	.word	0x20000000

08002790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002794:	f7ff fff2 	bl	800277c <HAL_RCC_GetHCLKFreq>
 8002798:	4602      	mov	r2, r0
 800279a:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	0a1b      	lsrs	r3, r3, #8
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	4903      	ldr	r1, [pc, #12]	; (80027b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a6:	5ccb      	ldrb	r3, [r1, r3]
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40021000 	.word	0x40021000
 80027b4:	0800a12c 	.word	0x0800a12c

080027b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027bc:	f7ff ffde 	bl	800277c <HAL_RCC_GetHCLKFreq>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	0adb      	lsrs	r3, r3, #11
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	4903      	ldr	r1, [pc, #12]	; (80027dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ce:	5ccb      	ldrb	r3, [r1, r3]
 80027d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	0800a12c 	.word	0x0800a12c

080027e0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	220f      	movs	r2, #15
 80027ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_RCC_GetClockConfig+0x58>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0203 	and.w	r2, r3, #3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027fc:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <HAL_RCC_GetClockConfig+0x58>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_RCC_GetClockConfig+0x58>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <HAL_RCC_GetClockConfig+0x58>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	08db      	lsrs	r3, r3, #3
 800281a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002822:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_RCC_GetClockConfig+0x5c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0207 	and.w	r2, r3, #7
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	40021000 	.word	0x40021000
 800283c:	40022000 	.word	0x40022000

08002840 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002848:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <RCC_Delay+0x34>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <RCC_Delay+0x38>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	0a5b      	lsrs	r3, r3, #9
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	fb02 f303 	mul.w	r3, r2, r3
 800285a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800285c:	bf00      	nop
  }
  while (Delay --);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1e5a      	subs	r2, r3, #1
 8002862:	60fa      	str	r2, [r7, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f9      	bne.n	800285c <RCC_Delay+0x1c>
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	20000000 	.word	0x20000000
 8002878:	10624dd3 	.word	0x10624dd3

0800287c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e076      	b.n	800297c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	2b00      	cmp	r3, #0
 8002894:	d108      	bne.n	80028a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800289e:	d009      	beq.n	80028b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	61da      	str	r2, [r3, #28]
 80028a6:	e005      	b.n	80028b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7fe fce6 	bl	80012a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002938:	ea42 0103 	orr.w	r1, r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	0c1a      	lsrs	r2, r3, #16
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f002 0204 	and.w	r2, r2, #4
 800295a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	69da      	ldr	r2, [r3, #28]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800296a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	4613      	mov	r3, r2
 8002992:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_SPI_Transmit+0x22>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e126      	b.n	8002bf4 <HAL_SPI_Transmit+0x270>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029ae:	f7fe ff13 	bl	80017d8 <HAL_GetTick>
 80029b2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80029b4:	88fb      	ldrh	r3, [r7, #6]
 80029b6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d002      	beq.n	80029ca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029c4:	2302      	movs	r3, #2
 80029c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029c8:	e10b      	b.n	8002be2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <HAL_SPI_Transmit+0x52>
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d102      	bne.n	80029dc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029da:	e102      	b.n	8002be2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2203      	movs	r2, #3
 80029e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	88fa      	ldrh	r2, [r7, #6]
 80029f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	88fa      	ldrh	r2, [r7, #6]
 80029fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a22:	d10f      	bne.n	8002a44 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a32:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a42:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4e:	2b40      	cmp	r3, #64	; 0x40
 8002a50:	d007      	beq.n	8002a62 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a6a:	d14b      	bne.n	8002b04 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <HAL_SPI_Transmit+0xf6>
 8002a74:	8afb      	ldrh	r3, [r7, #22]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d13e      	bne.n	8002af8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	881a      	ldrh	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	1c9a      	adds	r2, r3, #2
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a9e:	e02b      	b.n	8002af8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d112      	bne.n	8002ad4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	881a      	ldrh	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	1c9a      	adds	r2, r3, #2
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ad2:	e011      	b.n	8002af8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ad4:	f7fe fe80 	bl	80017d8 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d803      	bhi.n	8002aec <HAL_SPI_Transmit+0x168>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aea:	d102      	bne.n	8002af2 <HAL_SPI_Transmit+0x16e>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d102      	bne.n	8002af8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002af6:	e074      	b.n	8002be2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1ce      	bne.n	8002aa0 <HAL_SPI_Transmit+0x11c>
 8002b02:	e04c      	b.n	8002b9e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <HAL_SPI_Transmit+0x18e>
 8002b0c:	8afb      	ldrh	r3, [r7, #22]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d140      	bne.n	8002b94 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	330c      	adds	r3, #12
 8002b1c:	7812      	ldrb	r2, [r2, #0]
 8002b1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b38:	e02c      	b.n	8002b94 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d113      	bne.n	8002b70 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	330c      	adds	r3, #12
 8002b52:	7812      	ldrb	r2, [r2, #0]
 8002b54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b6e:	e011      	b.n	8002b94 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b70:	f7fe fe32 	bl	80017d8 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d803      	bhi.n	8002b88 <HAL_SPI_Transmit+0x204>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b86:	d102      	bne.n	8002b8e <HAL_SPI_Transmit+0x20a>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d102      	bne.n	8002b94 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b92:	e026      	b.n	8002be2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1cd      	bne.n	8002b3a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	6839      	ldr	r1, [r7, #0]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fa62 	bl	800306c <SPI_EndRxTxTransaction>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10a      	bne.n	8002bd2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	613b      	str	r3, [r7, #16]
 8002bd0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	77fb      	strb	r3, [r7, #31]
 8002bde:	e000      	b.n	8002be2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002be0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bf2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3720      	adds	r7, #32
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08c      	sub	sp, #48	; 0x30
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
 8002c08:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <HAL_SPI_TransmitReceive+0x26>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e18a      	b.n	8002f38 <HAL_SPI_TransmitReceive+0x33c>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c2a:	f7fe fdd5 	bl	80017d8 <HAL_GetTick>
 8002c2e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002c40:	887b      	ldrh	r3, [r7, #2]
 8002c42:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d00f      	beq.n	8002c6c <HAL_SPI_TransmitReceive+0x70>
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c52:	d107      	bne.n	8002c64 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d103      	bne.n	8002c64 <HAL_SPI_TransmitReceive+0x68>
 8002c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d003      	beq.n	8002c6c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002c64:	2302      	movs	r3, #2
 8002c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c6a:	e15b      	b.n	8002f24 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d005      	beq.n	8002c7e <HAL_SPI_TransmitReceive+0x82>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <HAL_SPI_TransmitReceive+0x82>
 8002c78:	887b      	ldrh	r3, [r7, #2]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d103      	bne.n	8002c86 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c84:	e14e      	b.n	8002f24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d003      	beq.n	8002c9a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2205      	movs	r2, #5
 8002c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	887a      	ldrh	r2, [r7, #2]
 8002caa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	887a      	ldrh	r2, [r7, #2]
 8002cb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	887a      	ldrh	r2, [r7, #2]
 8002cbc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	887a      	ldrh	r2, [r7, #2]
 8002cc2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cda:	2b40      	cmp	r3, #64	; 0x40
 8002cdc:	d007      	beq.n	8002cee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cf6:	d178      	bne.n	8002dea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <HAL_SPI_TransmitReceive+0x10a>
 8002d00:	8b7b      	ldrh	r3, [r7, #26]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d166      	bne.n	8002dd4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	881a      	ldrh	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	1c9a      	adds	r2, r3, #2
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d2a:	e053      	b.n	8002dd4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d11b      	bne.n	8002d72 <HAL_SPI_TransmitReceive+0x176>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d016      	beq.n	8002d72 <HAL_SPI_TransmitReceive+0x176>
 8002d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d113      	bne.n	8002d72 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	881a      	ldrh	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	1c9a      	adds	r2, r3, #2
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d119      	bne.n	8002db4 <HAL_SPI_TransmitReceive+0x1b8>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d014      	beq.n	8002db4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	b292      	uxth	r2, r2
 8002d96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9c:	1c9a      	adds	r2, r3, #2
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002db0:	2301      	movs	r3, #1
 8002db2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002db4:	f7fe fd10 	bl	80017d8 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d807      	bhi.n	8002dd4 <HAL_SPI_TransmitReceive+0x1d8>
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dca:	d003      	beq.n	8002dd4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002dd2:	e0a7      	b.n	8002f24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1a6      	bne.n	8002d2c <HAL_SPI_TransmitReceive+0x130>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1a1      	bne.n	8002d2c <HAL_SPI_TransmitReceive+0x130>
 8002de8:	e07c      	b.n	8002ee4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <HAL_SPI_TransmitReceive+0x1fc>
 8002df2:	8b7b      	ldrh	r3, [r7, #26]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d16b      	bne.n	8002ed0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	330c      	adds	r3, #12
 8002e02:	7812      	ldrb	r2, [r2, #0]
 8002e04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e1e:	e057      	b.n	8002ed0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d11c      	bne.n	8002e68 <HAL_SPI_TransmitReceive+0x26c>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d017      	beq.n	8002e68 <HAL_SPI_TransmitReceive+0x26c>
 8002e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d114      	bne.n	8002e68 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	330c      	adds	r3, #12
 8002e48:	7812      	ldrb	r2, [r2, #0]
 8002e4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d119      	bne.n	8002eaa <HAL_SPI_TransmitReceive+0x2ae>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d014      	beq.n	8002eaa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002eaa:	f7fe fc95 	bl	80017d8 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d803      	bhi.n	8002ec2 <HAL_SPI_TransmitReceive+0x2c6>
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec0:	d102      	bne.n	8002ec8 <HAL_SPI_TransmitReceive+0x2cc>
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d103      	bne.n	8002ed0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ece:	e029      	b.n	8002f24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1a2      	bne.n	8002e20 <HAL_SPI_TransmitReceive+0x224>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d19d      	bne.n	8002e20 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f8bf 	bl	800306c <SPI_EndRxTxTransaction>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d006      	beq.n	8002f02 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2220      	movs	r2, #32
 8002efe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002f00:	e010      	b.n	8002f24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10b      	bne.n	8002f22 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	e000      	b.n	8002f24 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002f22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3730      	adds	r7, #48	; 0x30
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f4e:	b2db      	uxtb	r3, r3
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr
	...

08002f5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f6c:	f7fe fc34 	bl	80017d8 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	4413      	add	r3, r2
 8002f7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f7c:	f7fe fc2c 	bl	80017d8 <HAL_GetTick>
 8002f80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f82:	4b39      	ldr	r3, [pc, #228]	; (8003068 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	015b      	lsls	r3, r3, #5
 8002f88:	0d1b      	lsrs	r3, r3, #20
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	fb02 f303 	mul.w	r3, r2, r3
 8002f90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f92:	e054      	b.n	800303e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9a:	d050      	beq.n	800303e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f9c:	f7fe fc1c 	bl	80017d8 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	69fa      	ldr	r2, [r7, #28]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d902      	bls.n	8002fb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d13d      	bne.n	800302e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fca:	d111      	bne.n	8002ff0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fd4:	d004      	beq.n	8002fe0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fde:	d107      	bne.n	8002ff0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff8:	d10f      	bne.n	800301a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003018:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e017      	b.n	800305e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	3b01      	subs	r3, #1
 800303c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4013      	ands	r3, r2
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	429a      	cmp	r2, r3
 800304c:	bf0c      	ite	eq
 800304e:	2301      	moveq	r3, #1
 8003050:	2300      	movne	r3, #0
 8003052:	b2db      	uxtb	r3, r3
 8003054:	461a      	mov	r2, r3
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	429a      	cmp	r2, r3
 800305a:	d19b      	bne.n	8002f94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3720      	adds	r7, #32
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000000 	.word	0x20000000

0800306c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af02      	add	r7, sp, #8
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2200      	movs	r2, #0
 8003080:	2180      	movs	r1, #128	; 0x80
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f7ff ff6a 	bl	8002f5c <SPI_WaitFlagStateUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d007      	beq.n	800309e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003092:	f043 0220 	orr.w	r2, r3, #32
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e000      	b.n	80030a0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e041      	b.n	800313e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d106      	bne.n	80030d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f839 	bl	8003146 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3304      	adds	r3, #4
 80030e4:	4619      	mov	r1, r3
 80030e6:	4610      	mov	r0, r2
 80030e8:	f000 fa98 	bl	800361c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr

08003158 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b01      	cmp	r3, #1
 800316a:	d001      	beq.n	8003170 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e03a      	b.n	80031e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a18      	ldr	r2, [pc, #96]	; (80031f0 <HAL_TIM_Base_Start_IT+0x98>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d00e      	beq.n	80031b0 <HAL_TIM_Base_Start_IT+0x58>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319a:	d009      	beq.n	80031b0 <HAL_TIM_Base_Start_IT+0x58>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d004      	beq.n	80031b0 <HAL_TIM_Base_Start_IT+0x58>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a13      	ldr	r2, [pc, #76]	; (80031f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d111      	bne.n	80031d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b06      	cmp	r3, #6
 80031c0:	d010      	beq.n	80031e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 0201 	orr.w	r2, r2, #1
 80031d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d2:	e007      	b.n	80031e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr
 80031f0:	40012c00 	.word	0x40012c00
 80031f4:	40000400 	.word	0x40000400
 80031f8:	40000800 	.word	0x40000800

080031fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e041      	b.n	8003292 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fe f8c2 	bl	80013ac <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3304      	adds	r3, #4
 8003238:	4619      	mov	r1, r3
 800323a:	4610      	mov	r0, r2
 800323c:	f000 f9ee 	bl	800361c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d122      	bne.n	80032f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d11b      	bne.n	80032f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f06f 0202 	mvn.w	r2, #2
 80032c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f981 	bl	80035e4 <HAL_TIM_IC_CaptureCallback>
 80032e2:	e005      	b.n	80032f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f974 	bl	80035d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f983 	bl	80035f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b04      	cmp	r3, #4
 8003302:	d122      	bne.n	800334a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b04      	cmp	r3, #4
 8003310:	d11b      	bne.n	800334a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f06f 0204 	mvn.w	r2, #4
 800331a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f957 	bl	80035e4 <HAL_TIM_IC_CaptureCallback>
 8003336:	e005      	b.n	8003344 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f94a 	bl	80035d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f959 	bl	80035f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	2b08      	cmp	r3, #8
 8003356:	d122      	bne.n	800339e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b08      	cmp	r3, #8
 8003364:	d11b      	bne.n	800339e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f06f 0208 	mvn.w	r2, #8
 800336e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2204      	movs	r2, #4
 8003374:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f92d 	bl	80035e4 <HAL_TIM_IC_CaptureCallback>
 800338a:	e005      	b.n	8003398 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f920 	bl	80035d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f92f 	bl	80035f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b10      	cmp	r3, #16
 80033aa:	d122      	bne.n	80033f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	2b10      	cmp	r3, #16
 80033b8:	d11b      	bne.n	80033f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f06f 0210 	mvn.w	r2, #16
 80033c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2208      	movs	r2, #8
 80033c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f903 	bl	80035e4 <HAL_TIM_IC_CaptureCallback>
 80033de:	e005      	b.n	80033ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f8f6 	bl	80035d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f905 	bl	80035f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d10e      	bne.n	800341e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b01      	cmp	r3, #1
 800340c:	d107      	bne.n	800341e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f06f 0201 	mvn.w	r2, #1
 8003416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7fd feb3 	bl	8001184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003428:	2b80      	cmp	r3, #128	; 0x80
 800342a:	d10e      	bne.n	800344a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003436:	2b80      	cmp	r3, #128	; 0x80
 8003438:	d107      	bne.n	800344a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fac0 	bl	80039ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003454:	2b40      	cmp	r3, #64	; 0x40
 8003456:	d10e      	bne.n	8003476 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003462:	2b40      	cmp	r3, #64	; 0x40
 8003464:	d107      	bne.n	8003476 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800346e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f8c9 	bl	8003608 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b20      	cmp	r3, #32
 8003482:	d10e      	bne.n	80034a2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	2b20      	cmp	r3, #32
 8003490:	d107      	bne.n	80034a2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f06f 0220 	mvn.w	r2, #32
 800349a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fa8b 	bl	80039b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b084      	sub	sp, #16
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_TIM_IC_ConfigChannel+0x1a>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e082      	b.n	80035ca <HAL_TIM_IC_ConfigChannel+0x120>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d11b      	bne.n	800350a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	6819      	ldr	r1, [r3, #0]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f000 f8fd 	bl	80036e0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699a      	ldr	r2, [r3, #24]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 020c 	bic.w	r2, r2, #12
 80034f4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6999      	ldr	r1, [r3, #24]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	619a      	str	r2, [r3, #24]
 8003508:	e05a      	b.n	80035c0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b04      	cmp	r3, #4
 800350e:	d11c      	bne.n	800354a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	6819      	ldr	r1, [r3, #0]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f000 f938 	bl	8003794 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699a      	ldr	r2, [r3, #24]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003532:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6999      	ldr	r1, [r3, #24]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	021a      	lsls	r2, r3, #8
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	619a      	str	r2, [r3, #24]
 8003548:	e03a      	b.n	80035c0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b08      	cmp	r3, #8
 800354e:	d11b      	bne.n	8003588 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	6819      	ldr	r1, [r3, #0]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f000 f954 	bl	800380c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69da      	ldr	r2, [r3, #28]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 020c 	bic.w	r2, r2, #12
 8003572:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	69d9      	ldr	r1, [r3, #28]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	61da      	str	r2, [r3, #28]
 8003586:	e01b      	b.n	80035c0 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	6819      	ldr	r1, [r3, #0]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f000 f973 	bl	8003882 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	69da      	ldr	r2, [r3, #28]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80035aa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	69d9      	ldr	r1, [r3, #28]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	021a      	lsls	r2, r3, #8
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr

080035e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr

080035f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr

08003608 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr
	...

0800361c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a29      	ldr	r2, [pc, #164]	; (80036d4 <TIM_Base_SetConfig+0xb8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00b      	beq.n	800364c <TIM_Base_SetConfig+0x30>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363a:	d007      	beq.n	800364c <TIM_Base_SetConfig+0x30>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a26      	ldr	r2, [pc, #152]	; (80036d8 <TIM_Base_SetConfig+0xbc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d003      	beq.n	800364c <TIM_Base_SetConfig+0x30>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a25      	ldr	r2, [pc, #148]	; (80036dc <TIM_Base_SetConfig+0xc0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d108      	bne.n	800365e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a1c      	ldr	r2, [pc, #112]	; (80036d4 <TIM_Base_SetConfig+0xb8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00b      	beq.n	800367e <TIM_Base_SetConfig+0x62>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366c:	d007      	beq.n	800367e <TIM_Base_SetConfig+0x62>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a19      	ldr	r2, [pc, #100]	; (80036d8 <TIM_Base_SetConfig+0xbc>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d003      	beq.n	800367e <TIM_Base_SetConfig+0x62>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a18      	ldr	r2, [pc, #96]	; (80036dc <TIM_Base_SetConfig+0xc0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d108      	bne.n	8003690 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4313      	orrs	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a07      	ldr	r2, [pc, #28]	; (80036d4 <TIM_Base_SetConfig+0xb8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d103      	bne.n	80036c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	615a      	str	r2, [r3, #20]
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr
 80036d4:	40012c00 	.word	0x40012c00
 80036d8:	40000400 	.word	0x40000400
 80036dc:	40000800 	.word	0x40000800

080036e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	f023 0201 	bic.w	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4a1f      	ldr	r2, [pc, #124]	; (8003788 <TIM_TI1_SetConfig+0xa8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00b      	beq.n	8003726 <TIM_TI1_SetConfig+0x46>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003714:	d007      	beq.n	8003726 <TIM_TI1_SetConfig+0x46>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4a1c      	ldr	r2, [pc, #112]	; (800378c <TIM_TI1_SetConfig+0xac>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d003      	beq.n	8003726 <TIM_TI1_SetConfig+0x46>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4a1b      	ldr	r2, [pc, #108]	; (8003790 <TIM_TI1_SetConfig+0xb0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d101      	bne.n	800372a <TIM_TI1_SetConfig+0x4a>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <TIM_TI1_SetConfig+0x4c>
 800372a:	2300      	movs	r3, #0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f023 0303 	bic.w	r3, r3, #3
 8003736:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	e003      	b.n	800374a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f043 0301 	orr.w	r3, r3, #1
 8003748:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003750:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	b2db      	uxtb	r3, r3
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f023 030a 	bic.w	r3, r3, #10
 8003764:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f003 030a 	and.w	r3, r3, #10
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	621a      	str	r2, [r3, #32]
}
 800377e:	bf00      	nop
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr
 8003788:	40012c00 	.word	0x40012c00
 800378c:	40000400 	.word	0x40000400
 8003790:	40000800 	.word	0x40000800

08003794 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	f023 0210 	bic.w	r2, r3, #16
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	021b      	lsls	r3, r3, #8
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	031b      	lsls	r3, r3, #12
 80037d8:	b29b      	uxth	r3, r3
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	621a      	str	r2, [r3, #32]
}
 8003802:	bf00      	nop
 8003804:	371c      	adds	r7, #28
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr

0800380c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f023 0303 	bic.w	r3, r3, #3
 8003838:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4313      	orrs	r3, r2
 8003840:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003848:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	b2db      	uxtb	r3, r3
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800385c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	021b      	lsls	r3, r3, #8
 8003862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	621a      	str	r2, [r3, #32]
}
 8003878:	bf00      	nop
 800387a:	371c      	adds	r7, #28
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr

08003882 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003882:	b480      	push	{r7}
 8003884:	b087      	sub	sp, #28
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
 800388e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	021b      	lsls	r3, r3, #8
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	031b      	lsls	r3, r3, #12
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	031b      	lsls	r3, r3, #12
 80038da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	621a      	str	r2, [r3, #32]
}
 80038f0:	bf00      	nop
 80038f2:	371c      	adds	r7, #28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
	...

080038fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003910:	2302      	movs	r3, #2
 8003912:	e046      	b.n	80039a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a16      	ldr	r2, [pc, #88]	; (80039ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00e      	beq.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003960:	d009      	beq.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a12      	ldr	r2, [pc, #72]	; (80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d004      	beq.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a10      	ldr	r2, [pc, #64]	; (80039b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d10c      	bne.n	8003990 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800397c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	4313      	orrs	r3, r2
 8003986:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr
 80039ac:	40012c00 	.word	0x40012c00
 80039b0:	40000400 	.word	0x40000400
 80039b4:	40000800 	.word	0x40000800

080039b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr

080039ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr

080039dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e03f      	b.n	8003a6e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7fd fd12 	bl	800142c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2224      	movs	r2, #36	; 0x24
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f829 	bl	8003a78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695a      	ldr	r2, [r3, #20]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ab2:	f023 030c 	bic.w	r3, r3, #12
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6812      	ldr	r2, [r2, #0]
 8003aba:	68b9      	ldr	r1, [r7, #8]
 8003abc:	430b      	orrs	r3, r1
 8003abe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a2c      	ldr	r2, [pc, #176]	; (8003b8c <UART_SetConfig+0x114>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d103      	bne.n	8003ae8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ae0:	f7fe fe6a 	bl	80027b8 <HAL_RCC_GetPCLK2Freq>
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	e002      	b.n	8003aee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ae8:	f7fe fe52 	bl	8002790 <HAL_RCC_GetPCLK1Freq>
 8003aec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	009a      	lsls	r2, r3, #2
 8003af8:	441a      	add	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b04:	4a22      	ldr	r2, [pc, #136]	; (8003b90 <UART_SetConfig+0x118>)
 8003b06:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	0119      	lsls	r1, r3, #4
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	009a      	lsls	r2, r3, #2
 8003b18:	441a      	add	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b24:	4b1a      	ldr	r3, [pc, #104]	; (8003b90 <UART_SetConfig+0x118>)
 8003b26:	fba3 0302 	umull	r0, r3, r3, r2
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	2064      	movs	r0, #100	; 0x64
 8003b2e:	fb00 f303 	mul.w	r3, r0, r3
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	3332      	adds	r3, #50	; 0x32
 8003b38:	4a15      	ldr	r2, [pc, #84]	; (8003b90 <UART_SetConfig+0x118>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b44:	4419      	add	r1, r3
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009a      	lsls	r2, r3, #2
 8003b50:	441a      	add	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <UART_SetConfig+0x118>)
 8003b5e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	2064      	movs	r0, #100	; 0x64
 8003b66:	fb00 f303 	mul.w	r3, r0, r3
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	3332      	adds	r3, #50	; 0x32
 8003b70:	4a07      	ldr	r2, [pc, #28]	; (8003b90 <UART_SetConfig+0x118>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	f003 020f 	and.w	r2, r3, #15
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	440a      	add	r2, r1
 8003b82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b84:	bf00      	nop
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40013800 	.word	0x40013800
 8003b90:	51eb851f 	.word	0x51eb851f

08003b94 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003ba2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ba6:	2b84      	cmp	r3, #132	; 0x84
 8003ba8:	d005      	beq.n	8003bb6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003baa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3303      	adds	r3, #3
 8003bb4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr

08003bc2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc4:	b089      	sub	sp, #36	; 0x24
 8003bc6:	af04      	add	r7, sp, #16
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d020      	beq.n	8003c16 <osThreadCreate+0x54>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01c      	beq.n	8003c16 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685c      	ldr	r4, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681d      	ldr	r5, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691e      	ldr	r6, [r3, #16]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff ffd0 	bl	8003b94 <makeFreeRtosPriority>
 8003bf4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bfe:	9202      	str	r2, [sp, #8]
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	9100      	str	r1, [sp, #0]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	4632      	mov	r2, r6
 8003c08:	4629      	mov	r1, r5
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f000 f8e8 	bl	8003de0 <xTaskCreateStatic>
 8003c10:	4603      	mov	r3, r0
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	e01c      	b.n	8003c50 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685c      	ldr	r4, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c22:	b29e      	uxth	r6, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff ffb2 	bl	8003b94 <makeFreeRtosPriority>
 8003c30:	4602      	mov	r2, r0
 8003c32:	f107 030c 	add.w	r3, r7, #12
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	9200      	str	r2, [sp, #0]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	4632      	mov	r2, r6
 8003c3e:	4629      	mov	r1, r5
 8003c40:	4620      	mov	r0, r4
 8003c42:	f000 f929 	bl	8003e98 <xTaskCreate>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d001      	beq.n	8003c50 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e000      	b.n	8003c52 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003c50:	68fb      	ldr	r3, [r7, #12]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c5a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <osDelay+0x16>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	e000      	b.n	8003c72 <osDelay+0x18>
 8003c70:	2301      	movs	r3, #1
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fa3e 	bl	80040f4 <vTaskDelay>
  
  return osOK;
 8003c78:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f103 0208 	add.w	r2, r3, #8
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f04f 32ff 	mov.w	r2, #4294967295
 8003c9a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f103 0208 	add.w	r2, r3, #8
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f103 0208 	add.w	r2, r3, #8
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr

08003cc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr

08003cd8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	601a      	str	r2, [r3, #0]
}
 8003d14:	bf00      	nop
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr

08003d1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d103      	bne.n	8003d3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	e00c      	b.n	8003d58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3308      	adds	r3, #8
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	e002      	b.n	8003d4c <vListInsert+0x2e>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d2f6      	bcs.n	8003d46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	601a      	str	r2, [r3, #0]
}
 8003d84:	bf00      	nop
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr

08003d8e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b085      	sub	sp, #20
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6892      	ldr	r2, [r2, #8]
 8003da4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6852      	ldr	r2, [r2, #4]
 8003dae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d103      	bne.n	8003dc2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	1e5a      	subs	r2, r3, #1
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr

08003de0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08e      	sub	sp, #56	; 0x38
 8003de4:	af04      	add	r7, sp, #16
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10a      	bne.n	8003e0a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e06:	bf00      	nop
 8003e08:	e7fe      	b.n	8003e08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <xTaskCreateStatic+0x46>
	__asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	61fb      	str	r3, [r7, #28]
}
 8003e22:	bf00      	nop
 8003e24:	e7fe      	b.n	8003e24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e26:	2354      	movs	r3, #84	; 0x54
 8003e28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	2b54      	cmp	r3, #84	; 0x54
 8003e2e:	d00a      	beq.n	8003e46 <xTaskCreateStatic+0x66>
	__asm volatile
 8003e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	61bb      	str	r3, [r7, #24]
}
 8003e42:	bf00      	nop
 8003e44:	e7fe      	b.n	8003e44 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d01e      	beq.n	8003e8a <xTaskCreateStatic+0xaa>
 8003e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d01b      	beq.n	8003e8a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e64:	2300      	movs	r3, #0
 8003e66:	9303      	str	r3, [sp, #12]
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	9302      	str	r3, [sp, #8]
 8003e6c:	f107 0314 	add.w	r3, r7, #20
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	68b9      	ldr	r1, [r7, #8]
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f850 	bl	8003f22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e84:	f000 f8cc 	bl	8004020 <prvAddNewTaskToReadyList>
 8003e88:	e001      	b.n	8003e8e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e8e:	697b      	ldr	r3, [r7, #20]
	}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3728      	adds	r7, #40	; 0x28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08c      	sub	sp, #48	; 0x30
 8003e9c:	af04      	add	r7, sp, #16
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ea8:	88fb      	ldrh	r3, [r7, #6]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fcf5 	bl	800489c <pvPortMalloc>
 8003eb2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00e      	beq.n	8003ed8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003eba:	2054      	movs	r0, #84	; 0x54
 8003ebc:	f000 fcee 	bl	800489c <pvPortMalloc>
 8003ec0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	631a      	str	r2, [r3, #48]	; 0x30
 8003ece:	e005      	b.n	8003edc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ed0:	6978      	ldr	r0, [r7, #20]
 8003ed2:	f000 fda7 	bl	8004a24 <vPortFree>
 8003ed6:	e001      	b.n	8003edc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d017      	beq.n	8003f12 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003eea:	88fa      	ldrh	r2, [r7, #6]
 8003eec:	2300      	movs	r3, #0
 8003eee:	9303      	str	r3, [sp, #12]
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	9302      	str	r3, [sp, #8]
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	68b9      	ldr	r1, [r7, #8]
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f80e 	bl	8003f22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f06:	69f8      	ldr	r0, [r7, #28]
 8003f08:	f000 f88a 	bl	8004020 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	61bb      	str	r3, [r7, #24]
 8003f10:	e002      	b.n	8003f18 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f12:	f04f 33ff 	mov.w	r3, #4294967295
 8003f16:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f18:	69bb      	ldr	r3, [r7, #24]
	}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3720      	adds	r7, #32
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b088      	sub	sp, #32
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	f023 0307 	bic.w	r3, r3, #7
 8003f48:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <prvInitialiseNewTask+0x48>
	__asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	617b      	str	r3, [r7, #20]
}
 8003f66:	bf00      	nop
 8003f68:	e7fe      	b.n	8003f68 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	e012      	b.n	8003f96 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	4413      	add	r3, r2
 8003f76:	7819      	ldrb	r1, [r3, #0]
 8003f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3334      	adds	r3, #52	; 0x34
 8003f80:	460a      	mov	r2, r1
 8003f82:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	4413      	add	r3, r2
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d006      	beq.n	8003f9e <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	3301      	adds	r3, #1
 8003f94:	61fb      	str	r3, [r7, #28]
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	2b0f      	cmp	r3, #15
 8003f9a:	d9e9      	bls.n	8003f70 <prvInitialiseNewTask+0x4e>
 8003f9c:	e000      	b.n	8003fa0 <prvInitialiseNewTask+0x7e>
		{
			break;
 8003f9e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003faa:	2b06      	cmp	r3, #6
 8003fac:	d901      	bls.n	8003fb2 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fae:	2306      	movs	r3, #6
 8003fb0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fb6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fbc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fe79 	bl	8003cc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd0:	3318      	adds	r3, #24
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff fe74 	bl	8003cc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fdc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	f1c3 0207 	rsb	r2, r3, #7
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	68f9      	ldr	r1, [r7, #12]
 8004000:	69b8      	ldr	r0, [r7, #24]
 8004002:	f000 fb37 	bl	8004674 <pxPortInitialiseStack>
 8004006:	4602      	mov	r2, r0
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800400c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004016:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004018:	bf00      	nop
 800401a:	3720      	adds	r7, #32
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004028:	f000 fb96 	bl	8004758 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800402c:	4b2a      	ldr	r3, [pc, #168]	; (80040d8 <prvAddNewTaskToReadyList+0xb8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3301      	adds	r3, #1
 8004032:	4a29      	ldr	r2, [pc, #164]	; (80040d8 <prvAddNewTaskToReadyList+0xb8>)
 8004034:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004036:	4b29      	ldr	r3, [pc, #164]	; (80040dc <prvAddNewTaskToReadyList+0xbc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800403e:	4a27      	ldr	r2, [pc, #156]	; (80040dc <prvAddNewTaskToReadyList+0xbc>)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004044:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <prvAddNewTaskToReadyList+0xb8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d110      	bne.n	800406e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800404c:	f000 fa48 	bl	80044e0 <prvInitialiseTaskLists>
 8004050:	e00d      	b.n	800406e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004052:	4b23      	ldr	r3, [pc, #140]	; (80040e0 <prvAddNewTaskToReadyList+0xc0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800405a:	4b20      	ldr	r3, [pc, #128]	; (80040dc <prvAddNewTaskToReadyList+0xbc>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	429a      	cmp	r2, r3
 8004066:	d802      	bhi.n	800406e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004068:	4a1c      	ldr	r2, [pc, #112]	; (80040dc <prvAddNewTaskToReadyList+0xbc>)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800406e:	4b1d      	ldr	r3, [pc, #116]	; (80040e4 <prvAddNewTaskToReadyList+0xc4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3301      	adds	r3, #1
 8004074:	4a1b      	ldr	r2, [pc, #108]	; (80040e4 <prvAddNewTaskToReadyList+0xc4>)
 8004076:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	2201      	movs	r2, #1
 800407e:	409a      	lsls	r2, r3
 8004080:	4b19      	ldr	r3, [pc, #100]	; (80040e8 <prvAddNewTaskToReadyList+0xc8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4313      	orrs	r3, r2
 8004086:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <prvAddNewTaskToReadyList+0xc8>)
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4a15      	ldr	r2, [pc, #84]	; (80040ec <prvAddNewTaskToReadyList+0xcc>)
 8004098:	441a      	add	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3304      	adds	r3, #4
 800409e:	4619      	mov	r1, r3
 80040a0:	4610      	mov	r0, r2
 80040a2:	f7ff fe19 	bl	8003cd8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040a6:	f000 fb87 	bl	80047b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040aa:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <prvAddNewTaskToReadyList+0xc0>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00e      	beq.n	80040d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <prvAddNewTaskToReadyList+0xbc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	429a      	cmp	r2, r3
 80040be:	d207      	bcs.n	80040d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <prvAddNewTaskToReadyList+0xd0>)
 80040c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040d0:	bf00      	nop
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20000308 	.word	0x20000308
 80040dc:	2000020c 	.word	0x2000020c
 80040e0:	20000314 	.word	0x20000314
 80040e4:	20000324 	.word	0x20000324
 80040e8:	20000310 	.word	0x20000310
 80040ec:	20000210 	.word	0x20000210
 80040f0:	e000ed04 	.word	0xe000ed04

080040f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d017      	beq.n	8004136 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004106:	4b13      	ldr	r3, [pc, #76]	; (8004154 <vTaskDelay+0x60>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <vTaskDelay+0x30>
	__asm volatile
 800410e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	60bb      	str	r3, [r7, #8]
}
 8004120:	bf00      	nop
 8004122:	e7fe      	b.n	8004122 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004124:	f000 f81a 	bl	800415c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004128:	2100      	movs	r1, #0
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fa3c 	bl	80045a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004130:	f000 f822 	bl	8004178 <xTaskResumeAll>
 8004134:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d107      	bne.n	800414c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <vTaskDelay+0x64>)
 800413e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800414c:	bf00      	nop
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	2000032c 	.word	0x2000032c
 8004158:	e000ed04 	.word	0xe000ed04

0800415c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004160:	4b04      	ldr	r3, [pc, #16]	; (8004174 <vTaskSuspendAll+0x18>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3301      	adds	r3, #1
 8004166:	4a03      	ldr	r2, [pc, #12]	; (8004174 <vTaskSuspendAll+0x18>)
 8004168:	6013      	str	r3, [r2, #0]
}
 800416a:	bf00      	nop
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	2000032c 	.word	0x2000032c

08004178 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004182:	2300      	movs	r3, #0
 8004184:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004186:	4b41      	ldr	r3, [pc, #260]	; (800428c <xTaskResumeAll+0x114>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10a      	bne.n	80041a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	603b      	str	r3, [r7, #0]
}
 80041a0:	bf00      	nop
 80041a2:	e7fe      	b.n	80041a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80041a4:	f000 fad8 	bl	8004758 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80041a8:	4b38      	ldr	r3, [pc, #224]	; (800428c <xTaskResumeAll+0x114>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3b01      	subs	r3, #1
 80041ae:	4a37      	ldr	r2, [pc, #220]	; (800428c <xTaskResumeAll+0x114>)
 80041b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041b2:	4b36      	ldr	r3, [pc, #216]	; (800428c <xTaskResumeAll+0x114>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d161      	bne.n	800427e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041ba:	4b35      	ldr	r3, [pc, #212]	; (8004290 <xTaskResumeAll+0x118>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d05d      	beq.n	800427e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041c2:	e02e      	b.n	8004222 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80041c4:	4b33      	ldr	r3, [pc, #204]	; (8004294 <xTaskResumeAll+0x11c>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3318      	adds	r3, #24
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff fddc 	bl	8003d8e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3304      	adds	r3, #4
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff fdd7 	bl	8003d8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	2201      	movs	r2, #1
 80041e6:	409a      	lsls	r2, r3
 80041e8:	4b2b      	ldr	r3, [pc, #172]	; (8004298 <xTaskResumeAll+0x120>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	4a2a      	ldr	r2, [pc, #168]	; (8004298 <xTaskResumeAll+0x120>)
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4a27      	ldr	r2, [pc, #156]	; (800429c <xTaskResumeAll+0x124>)
 8004200:	441a      	add	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3304      	adds	r3, #4
 8004206:	4619      	mov	r1, r3
 8004208:	4610      	mov	r0, r2
 800420a:	f7ff fd65 	bl	8003cd8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004212:	4b23      	ldr	r3, [pc, #140]	; (80042a0 <xTaskResumeAll+0x128>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	429a      	cmp	r2, r3
 800421a:	d302      	bcc.n	8004222 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800421c:	4b21      	ldr	r3, [pc, #132]	; (80042a4 <xTaskResumeAll+0x12c>)
 800421e:	2201      	movs	r2, #1
 8004220:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004222:	4b1c      	ldr	r3, [pc, #112]	; (8004294 <xTaskResumeAll+0x11c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1cc      	bne.n	80041c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004230:	f000 f996 	bl	8004560 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004234:	4b1c      	ldr	r3, [pc, #112]	; (80042a8 <xTaskResumeAll+0x130>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d010      	beq.n	8004262 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004240:	f000 f836 	bl	80042b0 <xTaskIncrementTick>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800424a:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <xTaskResumeAll+0x12c>)
 800424c:	2201      	movs	r2, #1
 800424e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3b01      	subs	r3, #1
 8004254:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1f1      	bne.n	8004240 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800425c:	4b12      	ldr	r3, [pc, #72]	; (80042a8 <xTaskResumeAll+0x130>)
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004262:	4b10      	ldr	r3, [pc, #64]	; (80042a4 <xTaskResumeAll+0x12c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d009      	beq.n	800427e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800426a:	2301      	movs	r3, #1
 800426c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800426e:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <xTaskResumeAll+0x134>)
 8004270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800427e:	f000 fa9b 	bl	80047b8 <vPortExitCritical>

	return xAlreadyYielded;
 8004282:	68bb      	ldr	r3, [r7, #8]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	2000032c 	.word	0x2000032c
 8004290:	20000308 	.word	0x20000308
 8004294:	200002cc 	.word	0x200002cc
 8004298:	20000310 	.word	0x20000310
 800429c:	20000210 	.word	0x20000210
 80042a0:	2000020c 	.word	0x2000020c
 80042a4:	2000031c 	.word	0x2000031c
 80042a8:	20000318 	.word	0x20000318
 80042ac:	e000ed04 	.word	0xe000ed04

080042b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042ba:	4b51      	ldr	r3, [pc, #324]	; (8004400 <xTaskIncrementTick+0x150>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f040 808d 	bne.w	80043de <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042c4:	4b4f      	ldr	r3, [pc, #316]	; (8004404 <xTaskIncrementTick+0x154>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3301      	adds	r3, #1
 80042ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042cc:	4a4d      	ldr	r2, [pc, #308]	; (8004404 <xTaskIncrementTick+0x154>)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d120      	bne.n	800431a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80042d8:	4b4b      	ldr	r3, [pc, #300]	; (8004408 <xTaskIncrementTick+0x158>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80042e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	603b      	str	r3, [r7, #0]
}
 80042f4:	bf00      	nop
 80042f6:	e7fe      	b.n	80042f6 <xTaskIncrementTick+0x46>
 80042f8:	4b43      	ldr	r3, [pc, #268]	; (8004408 <xTaskIncrementTick+0x158>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	4b43      	ldr	r3, [pc, #268]	; (800440c <xTaskIncrementTick+0x15c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a41      	ldr	r2, [pc, #260]	; (8004408 <xTaskIncrementTick+0x158>)
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	4a41      	ldr	r2, [pc, #260]	; (800440c <xTaskIncrementTick+0x15c>)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	4b40      	ldr	r3, [pc, #256]	; (8004410 <xTaskIncrementTick+0x160>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3301      	adds	r3, #1
 8004312:	4a3f      	ldr	r2, [pc, #252]	; (8004410 <xTaskIncrementTick+0x160>)
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	f000 f923 	bl	8004560 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800431a:	4b3e      	ldr	r3, [pc, #248]	; (8004414 <xTaskIncrementTick+0x164>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	429a      	cmp	r2, r3
 8004322:	d34d      	bcc.n	80043c0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004324:	4b38      	ldr	r3, [pc, #224]	; (8004408 <xTaskIncrementTick+0x158>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <xTaskIncrementTick+0x82>
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <xTaskIncrementTick+0x84>
 8004332:	2300      	movs	r3, #0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d004      	beq.n	8004342 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004338:	4b36      	ldr	r3, [pc, #216]	; (8004414 <xTaskIncrementTick+0x164>)
 800433a:	f04f 32ff 	mov.w	r2, #4294967295
 800433e:	601a      	str	r2, [r3, #0]
					break;
 8004340:	e03e      	b.n	80043c0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004342:	4b31      	ldr	r3, [pc, #196]	; (8004408 <xTaskIncrementTick+0x158>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	429a      	cmp	r2, r3
 8004358:	d203      	bcs.n	8004362 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800435a:	4a2e      	ldr	r2, [pc, #184]	; (8004414 <xTaskIncrementTick+0x164>)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6013      	str	r3, [r2, #0]
						break;
 8004360:	e02e      	b.n	80043c0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	3304      	adds	r3, #4
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff fd11 	bl	8003d8e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	2b00      	cmp	r3, #0
 8004372:	d004      	beq.n	800437e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	3318      	adds	r3, #24
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff fd08 	bl	8003d8e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	2201      	movs	r2, #1
 8004384:	409a      	lsls	r2, r3
 8004386:	4b24      	ldr	r3, [pc, #144]	; (8004418 <xTaskIncrementTick+0x168>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4313      	orrs	r3, r2
 800438c:	4a22      	ldr	r2, [pc, #136]	; (8004418 <xTaskIncrementTick+0x168>)
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004394:	4613      	mov	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4a1f      	ldr	r2, [pc, #124]	; (800441c <xTaskIncrementTick+0x16c>)
 800439e:	441a      	add	r2, r3
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	3304      	adds	r3, #4
 80043a4:	4619      	mov	r1, r3
 80043a6:	4610      	mov	r0, r2
 80043a8:	f7ff fc96 	bl	8003cd8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b0:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <xTaskIncrementTick+0x170>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d3b4      	bcc.n	8004324 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80043ba:	2301      	movs	r3, #1
 80043bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043be:	e7b1      	b.n	8004324 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043c0:	4b17      	ldr	r3, [pc, #92]	; (8004420 <xTaskIncrementTick+0x170>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c6:	4915      	ldr	r1, [pc, #84]	; (800441c <xTaskIncrementTick+0x16c>)
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d907      	bls.n	80043e8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80043d8:	2301      	movs	r3, #1
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	e004      	b.n	80043e8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80043de:	4b11      	ldr	r3, [pc, #68]	; (8004424 <xTaskIncrementTick+0x174>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3301      	adds	r3, #1
 80043e4:	4a0f      	ldr	r2, [pc, #60]	; (8004424 <xTaskIncrementTick+0x174>)
 80043e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80043e8:	4b0f      	ldr	r3, [pc, #60]	; (8004428 <xTaskIncrementTick+0x178>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80043f0:	2301      	movs	r3, #1
 80043f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80043f4:	697b      	ldr	r3, [r7, #20]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	2000032c 	.word	0x2000032c
 8004404:	2000030c 	.word	0x2000030c
 8004408:	200002c4 	.word	0x200002c4
 800440c:	200002c8 	.word	0x200002c8
 8004410:	20000320 	.word	0x20000320
 8004414:	20000328 	.word	0x20000328
 8004418:	20000310 	.word	0x20000310
 800441c:	20000210 	.word	0x20000210
 8004420:	2000020c 	.word	0x2000020c
 8004424:	20000318 	.word	0x20000318
 8004428:	2000031c 	.word	0x2000031c

0800442c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004432:	4b26      	ldr	r3, [pc, #152]	; (80044cc <vTaskSwitchContext+0xa0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800443a:	4b25      	ldr	r3, [pc, #148]	; (80044d0 <vTaskSwitchContext+0xa4>)
 800443c:	2201      	movs	r2, #1
 800443e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004440:	e03f      	b.n	80044c2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004442:	4b23      	ldr	r3, [pc, #140]	; (80044d0 <vTaskSwitchContext+0xa4>)
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004448:	4b22      	ldr	r3, [pc, #136]	; (80044d4 <vTaskSwitchContext+0xa8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	fab3 f383 	clz	r3, r3
 8004454:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004456:	7afb      	ldrb	r3, [r7, #11]
 8004458:	f1c3 031f 	rsb	r3, r3, #31
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	491e      	ldr	r1, [pc, #120]	; (80044d8 <vTaskSwitchContext+0xac>)
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4613      	mov	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10a      	bne.n	8004488 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	607b      	str	r3, [r7, #4]
}
 8004484:	bf00      	nop
 8004486:	e7fe      	b.n	8004486 <vTaskSwitchContext+0x5a>
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4613      	mov	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4a11      	ldr	r2, [pc, #68]	; (80044d8 <vTaskSwitchContext+0xac>)
 8004494:	4413      	add	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	3308      	adds	r3, #8
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d104      	bne.n	80044b8 <vTaskSwitchContext+0x8c>
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	605a      	str	r2, [r3, #4]
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	4a07      	ldr	r2, [pc, #28]	; (80044dc <vTaskSwitchContext+0xb0>)
 80044c0:	6013      	str	r3, [r2, #0]
}
 80044c2:	bf00      	nop
 80044c4:	371c      	adds	r7, #28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr
 80044cc:	2000032c 	.word	0x2000032c
 80044d0:	2000031c 	.word	0x2000031c
 80044d4:	20000310 	.word	0x20000310
 80044d8:	20000210 	.word	0x20000210
 80044dc:	2000020c 	.word	0x2000020c

080044e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044e6:	2300      	movs	r3, #0
 80044e8:	607b      	str	r3, [r7, #4]
 80044ea:	e00c      	b.n	8004506 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	4613      	mov	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4a12      	ldr	r2, [pc, #72]	; (8004540 <prvInitialiseTaskLists+0x60>)
 80044f8:	4413      	add	r3, r2
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff fbc1 	bl	8003c82 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3301      	adds	r3, #1
 8004504:	607b      	str	r3, [r7, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b06      	cmp	r3, #6
 800450a:	d9ef      	bls.n	80044ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800450c:	480d      	ldr	r0, [pc, #52]	; (8004544 <prvInitialiseTaskLists+0x64>)
 800450e:	f7ff fbb8 	bl	8003c82 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004512:	480d      	ldr	r0, [pc, #52]	; (8004548 <prvInitialiseTaskLists+0x68>)
 8004514:	f7ff fbb5 	bl	8003c82 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004518:	480c      	ldr	r0, [pc, #48]	; (800454c <prvInitialiseTaskLists+0x6c>)
 800451a:	f7ff fbb2 	bl	8003c82 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800451e:	480c      	ldr	r0, [pc, #48]	; (8004550 <prvInitialiseTaskLists+0x70>)
 8004520:	f7ff fbaf 	bl	8003c82 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004524:	480b      	ldr	r0, [pc, #44]	; (8004554 <prvInitialiseTaskLists+0x74>)
 8004526:	f7ff fbac 	bl	8003c82 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800452a:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <prvInitialiseTaskLists+0x78>)
 800452c:	4a05      	ldr	r2, [pc, #20]	; (8004544 <prvInitialiseTaskLists+0x64>)
 800452e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004530:	4b0a      	ldr	r3, [pc, #40]	; (800455c <prvInitialiseTaskLists+0x7c>)
 8004532:	4a05      	ldr	r2, [pc, #20]	; (8004548 <prvInitialiseTaskLists+0x68>)
 8004534:	601a      	str	r2, [r3, #0]
}
 8004536:	bf00      	nop
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20000210 	.word	0x20000210
 8004544:	2000029c 	.word	0x2000029c
 8004548:	200002b0 	.word	0x200002b0
 800454c:	200002cc 	.word	0x200002cc
 8004550:	200002e0 	.word	0x200002e0
 8004554:	200002f4 	.word	0x200002f4
 8004558:	200002c4 	.word	0x200002c4
 800455c:	200002c8 	.word	0x200002c8

08004560 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004566:	4b0e      	ldr	r3, [pc, #56]	; (80045a0 <prvResetNextTaskUnblockTime+0x40>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <prvResetNextTaskUnblockTime+0x14>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <prvResetNextTaskUnblockTime+0x16>
 8004574:	2300      	movs	r3, #0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d004      	beq.n	8004584 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800457a:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <prvResetNextTaskUnblockTime+0x44>)
 800457c:	f04f 32ff 	mov.w	r2, #4294967295
 8004580:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004582:	e008      	b.n	8004596 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <prvResetNextTaskUnblockTime+0x40>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	4a04      	ldr	r2, [pc, #16]	; (80045a4 <prvResetNextTaskUnblockTime+0x44>)
 8004594:	6013      	str	r3, [r2, #0]
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	bc80      	pop	{r7}
 800459e:	4770      	bx	lr
 80045a0:	200002c4 	.word	0x200002c4
 80045a4:	20000328 	.word	0x20000328

080045a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045b2:	4b29      	ldr	r3, [pc, #164]	; (8004658 <prvAddCurrentTaskToDelayedList+0xb0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045b8:	4b28      	ldr	r3, [pc, #160]	; (800465c <prvAddCurrentTaskToDelayedList+0xb4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3304      	adds	r3, #4
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff fbe5 	bl	8003d8e <uxListRemove>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10b      	bne.n	80045e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80045ca:	4b24      	ldr	r3, [pc, #144]	; (800465c <prvAddCurrentTaskToDelayedList+0xb4>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	2201      	movs	r2, #1
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	43da      	mvns	r2, r3
 80045d8:	4b21      	ldr	r3, [pc, #132]	; (8004660 <prvAddCurrentTaskToDelayedList+0xb8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4013      	ands	r3, r2
 80045de:	4a20      	ldr	r2, [pc, #128]	; (8004660 <prvAddCurrentTaskToDelayedList+0xb8>)
 80045e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e8:	d10a      	bne.n	8004600 <prvAddCurrentTaskToDelayedList+0x58>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d007      	beq.n	8004600 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045f0:	4b1a      	ldr	r3, [pc, #104]	; (800465c <prvAddCurrentTaskToDelayedList+0xb4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3304      	adds	r3, #4
 80045f6:	4619      	mov	r1, r3
 80045f8:	481a      	ldr	r0, [pc, #104]	; (8004664 <prvAddCurrentTaskToDelayedList+0xbc>)
 80045fa:	f7ff fb6d 	bl	8003cd8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045fe:	e026      	b.n	800464e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4413      	add	r3, r2
 8004606:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004608:	4b14      	ldr	r3, [pc, #80]	; (800465c <prvAddCurrentTaskToDelayedList+0xb4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	429a      	cmp	r2, r3
 8004616:	d209      	bcs.n	800462c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004618:	4b13      	ldr	r3, [pc, #76]	; (8004668 <prvAddCurrentTaskToDelayedList+0xc0>)
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	4b0f      	ldr	r3, [pc, #60]	; (800465c <prvAddCurrentTaskToDelayedList+0xb4>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3304      	adds	r3, #4
 8004622:	4619      	mov	r1, r3
 8004624:	4610      	mov	r0, r2
 8004626:	f7ff fb7a 	bl	8003d1e <vListInsert>
}
 800462a:	e010      	b.n	800464e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800462c:	4b0f      	ldr	r3, [pc, #60]	; (800466c <prvAddCurrentTaskToDelayedList+0xc4>)
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	4b0a      	ldr	r3, [pc, #40]	; (800465c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3304      	adds	r3, #4
 8004636:	4619      	mov	r1, r3
 8004638:	4610      	mov	r0, r2
 800463a:	f7ff fb70 	bl	8003d1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800463e:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	429a      	cmp	r2, r3
 8004646:	d202      	bcs.n	800464e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004648:	4a09      	ldr	r2, [pc, #36]	; (8004670 <prvAddCurrentTaskToDelayedList+0xc8>)
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	6013      	str	r3, [r2, #0]
}
 800464e:	bf00      	nop
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	2000030c 	.word	0x2000030c
 800465c:	2000020c 	.word	0x2000020c
 8004660:	20000310 	.word	0x20000310
 8004664:	200002f4 	.word	0x200002f4
 8004668:	200002c8 	.word	0x200002c8
 800466c:	200002c4 	.word	0x200002c4
 8004670:	20000328 	.word	0x20000328

08004674 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	3b04      	subs	r3, #4
 8004684:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800468c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3b04      	subs	r3, #4
 8004692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f023 0201 	bic.w	r2, r3, #1
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3b04      	subs	r3, #4
 80046a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046a4:	4a08      	ldr	r2, [pc, #32]	; (80046c8 <pxPortInitialiseStack+0x54>)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3b14      	subs	r3, #20
 80046ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	3b20      	subs	r3, #32
 80046ba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046bc:	68fb      	ldr	r3, [r7, #12]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr
 80046c8:	080046cd 	.word	0x080046cd

080046cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80046d2:	2300      	movs	r3, #0
 80046d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046d6:	4b12      	ldr	r3, [pc, #72]	; (8004720 <prvTaskExitError+0x54>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046de:	d00a      	beq.n	80046f6 <prvTaskExitError+0x2a>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	60fb      	str	r3, [r7, #12]
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <prvTaskExitError+0x28>
	__asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	60bb      	str	r3, [r7, #8]
}
 8004708:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800470a:	bf00      	nop
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0fc      	beq.n	800470c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004712:	bf00      	nop
 8004714:	bf00      	nop
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	bc80      	pop	{r7}
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	2000000c 	.word	0x2000000c
	...

08004730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004730:	4b07      	ldr	r3, [pc, #28]	; (8004750 <pxCurrentTCBConst2>)
 8004732:	6819      	ldr	r1, [r3, #0]
 8004734:	6808      	ldr	r0, [r1, #0]
 8004736:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800473a:	f380 8809 	msr	PSP, r0
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f04f 0000 	mov.w	r0, #0
 8004746:	f380 8811 	msr	BASEPRI, r0
 800474a:	f04e 0e0d 	orr.w	lr, lr, #13
 800474e:	4770      	bx	lr

08004750 <pxCurrentTCBConst2>:
 8004750:	2000020c 	.word	0x2000020c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop

08004758 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	607b      	str	r3, [r7, #4]
}
 8004770:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004772:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <vPortEnterCritical+0x58>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3301      	adds	r3, #1
 8004778:	4a0d      	ldr	r2, [pc, #52]	; (80047b0 <vPortEnterCritical+0x58>)
 800477a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <vPortEnterCritical+0x58>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d10f      	bne.n	80047a4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004784:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <vPortEnterCritical+0x5c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <vPortEnterCritical+0x4c>
	__asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	603b      	str	r3, [r7, #0]
}
 80047a0:	bf00      	nop
 80047a2:	e7fe      	b.n	80047a2 <vPortEnterCritical+0x4a>
	}
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	2000000c 	.word	0x2000000c
 80047b4:	e000ed04 	.word	0xe000ed04

080047b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80047be:	4b11      	ldr	r3, [pc, #68]	; (8004804 <vPortExitCritical+0x4c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10a      	bne.n	80047dc <vPortExitCritical+0x24>
	__asm volatile
 80047c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ca:	f383 8811 	msr	BASEPRI, r3
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	607b      	str	r3, [r7, #4]
}
 80047d8:	bf00      	nop
 80047da:	e7fe      	b.n	80047da <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80047dc:	4b09      	ldr	r3, [pc, #36]	; (8004804 <vPortExitCritical+0x4c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	4a08      	ldr	r2, [pc, #32]	; (8004804 <vPortExitCritical+0x4c>)
 80047e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80047e6:	4b07      	ldr	r3, [pc, #28]	; (8004804 <vPortExitCritical+0x4c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d105      	bne.n	80047fa <vPortExitCritical+0x42>
 80047ee:	2300      	movs	r3, #0
 80047f0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80047f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr
 8004804:	2000000c 	.word	0x2000000c
	...

08004810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004810:	f3ef 8009 	mrs	r0, PSP
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <pxCurrentTCBConst>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004820:	6010      	str	r0, [r2, #0]
 8004822:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004826:	f04f 0050 	mov.w	r0, #80	; 0x50
 800482a:	f380 8811 	msr	BASEPRI, r0
 800482e:	f7ff fdfd 	bl	800442c <vTaskSwitchContext>
 8004832:	f04f 0000 	mov.w	r0, #0
 8004836:	f380 8811 	msr	BASEPRI, r0
 800483a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800483e:	6819      	ldr	r1, [r3, #0]
 8004840:	6808      	ldr	r0, [r1, #0]
 8004842:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004846:	f380 8809 	msr	PSP, r0
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	4770      	bx	lr

08004850 <pxCurrentTCBConst>:
 8004850:	2000020c 	.word	0x2000020c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004854:	bf00      	nop
 8004856:	bf00      	nop

08004858 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
	__asm volatile
 800485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	607b      	str	r3, [r7, #4]
}
 8004870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004872:	f7ff fd1d 	bl	80042b0 <xTaskIncrementTick>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800487c:	4b06      	ldr	r3, [pc, #24]	; (8004898 <SysTick_Handler+0x40>)
 800487e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	2300      	movs	r3, #0
 8004886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	f383 8811 	msr	BASEPRI, r3
}
 800488e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004890:	bf00      	nop
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	e000ed04 	.word	0xe000ed04

0800489c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08a      	sub	sp, #40	; 0x28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80048a8:	f7ff fc58 	bl	800415c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80048ac:	4b58      	ldr	r3, [pc, #352]	; (8004a10 <pvPortMalloc+0x174>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80048b4:	f000 f910 	bl	8004ad8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048b8:	4b56      	ldr	r3, [pc, #344]	; (8004a14 <pvPortMalloc+0x178>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4013      	ands	r3, r2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f040 808e 	bne.w	80049e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01d      	beq.n	8004908 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80048cc:	2208      	movs	r2, #8
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4413      	add	r3, r2
 80048d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d014      	beq.n	8004908 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f023 0307 	bic.w	r3, r3, #7
 80048e4:	3308      	adds	r3, #8
 80048e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <pvPortMalloc+0x6c>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	617b      	str	r3, [r7, #20]
}
 8004904:	bf00      	nop
 8004906:	e7fe      	b.n	8004906 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d069      	beq.n	80049e2 <pvPortMalloc+0x146>
 800490e:	4b42      	ldr	r3, [pc, #264]	; (8004a18 <pvPortMalloc+0x17c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	429a      	cmp	r2, r3
 8004916:	d864      	bhi.n	80049e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004918:	4b40      	ldr	r3, [pc, #256]	; (8004a1c <pvPortMalloc+0x180>)
 800491a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800491c:	4b3f      	ldr	r3, [pc, #252]	; (8004a1c <pvPortMalloc+0x180>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004922:	e004      	b.n	800492e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	429a      	cmp	r2, r3
 8004936:	d903      	bls.n	8004940 <pvPortMalloc+0xa4>
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1f1      	bne.n	8004924 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004940:	4b33      	ldr	r3, [pc, #204]	; (8004a10 <pvPortMalloc+0x174>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004946:	429a      	cmp	r2, r3
 8004948:	d04b      	beq.n	80049e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2208      	movs	r2, #8
 8004950:	4413      	add	r3, r2
 8004952:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	1ad2      	subs	r2, r2, r3
 8004964:	2308      	movs	r3, #8
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	429a      	cmp	r2, r3
 800496a:	d91f      	bls.n	80049ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800496c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4413      	add	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <pvPortMalloc+0xf8>
	__asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	613b      	str	r3, [r7, #16]
}
 8004990:	bf00      	nop
 8004992:	e7fe      	b.n	8004992 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	1ad2      	subs	r2, r2, r3
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049a6:	69b8      	ldr	r0, [r7, #24]
 80049a8:	f000 f8f8 	bl	8004b9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049ac:	4b1a      	ldr	r3, [pc, #104]	; (8004a18 <pvPortMalloc+0x17c>)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	4a18      	ldr	r2, [pc, #96]	; (8004a18 <pvPortMalloc+0x17c>)
 80049b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049ba:	4b17      	ldr	r3, [pc, #92]	; (8004a18 <pvPortMalloc+0x17c>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	4b18      	ldr	r3, [pc, #96]	; (8004a20 <pvPortMalloc+0x184>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d203      	bcs.n	80049ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049c6:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <pvPortMalloc+0x17c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a15      	ldr	r2, [pc, #84]	; (8004a20 <pvPortMalloc+0x184>)
 80049cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <pvPortMalloc+0x178>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80049e2:	f7ff fbc9 	bl	8004178 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <pvPortMalloc+0x16a>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	60fb      	str	r3, [r7, #12]
}
 8004a02:	bf00      	nop
 8004a04:	e7fe      	b.n	8004a04 <pvPortMalloc+0x168>
	return pvReturn;
 8004a06:	69fb      	ldr	r3, [r7, #28]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3728      	adds	r7, #40	; 0x28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	20000f38 	.word	0x20000f38
 8004a14:	20000f44 	.word	0x20000f44
 8004a18:	20000f3c 	.word	0x20000f3c
 8004a1c:	20000f30 	.word	0x20000f30
 8004a20:	20000f40 	.word	0x20000f40

08004a24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d048      	beq.n	8004ac8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a36:	2308      	movs	r3, #8
 8004a38:	425b      	negs	r3, r3
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	4b21      	ldr	r3, [pc, #132]	; (8004ad0 <vPortFree+0xac>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10a      	bne.n	8004a68 <vPortFree+0x44>
	__asm volatile
 8004a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	60fb      	str	r3, [r7, #12]
}
 8004a64:	bf00      	nop
 8004a66:	e7fe      	b.n	8004a66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <vPortFree+0x62>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	60bb      	str	r3, [r7, #8]
}
 8004a82:	bf00      	nop
 8004a84:	e7fe      	b.n	8004a84 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <vPortFree+0xac>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d019      	beq.n	8004ac8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d115      	bne.n	8004ac8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <vPortFree+0xac>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	401a      	ands	r2, r3
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004aac:	f7ff fb56 	bl	800415c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <vPortFree+0xb0>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4413      	add	r3, r2
 8004aba:	4a06      	ldr	r2, [pc, #24]	; (8004ad4 <vPortFree+0xb0>)
 8004abc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004abe:	6938      	ldr	r0, [r7, #16]
 8004ac0:	f000 f86c 	bl	8004b9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ac4:	f7ff fb58 	bl	8004178 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ac8:	bf00      	nop
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20000f44 	.word	0x20000f44
 8004ad4:	20000f3c 	.word	0x20000f3c

08004ad8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ade:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004ae2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ae4:	4b27      	ldr	r3, [pc, #156]	; (8004b84 <prvHeapInit+0xac>)
 8004ae6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00c      	beq.n	8004b0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	3307      	adds	r3, #7
 8004af6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0307 	bic.w	r3, r3, #7
 8004afe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	4a1f      	ldr	r2, [pc, #124]	; (8004b84 <prvHeapInit+0xac>)
 8004b08:	4413      	add	r3, r2
 8004b0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b10:	4a1d      	ldr	r2, [pc, #116]	; (8004b88 <prvHeapInit+0xb0>)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b16:	4b1c      	ldr	r3, [pc, #112]	; (8004b88 <prvHeapInit+0xb0>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	4413      	add	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b24:	2208      	movs	r2, #8
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	1a9b      	subs	r3, r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0307 	bic.w	r3, r3, #7
 8004b32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4a15      	ldr	r2, [pc, #84]	; (8004b8c <prvHeapInit+0xb4>)
 8004b38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b3a:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <prvHeapInit+0xb4>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b42:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <prvHeapInit+0xb4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	1ad2      	subs	r2, r2, r3
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b58:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <prvHeapInit+0xb4>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	4a0a      	ldr	r2, [pc, #40]	; (8004b90 <prvHeapInit+0xb8>)
 8004b66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	4a09      	ldr	r2, [pc, #36]	; (8004b94 <prvHeapInit+0xbc>)
 8004b6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b70:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <prvHeapInit+0xc0>)
 8004b72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b76:	601a      	str	r2, [r3, #0]
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20000330 	.word	0x20000330
 8004b88:	20000f30 	.word	0x20000f30
 8004b8c:	20000f38 	.word	0x20000f38
 8004b90:	20000f40 	.word	0x20000f40
 8004b94:	20000f3c 	.word	0x20000f3c
 8004b98:	20000f44 	.word	0x20000f44

08004b9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ba4:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <prvInsertBlockIntoFreeList+0xa8>)
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e002      	b.n	8004bb0 <prvInsertBlockIntoFreeList+0x14>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d8f7      	bhi.n	8004baa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d108      	bne.n	8004bde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	441a      	add	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	441a      	add	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d118      	bne.n	8004c24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4b14      	ldr	r3, [pc, #80]	; (8004c48 <prvInsertBlockIntoFreeList+0xac>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d00d      	beq.n	8004c1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	441a      	add	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	e008      	b.n	8004c2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c1a:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <prvInsertBlockIntoFreeList+0xac>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	e003      	b.n	8004c2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d002      	beq.n	8004c3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c3a:	bf00      	nop
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr
 8004c44:	20000f30 	.word	0x20000f30
 8004c48:	20000f38 	.word	0x20000f38

08004c4c <SPI1SendByte>:
#include "stm32f1xx_hal.h"
#include "rc522.h"

extern SPI_HandleTypeDef hspi1;

uint8_t SPI1SendByte(uint8_t data) {
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	4603      	mov	r3, r0
 8004c54:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	
	writeCommand[0] = data;
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8004c5a:	f107 0208 	add.w	r2, r7, #8
 8004c5e:	f107 010c 	add.w	r1, r7, #12
 8004c62:	230a      	movs	r3, #10
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	2301      	movs	r3, #1
 8004c68:	4803      	ldr	r0, [pc, #12]	; (8004c78 <SPI1SendByte+0x2c>)
 8004c6a:	f7fd ffc7 	bl	8002bfc <HAL_SPI_TransmitReceive>
	return readValue[0];
 8004c6e:	7a3b      	ldrb	r3, [r7, #8]

}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20001078 	.word	0x20001078

08004c7c <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	4603      	mov	r3, r0
 8004c84:	460a      	mov	r2, r1
 8004c86:	71fb      	strb	r3, [r7, #7]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2110      	movs	r1, #16
 8004c90:	4809      	ldr	r0, [pc, #36]	; (8004cb8 <SPI1_WriteReg+0x3c>)
 8004c92:	f7fd f833 	bl	8001cfc <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8004c96:	79fb      	ldrb	r3, [r7, #7]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff ffd7 	bl	8004c4c <SPI1SendByte>
	SPI1SendByte(value);
 8004c9e:	79bb      	ldrb	r3, [r7, #6]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff ffd3 	bl	8004c4c <SPI1SendByte>
	cs_set();
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	2110      	movs	r1, #16
 8004caa:	4803      	ldr	r0, [pc, #12]	; (8004cb8 <SPI1_WriteReg+0x3c>)
 8004cac:	f7fd f826 	bl	8001cfc <HAL_GPIO_WritePin>
}
 8004cb0:	bf00      	nop
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40010800 	.word	0x40010800

08004cbc <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	2110      	movs	r1, #16
 8004cca:	480b      	ldr	r0, [pc, #44]	; (8004cf8 <SPI1_ReadReg+0x3c>)
 8004ccc:	f7fd f816 	bl	8001cfc <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8004cd0:	79fb      	ldrb	r3, [r7, #7]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff ffba 	bl	8004c4c <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8004cd8:	2000      	movs	r0, #0
 8004cda:	f7ff ffb7 	bl	8004c4c <SPI1SendByte>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	2110      	movs	r1, #16
 8004ce6:	4804      	ldr	r0, [pc, #16]	; (8004cf8 <SPI1_ReadReg+0x3c>)
 8004ce8:	f7fd f808 	bl	8001cfc <HAL_GPIO_WritePin>
	return val;
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40010800 	.word	0x40010800

08004cfc <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	4603      	mov	r3, r0
 8004d04:	460a      	mov	r2, r1
 8004d06:	71fb      	strb	r3, [r7, #7]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															
 8004d0c:	79fb      	ldrb	r3, [r7, #7]
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004d16:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8004d18:	79ba      	ldrb	r2, [r7, #6]
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff ffac 	bl	8004c7c <SPI1_WriteReg>
}
 8004d24:	bf00      	nop
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	4603      	mov	r3, r0
 8004d34:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	b25b      	sxtb	r3, r3
 8004d3c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004d40:	b25b      	sxtb	r3, r3
 8004d42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d46:	b25b      	sxtb	r3, r3
 8004d48:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8004d4a:	79fb      	ldrb	r3, [r7, #7]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff ffb5 	bl	8004cbc <SPI1_ReadReg>
 8004d52:	4603      	mov	r3, r0
 8004d54:	73fb      	strb	r3, [r7, #15]
	return val;	
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t* id) {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);							// Find cards, return card type
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	2026      	movs	r0, #38	; 0x26
 8004d6c:	f000 f849 	bl	8004e02 <MFRC522_Request>
 8004d70:	4603      	mov	r3, r0
 8004d72:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d104      	bne.n	8004d84 <MFRC522_Check+0x24>
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f935 	bl	8004fea <MFRC522_Anticoll>
 8004d80:	4603      	mov	r3, r0
 8004d82:	73fb      	strb	r3, [r7, #15]
	MFRC522_Halt();																					// Command card into hibernation
 8004d84:	f000 f9f8 	bl	8005178 <MFRC522_Halt>
	return status;
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b082      	sub	sp, #8
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	4603      	mov	r3, r0
 8004d9a:	460a      	mov	r2, r1
 8004d9c:	71fb      	strb	r3, [r7, #7]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8004da2:	79fb      	ldrb	r3, [r7, #7]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff ffc1 	bl	8004d2c <MFRC522_ReadRegister>
 8004daa:	4603      	mov	r3, r0
 8004dac:	461a      	mov	r2, r3
 8004dae:	79bb      	ldrb	r3, [r7, #6]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	79fb      	ldrb	r3, [r7, #7]
 8004db6:	4611      	mov	r1, r2
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff ff9f 	bl	8004cfc <MFRC522_WriteRegister>
}
 8004dbe:	bf00      	nop
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b082      	sub	sp, #8
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	4603      	mov	r3, r0
 8004dce:	460a      	mov	r2, r1
 8004dd0:	71fb      	strb	r3, [r7, #7]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff ffa7 	bl	8004d2c <MFRC522_ReadRegister>
 8004dde:	4603      	mov	r3, r0
 8004de0:	b25a      	sxtb	r2, r3
 8004de2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004de6:	43db      	mvns	r3, r3
 8004de8:	b25b      	sxtb	r3, r3
 8004dea:	4013      	ands	r3, r2
 8004dec:	b25b      	sxtb	r3, r3
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	79fb      	ldrb	r3, [r7, #7]
 8004df2:	4611      	mov	r1, r2
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff ff81 	bl	8004cfc <MFRC522_WriteRegister>
}
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b086      	sub	sp, #24
 8004e06:	af02      	add	r7, sp, #8
 8004e08:	4603      	mov	r3, r0
 8004e0a:	6039      	str	r1, [r7, #0]
 8004e0c:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 8004e0e:	2107      	movs	r1, #7
 8004e10:	200d      	movs	r0, #13
 8004e12:	f7ff ff73 	bl	8004cfc <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	79fa      	ldrb	r2, [r7, #7]
 8004e1a:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8004e1c:	f107 030c 	add.w	r3, r7, #12
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2201      	movs	r2, #1
 8004e26:	6839      	ldr	r1, [r7, #0]
 8004e28:	200c      	movs	r0, #12
 8004e2a:	f000 f80f 	bl	8004e4c <MFRC522_ToCard>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d102      	bne.n	8004e3e <MFRC522_Request+0x3c>
 8004e38:	89bb      	ldrh	r3, [r7, #12]
 8004e3a:	2b10      	cmp	r3, #16
 8004e3c:	d001      	beq.n	8004e42 <MFRC522_Request+0x40>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	73fb      	strb	r3, [r7, #15]
	return status;
 8004e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8004e4c:	b590      	push	{r4, r7, lr}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	607b      	str	r3, [r7, #4]
 8004e56:	4603      	mov	r3, r0
 8004e58:	73fb      	strb	r3, [r7, #15]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8004e5e:	2302      	movs	r3, #2
 8004e60:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8004e62:	2300      	movs	r3, #0
 8004e64:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8004e66:	2300      	movs	r3, #0
 8004e68:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8004e6a:	7bfb      	ldrb	r3, [r7, #15]
 8004e6c:	2b0c      	cmp	r3, #12
 8004e6e:	d006      	beq.n	8004e7e <MFRC522_ToCard+0x32>
 8004e70:	2b0e      	cmp	r3, #14
 8004e72:	d109      	bne.n	8004e88 <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8004e74:	2312      	movs	r3, #18
 8004e76:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8004e78:	2310      	movs	r3, #16
 8004e7a:	757b      	strb	r3, [r7, #21]
			break;
 8004e7c:	e005      	b.n	8004e8a <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8004e7e:	2377      	movs	r3, #119	; 0x77
 8004e80:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8004e82:	2330      	movs	r3, #48	; 0x30
 8004e84:	757b      	strb	r3, [r7, #21]
			break;
 8004e86:	e000      	b.n	8004e8a <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 8004e88:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8004e8a:	7dbb      	ldrb	r3, [r7, #22]
 8004e8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	4619      	mov	r1, r3
 8004e94:	2002      	movs	r0, #2
 8004e96:	f7ff ff31 	bl	8004cfc <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8004e9a:	2180      	movs	r1, #128	; 0x80
 8004e9c:	2004      	movs	r0, #4
 8004e9e:	f7ff ff92 	bl	8004dc6 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8004ea2:	2180      	movs	r1, #128	; 0x80
 8004ea4:	200a      	movs	r0, #10
 8004ea6:	f7ff ff74 	bl	8004d92 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8004eaa:	2100      	movs	r1, #0
 8004eac:	2001      	movs	r0, #1
 8004eae:	f7ff ff25 	bl	8004cfc <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	827b      	strh	r3, [r7, #18]
 8004eb6:	e00a      	b.n	8004ece <MFRC522_ToCard+0x82>
 8004eb8:	8a7b      	ldrh	r3, [r7, #18]
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	2009      	movs	r0, #9
 8004ec4:	f7ff ff1a 	bl	8004cfc <MFRC522_WriteRegister>
 8004ec8:	8a7b      	ldrh	r3, [r7, #18]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	827b      	strh	r3, [r7, #18]
 8004ece:	7bbb      	ldrb	r3, [r7, #14]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	8a7a      	ldrh	r2, [r7, #18]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d3ef      	bcc.n	8004eb8 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
 8004eda:	4619      	mov	r1, r3
 8004edc:	2001      	movs	r0, #1
 8004ede:	f7ff ff0d 	bl	8004cfc <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
 8004ee4:	2b0c      	cmp	r3, #12
 8004ee6:	d103      	bne.n	8004ef0 <MFRC522_ToCard+0xa4>
 8004ee8:	2180      	movs	r1, #128	; 0x80
 8004eea:	200d      	movs	r0, #13
 8004eec:	f7ff ff51 	bl	8004d92 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8004ef0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004ef4:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8004ef6:	2004      	movs	r0, #4
 8004ef8:	f7ff ff18 	bl	8004d2c <MFRC522_ReadRegister>
 8004efc:	4603      	mov	r3, r0
 8004efe:	753b      	strb	r3, [r7, #20]
		i--;
 8004f00:	8a7b      	ldrh	r3, [r7, #18]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8004f06:	8a7b      	ldrh	r3, [r7, #18]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00a      	beq.n	8004f22 <MFRC522_ToCard+0xd6>
 8004f0c:	7d3b      	ldrb	r3, [r7, #20]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d105      	bne.n	8004f22 <MFRC522_ToCard+0xd6>
 8004f16:	7d3a      	ldrb	r2, [r7, #20]
 8004f18:	7d7b      	ldrb	r3, [r7, #21]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0e9      	beq.n	8004ef6 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8004f22:	2180      	movs	r1, #128	; 0x80
 8004f24:	200d      	movs	r0, #13
 8004f26:	f7ff ff4e 	bl	8004dc6 <MFRC522_ClearBitMask>

	if (i != 0)  {
 8004f2a:	8a7b      	ldrh	r3, [r7, #18]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d057      	beq.n	8004fe0 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8004f30:	2006      	movs	r0, #6
 8004f32:	f7ff fefb 	bl	8004d2c <MFRC522_ReadRegister>
 8004f36:	4603      	mov	r3, r0
 8004f38:	f003 031b 	and.w	r3, r3, #27
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d14d      	bne.n	8004fdc <MFRC522_ToCard+0x190>
			status = MI_OK;
 8004f40:	2300      	movs	r3, #0
 8004f42:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8004f44:	7d3a      	ldrb	r2, [r7, #20]
 8004f46:	7dbb      	ldrb	r3, [r7, #22]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <MFRC522_ToCard+0x10c>
 8004f54:	2301      	movs	r3, #1
 8004f56:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b0c      	cmp	r3, #12
 8004f5c:	d140      	bne.n	8004fe0 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8004f5e:	200a      	movs	r0, #10
 8004f60:	f7ff fee4 	bl	8004d2c <MFRC522_ReadRegister>
 8004f64:	4603      	mov	r3, r0
 8004f66:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8004f68:	200c      	movs	r0, #12
 8004f6a:	f7ff fedf 	bl	8004d2c <MFRC522_ReadRegister>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8004f76:	7c7b      	ldrb	r3, [r7, #17]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00b      	beq.n	8004f94 <MFRC522_ToCard+0x148>
 8004f7c:	7d3b      	ldrb	r3, [r7, #20]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	00db      	lsls	r3, r3, #3
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	7c7b      	ldrb	r3, [r7, #17]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	801a      	strh	r2, [r3, #0]
 8004f92:	e005      	b.n	8004fa0 <MFRC522_ToCard+0x154>
 8004f94:	7d3b      	ldrb	r3, [r7, #20]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8004fa0:	7d3b      	ldrb	r3, [r7, #20]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <MFRC522_ToCard+0x15e>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 8004faa:	7d3b      	ldrb	r3, [r7, #20]
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d901      	bls.n	8004fb4 <MFRC522_ToCard+0x168>
 8004fb0:	2310      	movs	r3, #16
 8004fb2:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	827b      	strh	r3, [r7, #18]
 8004fb8:	e00a      	b.n	8004fd0 <MFRC522_ToCard+0x184>
 8004fba:	8a7b      	ldrh	r3, [r7, #18]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	18d4      	adds	r4, r2, r3
 8004fc0:	2009      	movs	r0, #9
 8004fc2:	f7ff feb3 	bl	8004d2c <MFRC522_ReadRegister>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	7023      	strb	r3, [r4, #0]
 8004fca:	8a7b      	ldrh	r3, [r7, #18]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	827b      	strh	r3, [r7, #18]
 8004fd0:	7d3b      	ldrb	r3, [r7, #20]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	8a7a      	ldrh	r2, [r7, #18]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d3ef      	bcc.n	8004fba <MFRC522_ToCard+0x16e>
 8004fda:	e001      	b.n	8004fe0 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 8004fdc:	2302      	movs	r3, #2
 8004fde:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd90      	pop	{r4, r7, pc}

08004fea <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b086      	sub	sp, #24
 8004fee:	af02      	add	r7, sp, #8
 8004ff0:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	200d      	movs	r0, #13
 8004ffa:	f7ff fe7f 	bl	8004cfc <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2293      	movs	r2, #147	; 0x93
 8005002:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3301      	adds	r3, #1
 8005008:	2220      	movs	r2, #32
 800500a:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800500c:	f107 030a 	add.w	r3, r7, #10
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2202      	movs	r2, #2
 8005016:	6879      	ldr	r1, [r7, #4]
 8005018:	200c      	movs	r0, #12
 800501a:	f7ff ff17 	bl	8004e4c <MFRC522_ToCard>
 800501e:	4603      	mov	r3, r0
 8005020:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8005022:	7bfb      	ldrb	r3, [r7, #15]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d118      	bne.n	800505a <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8005028:	2300      	movs	r3, #0
 800502a:	73bb      	strb	r3, [r7, #14]
 800502c:	e009      	b.n	8005042 <MFRC522_Anticoll+0x58>
 800502e:	7bbb      	ldrb	r3, [r7, #14]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	4413      	add	r3, r2
 8005034:	781a      	ldrb	r2, [r3, #0]
 8005036:	7b7b      	ldrb	r3, [r7, #13]
 8005038:	4053      	eors	r3, r2
 800503a:	737b      	strb	r3, [r7, #13]
 800503c:	7bbb      	ldrb	r3, [r7, #14]
 800503e:	3301      	adds	r3, #1
 8005040:	73bb      	strb	r3, [r7, #14]
 8005042:	7bbb      	ldrb	r3, [r7, #14]
 8005044:	2b03      	cmp	r3, #3
 8005046:	d9f2      	bls.n	800502e <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8005048:	7bbb      	ldrb	r3, [r7, #14]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	4413      	add	r3, r2
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	7b7a      	ldrb	r2, [r7, #13]
 8005052:	429a      	cmp	r2, r3
 8005054:	d001      	beq.n	800505a <MFRC522_Anticoll+0x70>
 8005056:	2302      	movs	r3, #2
 8005058:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 800505a:	7bfb      	ldrb	r3, [r7, #15]
} 
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8005064:	b590      	push	{r4, r7, lr}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	460b      	mov	r3, r1
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 8005072:	2104      	movs	r1, #4
 8005074:	2005      	movs	r0, #5
 8005076:	f7ff fea6 	bl	8004dc6 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 800507a:	2180      	movs	r1, #128	; 0x80
 800507c:	200a      	movs	r0, #10
 800507e:	f7ff fe88 	bl	8004d92 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8005082:	2300      	movs	r3, #0
 8005084:	75fb      	strb	r3, [r7, #23]
 8005086:	e00a      	b.n	800509e <MFRC522_CalculateCRC+0x3a>
 8005088:	7dfb      	ldrb	r3, [r7, #23]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4413      	add	r3, r2
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	4619      	mov	r1, r3
 8005092:	2009      	movs	r0, #9
 8005094:	f7ff fe32 	bl	8004cfc <MFRC522_WriteRegister>
 8005098:	7dfb      	ldrb	r3, [r7, #23]
 800509a:	3301      	adds	r3, #1
 800509c:	75fb      	strb	r3, [r7, #23]
 800509e:	7dfa      	ldrb	r2, [r7, #23]
 80050a0:	7afb      	ldrb	r3, [r7, #11]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d3f0      	bcc.n	8005088 <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 80050a6:	2103      	movs	r1, #3
 80050a8:	2001      	movs	r0, #1
 80050aa:	f7ff fe27 	bl	8004cfc <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 80050ae:	23ff      	movs	r3, #255	; 0xff
 80050b0:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 80050b2:	2005      	movs	r0, #5
 80050b4:	f7ff fe3a 	bl	8004d2c <MFRC522_ReadRegister>
 80050b8:	4603      	mov	r3, r0
 80050ba:	75bb      	strb	r3, [r7, #22]
		i--;
 80050bc:	7dfb      	ldrb	r3, [r7, #23]
 80050be:	3b01      	subs	r3, #1
 80050c0:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 80050c2:	7dfb      	ldrb	r3, [r7, #23]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d004      	beq.n	80050d2 <MFRC522_CalculateCRC+0x6e>
 80050c8:	7dbb      	ldrb	r3, [r7, #22]
 80050ca:	f003 0304 	and.w	r3, r3, #4
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0ef      	beq.n	80050b2 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 80050d2:	2022      	movs	r0, #34	; 0x22
 80050d4:	f7ff fe2a 	bl	8004d2c <MFRC522_ReadRegister>
 80050d8:	4603      	mov	r3, r0
 80050da:	461a      	mov	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	1c5c      	adds	r4, r3, #1
 80050e4:	2021      	movs	r0, #33	; 0x21
 80050e6:	f7ff fe21 	bl	8004d2c <MFRC522_ReadRegister>
 80050ea:	4603      	mov	r3, r0
 80050ec:	7023      	strb	r3, [r4, #0]
}
 80050ee:	bf00      	nop
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd90      	pop	{r4, r7, pc}

080050f6 <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 80050f6:	b580      	push	{r7, lr}
 80050f8:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 80050fa:	f000 f820 	bl	800513e <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 80050fe:	218d      	movs	r1, #141	; 0x8d
 8005100:	202a      	movs	r0, #42	; 0x2a
 8005102:	f7ff fdfb 	bl	8004cfc <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8005106:	213e      	movs	r1, #62	; 0x3e
 8005108:	202b      	movs	r0, #43	; 0x2b
 800510a:	f7ff fdf7 	bl	8004cfc <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 800510e:	211e      	movs	r1, #30
 8005110:	202d      	movs	r0, #45	; 0x2d
 8005112:	f7ff fdf3 	bl	8004cfc <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8005116:	2100      	movs	r1, #0
 8005118:	202c      	movs	r0, #44	; 0x2c
 800511a:	f7ff fdef 	bl	8004cfc <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 800511e:	2170      	movs	r1, #112	; 0x70
 8005120:	2026      	movs	r0, #38	; 0x26
 8005122:	f7ff fdeb 	bl	8004cfc <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8005126:	2140      	movs	r1, #64	; 0x40
 8005128:	2015      	movs	r0, #21
 800512a:	f7ff fde7 	bl	8004cfc <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 800512e:	213d      	movs	r1, #61	; 0x3d
 8005130:	2011      	movs	r0, #17
 8005132:	f7ff fde3 	bl	8004cfc <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 8005136:	f000 f80a 	bl	800514e <MFRC522_AntennaOn>
}
 800513a:	bf00      	nop
 800513c:	bd80      	pop	{r7, pc}

0800513e <MFRC522_Reset>:

void MFRC522_Reset(void) {
 800513e:	b580      	push	{r7, lr}
 8005140:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8005142:	210f      	movs	r1, #15
 8005144:	2001      	movs	r0, #1
 8005146:	f7ff fdd9 	bl	8004cfc <MFRC522_WriteRegister>
}
 800514a:	bf00      	nop
 800514c:	bd80      	pop	{r7, pc}

0800514e <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8005154:	2014      	movs	r0, #20
 8005156:	f7ff fde9 	bl	8004d2c <MFRC522_ReadRegister>
 800515a:	4603      	mov	r3, r0
 800515c:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	f003 0303 	and.w	r3, r3, #3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d103      	bne.n	8005170 <MFRC522_AntennaOn+0x22>
 8005168:	2103      	movs	r1, #3
 800516a:	2014      	movs	r0, #20
 800516c:	f7ff fe11 	bl	8004d92 <MFRC522_SetBitMask>
}
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <MFRC522_Halt>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void) {
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 800517e:	2350      	movs	r3, #80	; 0x50
 8005180:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8005182:	2300      	movs	r3, #0
 8005184:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8005186:	463b      	mov	r3, r7
 8005188:	1c9a      	adds	r2, r3, #2
 800518a:	463b      	mov	r3, r7
 800518c:	2102      	movs	r1, #2
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff ff68 	bl	8005064 <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8005194:	463a      	mov	r2, r7
 8005196:	4639      	mov	r1, r7
 8005198:	1dbb      	adds	r3, r7, #6
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	4613      	mov	r3, r2
 800519e:	2204      	movs	r2, #4
 80051a0:	200c      	movs	r0, #12
 80051a2:	f7ff fe53 	bl	8004e4c <MFRC522_ToCard>
}
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <ST7565_Select>:


uint8_t ST7565_buffer[SCREEN_WIDTH * SCREEN_HEIGHT / 8];
// extern enum {WHITE = 0, BLACK = 1} color_t;

void ST7565_Select(void) {
 80051ae:	b480      	push	{r7}
 80051b0:	af00      	add	r7, sp, #0
				CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
			#endif
			//-----------------------------------------------------
	#endif
	
}
 80051b2:	bf00      	nop
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bc80      	pop	{r7}
 80051b8:	4770      	bx	lr

080051ba <ST7565_Unselect>:
void ST7565_Unselect(void) {
 80051ba:	b480      	push	{r7}
 80051bc:	af00      	add	r7, sp, #0
					 CS_GPIO_Port->BSRR = CS_Pin;
			#endif
			//-----------------------------------------------------
	#endif
	
}
 80051be:	bf00      	nop
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bc80      	pop	{r7}
 80051c4:	4770      	bx	lr
	...

080051c8 <ST7565_Reset>:

void ST7565_Reset( void ){  
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
	
 HAL_GPIO_WritePin( RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET );
 80051cc:	2200      	movs	r2, #0
 80051ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80051d2:	4808      	ldr	r0, [pc, #32]	; (80051f4 <ST7565_Reset+0x2c>)
 80051d4:	f7fc fd92 	bl	8001cfc <HAL_GPIO_WritePin>
 HAL_Delay( 10 ); 
 80051d8:	200a      	movs	r0, #10
 80051da:	f7fc fb07 	bl	80017ec <HAL_Delay>
	
 HAL_GPIO_WritePin( RES_GPIO_Port, RES_Pin, GPIO_PIN_SET );
 80051de:	2201      	movs	r2, #1
 80051e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80051e4:	4803      	ldr	r0, [pc, #12]	; (80051f4 <ST7565_Reset+0x2c>)
 80051e6:	f7fc fd89 	bl	8001cfc <HAL_GPIO_WritePin>
 HAL_Delay( 10 );  
 80051ea:	200a      	movs	r0, #10
 80051ec:	f7fc fafe 	bl	80017ec <HAL_Delay>
}
 80051f0:	bf00      	nop
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40010800 	.word	0x40010800

080051f8 <ST7565_w_dat>:

void ST7565_w_dat( uint8_t Dat ){  
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	4603      	mov	r3, r0
 8005200:	71fb      	strb	r3, [r7, #7]
	
	//-- если захотим переделать под HAL ------------------	
	#ifdef ST7565_SPI_HAL
	
		 HAL_SPI_Transmit(&ST7565_SPI_HAL, &Dat, 1, HAL_MAX_DELAY);
 8005202:	1df9      	adds	r1, r7, #7
 8005204:	f04f 33ff 	mov.w	r3, #4294967295
 8005208:	2201      	movs	r2, #1
 800520a:	4807      	ldr	r0, [pc, #28]	; (8005228 <ST7565_w_dat+0x30>)
 800520c:	f7fd fbba 	bl	8002984 <HAL_SPI_Transmit>
		 while(HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY){};
 8005210:	bf00      	nop
 8005212:	4805      	ldr	r0, [pc, #20]	; (8005228 <ST7565_w_dat+0x30>)
 8005214:	f7fd fe94 	bl	8002f40 <HAL_SPI_GetState>
 8005218:	4603      	mov	r3, r0
 800521a:	2b01      	cmp	r3, #1
 800521c:	d1f9      	bne.n	8005212 <ST7565_w_dat+0x1a>
*/		//================================================================================
		
	#endif
	//-----------------------------------------------------------------------------------
	
}  
 800521e:	bf00      	nop
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20000f54 	.word	0x20000f54

0800522c <ST7565_w_cmd>:

void ST7565_w_cmd( uint8_t Command ){  
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	4603      	mov	r3, r0
 8005234:	71fb      	strb	r3, [r7, #7]
	
	//-- если захотим переделать под HAL ------------------	
	#ifdef ST7565_SPI_HAL
		
		// pin DC LOW
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8005236:	2200      	movs	r2, #0
 8005238:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800523c:	480d      	ldr	r0, [pc, #52]	; (8005274 <ST7565_w_cmd+0x48>)
 800523e:	f7fc fd5d 	bl	8001cfc <HAL_GPIO_WritePin>
		 
		 HAL_SPI_Transmit(&ST7565_SPI_HAL, &Command, 1, HAL_MAX_DELAY);
 8005242:	1df9      	adds	r1, r7, #7
 8005244:	f04f 33ff 	mov.w	r3, #4294967295
 8005248:	2201      	movs	r2, #1
 800524a:	480b      	ldr	r0, [pc, #44]	; (8005278 <ST7565_w_cmd+0x4c>)
 800524c:	f7fd fb9a 	bl	8002984 <HAL_SPI_Transmit>
		 while(HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY){};
 8005250:	bf00      	nop
 8005252:	4809      	ldr	r0, [pc, #36]	; (8005278 <ST7565_w_cmd+0x4c>)
 8005254:	f7fd fe74 	bl	8002f40 <HAL_SPI_GetState>
 8005258:	4603      	mov	r3, r0
 800525a:	2b01      	cmp	r3, #1
 800525c:	d1f9      	bne.n	8005252 <ST7565_w_cmd+0x26>
		 
		 // pin DC HIGH
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 800525e:	2201      	movs	r2, #1
 8005260:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005264:	4803      	ldr	r0, [pc, #12]	; (8005274 <ST7565_w_cmd+0x48>)
 8005266:	f7fc fd49 	bl	8001cfc <HAL_GPIO_WritePin>
		DC_GPIO_Port->BSRR = DC_Pin;
		
	#endif
	//-----------------------------------------------------------------------------------
	
} 
 800526a:	bf00      	nop
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	40010800 	.word	0x40010800
 8005278:	20000f54 	.word	0x20000f54

0800527c <ST7565_Display_fill>:

void ST7565_Display_fill( uint8_t fill ){  
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	4603      	mov	r3, r0
 8005284:	71fb      	strb	r3, [r7, #7]
	
	uint8_t page,column;  
	
	memset( ST7565_buffer, (uint8_t)fill, ( SCREEN_WIDTH * SCREEN_HEIGHT / 8 ) );	// отчистка памяти заполняем массив значением 0x00
 8005286:	79fb      	ldrb	r3, [r7, #7]
 8005288:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800528c:	4619      	mov	r1, r3
 800528e:	4815      	ldr	r0, [pc, #84]	; (80052e4 <ST7565_Display_fill+0x68>)
 8005290:	f000 fad4 	bl	800583c <memset>
	
	ST7565_Select();
 8005294:	f7ff ff8b 	bl	80051ae <ST7565_Select>
	
	for( page=0xB7; page>=0xB0; page-- ){
 8005298:	23b7      	movs	r3, #183	; 0xb7
 800529a:	73fb      	strb	r3, [r7, #15]
 800529c:	e019      	b.n	80052d2 <ST7565_Display_fill+0x56>
		
		ST7565_w_cmd(page);  //set page address   
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff ffc3 	bl	800522c <ST7565_w_cmd>
		ST7565_w_cmd(0x10);  //set Column address MSB   
 80052a6:	2010      	movs	r0, #16
 80052a8:	f7ff ffc0 	bl	800522c <ST7565_w_cmd>
		ST7565_w_cmd(0x00);  //set column address LSB   
 80052ac:	2000      	movs	r0, #0
 80052ae:	f7ff ffbd 	bl	800522c <ST7565_w_cmd>
		for( column=0; column<131; column++ ){  
 80052b2:	2300      	movs	r3, #0
 80052b4:	73bb      	strb	r3, [r7, #14]
 80052b6:	e006      	b.n	80052c6 <ST7565_Display_fill+0x4a>
			ST7565_w_dat(fill);  
 80052b8:	79fb      	ldrb	r3, [r7, #7]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff ff9c 	bl	80051f8 <ST7565_w_dat>
		for( column=0; column<131; column++ ){  
 80052c0:	7bbb      	ldrb	r3, [r7, #14]
 80052c2:	3301      	adds	r3, #1
 80052c4:	73bb      	strb	r3, [r7, #14]
 80052c6:	7bbb      	ldrb	r3, [r7, #14]
 80052c8:	2b82      	cmp	r3, #130	; 0x82
 80052ca:	d9f5      	bls.n	80052b8 <ST7565_Display_fill+0x3c>
	for( page=0xB7; page>=0xB0; page-- ){
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	3b01      	subs	r3, #1
 80052d0:	73fb      	strb	r3, [r7, #15]
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
 80052d4:	2baf      	cmp	r3, #175	; 0xaf
 80052d6:	d8e2      	bhi.n	800529e <ST7565_Display_fill+0x22>
        }  
    }
		
	ST7565_Unselect();
 80052d8:	f7ff ff6f 	bl	80051ba <ST7565_Unselect>
}
 80052dc:	bf00      	nop
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	20001164 	.word	0x20001164

080052e8 <ST7565_Init>:

void ST7565_Init( void ){  
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
	
	ST7565_Select();
 80052ec:	f7ff ff5f 	bl	80051ae <ST7565_Select>
	
	ST7565_Reset();
 80052f0:	f7ff ff6a 	bl	80051c8 <ST7565_Reset>

	// Установите рабочий цикл ( 1/7 или 1/9 ) в зависимости от физического ЖК-дисплея	
	ST7565_w_cmd( CMD_SET_BIAS_9 );    // CMD_SET_BIAS_7   1/7    CMD_SET_BIAS_9  1/9
 80052f4:	20a2      	movs	r0, #162	; 0xa2
 80052f6:	f7ff ff99 	bl	800522c <ST7565_w_cmd>
	
	HAL_Delay(1);
 80052fa:	2001      	movs	r0, #1
 80052fc:	f7fc fa76 	bl	80017ec <HAL_Delay>
	// Установите горизонтальную и вертикальную ориентацию в известное состояние
	#if defined (SCREEN_ORIENTATION_180)
		ST7565_w_cmd( CMD_SET_ADC_REVERSE );    	//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
		ST7565_w_cmd( CMD_SET_COM_NORMAL );    		//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
	#else
		ST7565_w_cmd( CMD_SET_ADC_NORMAL );    		//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
 8005300:	20a0      	movs	r0, #160	; 0xa0
 8005302:	f7ff ff93 	bl	800522c <ST7565_w_cmd>
		ST7565_w_cmd( CMD_SET_COM_REVERSE );    	//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
 8005306:	20c8      	movs	r0, #200	; 0xc8
 8005308:	f7ff ff90 	bl	800522c <ST7565_w_cmd>
	#endif		
	//---------------------------------------------------------------------------------------------	
	
	HAL_Delay(1);
 800530c:	2001      	movs	r0, #1
 800530e:	f7fc fa6d 	bl	80017ec <HAL_Delay>
	
	// делитель внутреннего резистора установлен на 7 (от 0..7)	
	ST7565_w_cmd( CMD_SET_RESISTOR_RATIO | 0x7 );    //Regulator Resistor Selection   
 8005312:	2027      	movs	r0, #39	; 0x27
 8005314:	f7ff ff8a 	bl	800522c <ST7565_w_cmd>
	
	HAL_Delay(1);
 8005318:	2001      	movs	r0, #1
 800531a:	f7fc fa67 	bl	80017ec <HAL_Delay>
	
	// управление питанием, все внутренние блоки включены	(от 0..7)
	ST7565_w_cmd( CMD_SET_POWER_CONTROL | 0x7 );
 800531e:	202f      	movs	r0, #47	; 0x2f
 8005320:	f7ff ff84 	bl	800522c <ST7565_w_cmd>
		
	HAL_Delay(1);
 8005324:	2001      	movs	r0, #1
 8005326:	f7fc fa61 	bl	80017ec <HAL_Delay>

	// войти в режим динамического контраста	
	ST7565_w_cmd( CMD_SET_VOLUME_FIRST );    //Electronic Volume   
 800532a:	2081      	movs	r0, #129	; 0x81
 800532c:	f7ff ff7e 	bl	800522c <ST7565_w_cmd>
	ST7565_w_cmd( 19 );	// устанавливает контраст от 0..63.
 8005330:	2013      	movs	r0, #19
 8005332:	f7ff ff7b 	bl	800522c <ST7565_w_cmd>
	
	HAL_Delay(1);
 8005336:	2001      	movs	r0, #1
 8005338:	f7fc fa58 	bl	80017ec <HAL_Delay>
	
	ST7565_w_cmd( CMD_SET_DISP_START_LINE );
 800533c:	2040      	movs	r0, #64	; 0x40
 800533e:	f7ff ff75 	bl	800522c <ST7565_w_cmd>
 
	HAL_Delay(1);
 8005342:	2001      	movs	r0, #1
 8005344:	f7fc fa52 	bl	80017ec <HAL_Delay>

	// CMD_DISPLAY_ON  CMD_DISPLAY_OFF
	ST7565_w_cmd( CMD_DISPLAY_ON );    		//Display on   
 8005348:	20af      	movs	r0, #175	; 0xaf
 800534a:	f7ff ff6f 	bl	800522c <ST7565_w_cmd>
 
	// Инвертирование экрана CMD_SET_DISP_NORMAL - OFF    CMD_SET_DISP_REVERSE - ON
	ST7565_w_cmd( CMD_SET_DISP_NORMAL );
 800534e:	20a6      	movs	r0, #166	; 0xa6
 8005350:	f7ff ff6c 	bl	800522c <ST7565_w_cmd>
	
	HAL_Delay(1);
 8005354:	2001      	movs	r0, #1
 8005356:	f7fc fa49 	bl	80017ec <HAL_Delay>
	
	ST7565_Display_fill( 0x00 );
 800535a:	2000      	movs	r0, #0
 800535c:	f7ff ff8e 	bl	800527c <ST7565_Display_fill>
	
	ST7565_Unselect();
 8005360:	f7ff ff2b 	bl	80051ba <ST7565_Unselect>
   
}
 8005364:	bf00      	nop
 8005366:	bd80      	pop	{r7, pc}

08005368 <ST7565_Draw_pixel>:
  
  
  ST7565_Unselect();
}

void ST7565_Draw_pixel(int16_t x, int16_t y, color_t color){
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	4603      	mov	r3, r0
 8005370:	80fb      	strh	r3, [r7, #6]
 8005372:	460b      	mov	r3, r1
 8005374:	80bb      	strh	r3, [r7, #4]
 8005376:	4613      	mov	r3, r2
 8005378:	70fb      	strb	r3, [r7, #3]
	
    if (x > SCREEN_WIDTH || x < 0 || y > SCREEN_HEIGHT || y < 0) return;
 800537a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800537e:	2b80      	cmp	r3, #128	; 0x80
 8005380:	f300 808b 	bgt.w	800549a <ST7565_Draw_pixel+0x132>
 8005384:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005388:	2b00      	cmp	r3, #0
 800538a:	f2c0 8086 	blt.w	800549a <ST7565_Draw_pixel+0x132>
 800538e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005392:	2b40      	cmp	r3, #64	; 0x40
 8005394:	f300 8081 	bgt.w	800549a <ST7565_Draw_pixel+0x132>
 8005398:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	db7c      	blt.n	800549a <ST7565_Draw_pixel+0x132>

    // Real screen coordinates are 0-63, not 1-64.
    x -= 1;
 80053a0:	88fb      	ldrh	r3, [r7, #6]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	80fb      	strh	r3, [r7, #6]
    y -= 1;
 80053a8:	88bb      	ldrh	r3, [r7, #4]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	80bb      	strh	r3, [r7, #4]

    uint16_t array_pos = x + ((y / 8) * SCREEN_WIDTH );
 80053b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	da00      	bge.n	80053ba <ST7565_Draw_pixel+0x52>
 80053b8:	3307      	adds	r3, #7
 80053ba:	10db      	asrs	r3, r3, #3
 80053bc:	b21b      	sxth	r3, r3
 80053be:	b29b      	uxth	r3, r3
 80053c0:	01db      	lsls	r3, r3, #7
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	88fb      	ldrh	r3, [r7, #6]
 80053c6:	4413      	add	r3, r2
 80053c8:	81fb      	strh	r3, [r7, #14]


    if ( color ) {
 80053ca:	78fb      	ldrb	r3, [r7, #3]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d018      	beq.n	8005402 <ST7565_Draw_pixel+0x9a>
        ST7565_buffer[array_pos] |= 1 << (y % 8);
 80053d0:	89fb      	ldrh	r3, [r7, #14]
 80053d2:	4a34      	ldr	r2, [pc, #208]	; (80054a4 <ST7565_Draw_pixel+0x13c>)
 80053d4:	5cd3      	ldrb	r3, [r2, r3]
 80053d6:	b25a      	sxtb	r2, r3
 80053d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80053dc:	4259      	negs	r1, r3
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	f001 0107 	and.w	r1, r1, #7
 80053e6:	bf58      	it	pl
 80053e8:	424b      	negpl	r3, r1
 80053ea:	b21b      	sxth	r3, r3
 80053ec:	4619      	mov	r1, r3
 80053ee:	2301      	movs	r3, #1
 80053f0:	408b      	lsls	r3, r1
 80053f2:	b25b      	sxtb	r3, r3
 80053f4:	4313      	orrs	r3, r2
 80053f6:	b25a      	sxtb	r2, r3
 80053f8:	89fb      	ldrh	r3, [r7, #14]
 80053fa:	b2d1      	uxtb	r1, r2
 80053fc:	4a29      	ldr	r2, [pc, #164]	; (80054a4 <ST7565_Draw_pixel+0x13c>)
 80053fe:	54d1      	strb	r1, [r2, r3]
 8005400:	e019      	b.n	8005436 <ST7565_Draw_pixel+0xce>
    } 
	else {
        ST7565_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 8005402:	89fb      	ldrh	r3, [r7, #14]
 8005404:	4a27      	ldr	r2, [pc, #156]	; (80054a4 <ST7565_Draw_pixel+0x13c>)
 8005406:	5cd3      	ldrb	r3, [r2, r3]
 8005408:	b25a      	sxtb	r2, r3
 800540a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800540e:	4259      	negs	r1, r3
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	f001 0107 	and.w	r1, r1, #7
 8005418:	bf58      	it	pl
 800541a:	424b      	negpl	r3, r1
 800541c:	b21b      	sxth	r3, r3
 800541e:	4619      	mov	r1, r3
 8005420:	2301      	movs	r3, #1
 8005422:	408b      	lsls	r3, r1
 8005424:	b25b      	sxtb	r3, r3
 8005426:	43db      	mvns	r3, r3
 8005428:	b25b      	sxtb	r3, r3
 800542a:	4013      	ands	r3, r2
 800542c:	b25a      	sxtb	r2, r3
 800542e:	89fb      	ldrh	r3, [r7, #14]
 8005430:	b2d1      	uxtb	r1, r2
 8005432:	4a1c      	ldr	r2, [pc, #112]	; (80054a4 <ST7565_Draw_pixel+0x13c>)
 8005434:	54d1      	strb	r1, [r2, r3]
    }
	
	ST7565_Select();
 8005436:	f7ff feba 	bl	80051ae <ST7565_Select>
	
	ST7565_SetX(x);	
 800543a:	88fb      	ldrh	r3, [r7, #6]
 800543c:	111b      	asrs	r3, r3, #4
 800543e:	b25b      	sxtb	r3, r3
 8005440:	f003 030f 	and.w	r3, r3, #15
 8005444:	b25b      	sxtb	r3, r3
 8005446:	f043 0310 	orr.w	r3, r3, #16
 800544a:	b25b      	sxtb	r3, r3
 800544c:	b2db      	uxtb	r3, r3
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff feec 	bl	800522c <ST7565_w_cmd>
 8005454:	88fb      	ldrh	r3, [r7, #6]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	f003 030f 	and.w	r3, r3, #15
 800545c:	b2db      	uxtb	r3, r3
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff fee4 	bl	800522c <ST7565_w_cmd>
	
	// page 0xB0 0xB1 0xB2 0xB3 0xB4 0xB5 0xB6 0xB7
	ST7565_SetY( (int16_t)y/8 );	// ST7565_SetY(y) 		ST7565_w_cmd( ( (y) & 0x07 ) | 0xB0 )
 8005464:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	da00      	bge.n	800546e <ST7565_Draw_pixel+0x106>
 800546c:	3307      	adds	r3, #7
 800546e:	10db      	asrs	r3, r3, #3
 8005470:	b21b      	sxth	r3, r3
 8005472:	b25b      	sxtb	r3, r3
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	b25b      	sxtb	r3, r3
 800547a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800547e:	b25b      	sxtb	r3, r3
 8005480:	b2db      	uxtb	r3, r3
 8005482:	4618      	mov	r0, r3
 8005484:	f7ff fed2 	bl	800522c <ST7565_w_cmd>
		
	ST7565_w_dat( ST7565_buffer[array_pos] ); 
 8005488:	89fb      	ldrh	r3, [r7, #14]
 800548a:	4a06      	ldr	r2, [pc, #24]	; (80054a4 <ST7565_Draw_pixel+0x13c>)
 800548c:	5cd3      	ldrb	r3, [r2, r3]
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff feb2 	bl	80051f8 <ST7565_w_dat>
	
	ST7565_Unselect();
 8005494:	f7ff fe91 	bl	80051ba <ST7565_Unselect>
 8005498:	e000      	b.n	800549c <ST7565_Draw_pixel+0x134>
    if (x > SCREEN_WIDTH || x < 0 || y > SCREEN_HEIGHT || y < 0) return;
 800549a:	bf00      	nop
}
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20001164 	.word	0x20001164

080054a8 <ST7565_DrawChar>:
            if(byte & 0x80){ ST7565_Draw_pixel(x+i, y, color); }
        }
    }	
}

void ST7565_DrawChar(int16_t x, int16_t y, unsigned char ch, FontDef_t* Font, uint8_t multiplier, uint8_t color) {
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	607b      	str	r3, [r7, #4]
 80054b0:	4603      	mov	r3, r0
 80054b2:	81fb      	strh	r3, [r7, #14]
 80054b4:	460b      	mov	r3, r1
 80054b6:	81bb      	strh	r3, [r7, #12]
 80054b8:	4613      	mov	r3, r2
 80054ba:	72fb      	strb	r3, [r7, #11]
	
	uint16_t i, j;
	
	uint16_t b;
	
	int16_t X = x, Y = y;
 80054bc:	89fb      	ldrh	r3, [r7, #14]
 80054be:	833b      	strh	r3, [r7, #24]
 80054c0:	89bb      	ldrh	r3, [r7, #12]
 80054c2:	82fb      	strh	r3, [r7, #22]
	
	int16_t xx, yy;
	
	if( multiplier < 1 ){
 80054c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d102      	bne.n	80054d2 <ST7565_DrawChar+0x2a>
		multiplier = 1;
 80054cc:	2301      	movs	r3, #1
 80054ce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	}
	
	/* Check available space in LCD */
	if ( SCREEN_WIDTH >= ( x + Font->FontWidth) || SCREEN_HEIGHT >= ( y + Font->FontHeight)){
 80054d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	7812      	ldrb	r2, [r2, #0]
 80054da:	4413      	add	r3, r2
 80054dc:	2b80      	cmp	r3, #128	; 0x80
 80054de:	dd07      	ble.n	80054f0 <ST7565_DrawChar+0x48>
 80054e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	7852      	ldrb	r2, [r2, #1]
 80054e8:	4413      	add	r3, r2
 80054ea:	2b40      	cmp	r3, #64	; 0x40
 80054ec:	f300 80dc 	bgt.w	80056a8 <ST7565_DrawChar+0x200>
	
		/* Go through font */
		for (i = 0; i < Font->FontHeight; i++) {
 80054f0:	2300      	movs	r3, #0
 80054f2:	83fb      	strh	r3, [r7, #30]
 80054f4:	e0d1      	b.n	800569a <ST7565_DrawChar+0x1f2>
			
			if( ch < 127 ){			
 80054f6:	7afb      	ldrb	r3, [r7, #11]
 80054f8:	2b7e      	cmp	r3, #126	; 0x7e
 80054fa:	d80e      	bhi.n	800551a <ST7565_DrawChar+0x72>
				b = Font->data[(ch - 32) * Font->FontHeight + i];
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	7afb      	ldrb	r3, [r7, #11]
 8005502:	3b20      	subs	r3, #32
 8005504:	6879      	ldr	r1, [r7, #4]
 8005506:	7849      	ldrb	r1, [r1, #1]
 8005508:	fb01 f103 	mul.w	r1, r1, r3
 800550c:	8bfb      	ldrh	r3, [r7, #30]
 800550e:	440b      	add	r3, r1
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	4413      	add	r3, r2
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	837b      	strh	r3, [r7, #26]
 8005518:	e038      	b.n	800558c <ST7565_DrawChar+0xe4>
			}
			
			else if( (uint8_t) ch > 191 ){
 800551a:	7afb      	ldrb	r3, [r7, #11]
 800551c:	2bbf      	cmp	r3, #191	; 0xbf
 800551e:	d90e      	bls.n	800553e <ST7565_DrawChar+0x96>
				// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
				// и если в шрифте который содержит сперва латиницу и спец символы и потом 
				// только кирилицу то нужно добавлять 95 если шрифт 
				// содержит только кирилицу то +96 не нужно
				b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	7afb      	ldrb	r3, [r7, #11]
 8005526:	3b60      	subs	r3, #96	; 0x60
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	7849      	ldrb	r1, [r1, #1]
 800552c:	fb01 f103 	mul.w	r1, r1, r3
 8005530:	8bfb      	ldrh	r3, [r7, #30]
 8005532:	440b      	add	r3, r1
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	4413      	add	r3, r2
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	837b      	strh	r3, [r7, #26]
 800553c:	e026      	b.n	800558c <ST7565_DrawChar+0xe4>
			}
			
			else if( (uint8_t) ch == 168 ){	// 168 символ по ASCII - Ё
 800553e:	7afb      	ldrb	r3, [r7, #11]
 8005540:	2ba8      	cmp	r3, #168	; 0xa8
 8005542:	d110      	bne.n	8005566 <ST7565_DrawChar+0xbe>
				// 160 эллемент ( символ Ё ) 
				b = Font->data[( 160 ) * Font->FontHeight + i];
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	785b      	ldrb	r3, [r3, #1]
 800554c:	4619      	mov	r1, r3
 800554e:	460b      	mov	r3, r1
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	440b      	add	r3, r1
 8005554:	015b      	lsls	r3, r3, #5
 8005556:	4619      	mov	r1, r3
 8005558:	8bfb      	ldrh	r3, [r7, #30]
 800555a:	440b      	add	r3, r1
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	4413      	add	r3, r2
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	837b      	strh	r3, [r7, #26]
 8005564:	e012      	b.n	800558c <ST7565_DrawChar+0xe4>
			}
			
			else if( (uint8_t) ch == 184 ){	// 184 символ по ASCII - ё
 8005566:	7afb      	ldrb	r3, [r7, #11]
 8005568:	2bb8      	cmp	r3, #184	; 0xb8
 800556a:	d10f      	bne.n	800558c <ST7565_DrawChar+0xe4>
				// 161 эллемент  ( символ ё ) 
				b = Font->data[( 161 ) * Font->FontHeight + i];
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6859      	ldr	r1, [r3, #4]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	785b      	ldrb	r3, [r3, #1]
 8005574:	461a      	mov	r2, r3
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	015b      	lsls	r3, r3, #5
 800557e:	441a      	add	r2, r3
 8005580:	8bfb      	ldrh	r3, [r7, #30]
 8005582:	4413      	add	r3, r2
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	440b      	add	r3, r1
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	837b      	strh	r3, [r7, #26]
			}
			//-------------------------------------------------------------------------------
			
			
			for (j = 0; j < Font->FontWidth; j++) {
 800558c:	2300      	movs	r3, #0
 800558e:	83bb      	strh	r3, [r7, #28]
 8005590:	e071      	b.n	8005676 <ST7565_DrawChar+0x1ce>
				
				if ((b << j) & 0x8000) {
 8005592:	8b7a      	ldrh	r2, [r7, #26]
 8005594:	8bbb      	ldrh	r3, [r7, #28]
 8005596:	fa02 f303 	lsl.w	r3, r2, r3
 800559a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d02d      	beq.n	80055fe <ST7565_DrawChar+0x156>
					
					for (yy = 0; yy < multiplier; yy++){
 80055a2:	2300      	movs	r3, #0
 80055a4:	827b      	strh	r3, [r7, #18]
 80055a6:	e023      	b.n	80055f0 <ST7565_DrawChar+0x148>
						for (xx = 0; xx < multiplier; xx++){
 80055a8:	2300      	movs	r3, #0
 80055aa:	82bb      	strh	r3, [r7, #20]
 80055ac:	e014      	b.n	80055d8 <ST7565_DrawChar+0x130>
								ST7565_Draw_pixel(X+xx, Y+yy, color);
 80055ae:	8b3a      	ldrh	r2, [r7, #24]
 80055b0:	8abb      	ldrh	r3, [r7, #20]
 80055b2:	4413      	add	r3, r2
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	b218      	sxth	r0, r3
 80055b8:	8afa      	ldrh	r2, [r7, #22]
 80055ba:	8a7b      	ldrh	r3, [r7, #18]
 80055bc:	4413      	add	r3, r2
 80055be:	b29b      	uxth	r3, r3
 80055c0:	b21b      	sxth	r3, r3
 80055c2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80055c6:	4619      	mov	r1, r3
 80055c8:	f7ff fece 	bl	8005368 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 80055cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3301      	adds	r3, #1
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	82bb      	strh	r3, [r7, #20]
 80055d8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80055dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055e0:	429a      	cmp	r2, r3
 80055e2:	dbe4      	blt.n	80055ae <ST7565_DrawChar+0x106>
					for (yy = 0; yy < multiplier; yy++){
 80055e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	3301      	adds	r3, #1
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	827b      	strh	r3, [r7, #18]
 80055f0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80055f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055f8:	429a      	cmp	r2, r3
 80055fa:	dbd5      	blt.n	80055a8 <ST7565_DrawChar+0x100>
 80055fc:	e031      	b.n	8005662 <ST7565_DrawChar+0x1ba>
				}
				// если фон очищать то оставляем если чтоб фон оставался старый то коментируем эту часть --------------------------------------------
				//-----------------------------------------------------------------------------------------------------------------------------------
				else{
					
					for (yy = 0; yy < multiplier; yy++){
 80055fe:	2300      	movs	r3, #0
 8005600:	827b      	strh	r3, [r7, #18]
 8005602:	e028      	b.n	8005656 <ST7565_DrawChar+0x1ae>
						for (xx = 0; xx < multiplier; xx++){
 8005604:	2300      	movs	r3, #0
 8005606:	82bb      	strh	r3, [r7, #20]
 8005608:	e019      	b.n	800563e <ST7565_DrawChar+0x196>
								ST7565_Draw_pixel(X+xx, Y+yy, !color);
 800560a:	8b3a      	ldrh	r2, [r7, #24]
 800560c:	8abb      	ldrh	r3, [r7, #20]
 800560e:	4413      	add	r3, r2
 8005610:	b29b      	uxth	r3, r3
 8005612:	b218      	sxth	r0, r3
 8005614:	8afa      	ldrh	r2, [r7, #22]
 8005616:	8a7b      	ldrh	r3, [r7, #18]
 8005618:	4413      	add	r3, r2
 800561a:	b29b      	uxth	r3, r3
 800561c:	b219      	sxth	r1, r3
 800561e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005622:	2b00      	cmp	r3, #0
 8005624:	bf0c      	ite	eq
 8005626:	2301      	moveq	r3, #1
 8005628:	2300      	movne	r3, #0
 800562a:	b2db      	uxtb	r3, r3
 800562c:	461a      	mov	r2, r3
 800562e:	f7ff fe9b 	bl	8005368 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 8005632:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005636:	b29b      	uxth	r3, r3
 8005638:	3301      	adds	r3, #1
 800563a:	b29b      	uxth	r3, r3
 800563c:	82bb      	strh	r3, [r7, #20]
 800563e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005642:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005646:	429a      	cmp	r2, r3
 8005648:	dbdf      	blt.n	800560a <ST7565_DrawChar+0x162>
					for (yy = 0; yy < multiplier; yy++){
 800564a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800564e:	b29b      	uxth	r3, r3
 8005650:	3301      	adds	r3, #1
 8005652:	b29b      	uxth	r3, r3
 8005654:	827b      	strh	r3, [r7, #18]
 8005656:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800565a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800565e:	429a      	cmp	r2, r3
 8005660:	dbd0      	blt.n	8005604 <ST7565_DrawChar+0x15c>
					}
				}
				//-----------------------------------------------------------------------------------------------------------------------------------
				//-----------------------------------------------------------------------------------------------------------------------------------
				
				X = X + multiplier;
 8005662:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005666:	b29a      	uxth	r2, r3
 8005668:	8b3b      	ldrh	r3, [r7, #24]
 800566a:	4413      	add	r3, r2
 800566c:	b29b      	uxth	r3, r3
 800566e:	833b      	strh	r3, [r7, #24]
			for (j = 0; j < Font->FontWidth; j++) {
 8005670:	8bbb      	ldrh	r3, [r7, #28]
 8005672:	3301      	adds	r3, #1
 8005674:	83bb      	strh	r3, [r7, #28]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	b29b      	uxth	r3, r3
 800567c:	8bba      	ldrh	r2, [r7, #28]
 800567e:	429a      	cmp	r2, r3
 8005680:	d387      	bcc.n	8005592 <ST7565_DrawChar+0xea>
			}
			
			X = x;
 8005682:	89fb      	ldrh	r3, [r7, #14]
 8005684:	833b      	strh	r3, [r7, #24]
			Y = Y + multiplier;
 8005686:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800568a:	b29a      	uxth	r2, r3
 800568c:	8afb      	ldrh	r3, [r7, #22]
 800568e:	4413      	add	r3, r2
 8005690:	b29b      	uxth	r3, r3
 8005692:	82fb      	strh	r3, [r7, #22]
		for (i = 0; i < Font->FontHeight; i++) {
 8005694:	8bfb      	ldrh	r3, [r7, #30]
 8005696:	3301      	adds	r3, #1
 8005698:	83fb      	strh	r3, [r7, #30]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	785b      	ldrb	r3, [r3, #1]
 800569e:	b29b      	uxth	r3, r3
 80056a0:	8bfa      	ldrh	r2, [r7, #30]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	f4ff af27 	bcc.w	80054f6 <ST7565_DrawChar+0x4e>
		}
		
	}
}
 80056a8:	bf00      	nop
 80056aa:	3720      	adds	r7, #32
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <ST7565_Print>:

void ST7565_Print(int16_t x, int16_t y, char* str, FontDef_t* Font, uint8_t multiplier, color_t color) {
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af02      	add	r7, sp, #8
 80056b6:	60ba      	str	r2, [r7, #8]
 80056b8:	607b      	str	r3, [r7, #4]
 80056ba:	4603      	mov	r3, r0
 80056bc:	81fb      	strh	r3, [r7, #14]
 80056be:	460b      	mov	r3, r1
 80056c0:	81bb      	strh	r3, [r7, #12]
	
	if( multiplier < 1 ){
 80056c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d102      	bne.n	80056d0 <ST7565_Print+0x20>
		multiplier = 1;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 3020 	strb.w	r3, [r7, #32]
	}
	
	unsigned char buff_char;
	
	uint16_t len = strlen(str);
 80056d0:	68b8      	ldr	r0, [r7, #8]
 80056d2:	f7fa fd3d 	bl	8000150 <strlen>
 80056d6:	4603      	mov	r3, r0
 80056d8:	82bb      	strh	r3, [r7, #20]
	
	while (len--) {
 80056da:	e06d      	b.n	80057b8 <ST7565_Print+0x108>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ){	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2bbf      	cmp	r3, #191	; 0xbf
 80056e2:	d94a      	bls.n	800577a <ST7565_Print+0xca>
			
			// проверяем какой именно байт первый 0xD0 либо 0xD1
			switch ((uint8_t)*str) {
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2bd0      	cmp	r3, #208	; 0xd0
 80056ea:	d002      	beq.n	80056f2 <ST7565_Print+0x42>
 80056ec:	2bd1      	cmp	r3, #209	; 0xd1
 80056ee:	d017      	beq.n	8005720 <ST7565_Print+0x70>
 80056f0:	e031      	b.n	8005756 <ST7565_Print+0xa6>
				case 0xD0: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	3301      	adds	r3, #1
 80056f6:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b81      	cmp	r3, #129	; 0x81
 80056fe:	d102      	bne.n	8005706 <ST7565_Print+0x56>
 8005700:	23a8      	movs	r3, #168	; 0xa8
 8005702:	75fb      	strb	r3, [r7, #23]
 8005704:	e027      	b.n	8005756 <ST7565_Print+0xa6>
					if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF){ buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2b8f      	cmp	r3, #143	; 0x8f
 800570c:	d920      	bls.n	8005750 <ST7565_Print+0xa0>
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2bbf      	cmp	r3, #191	; 0xbf
 8005714:	d81c      	bhi.n	8005750 <ST7565_Print+0xa0>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	3330      	adds	r3, #48	; 0x30
 800571c:	75fb      	strb	r3, [r7, #23]
					break;
 800571e:	e017      	b.n	8005750 <ST7565_Print+0xa0>
				}
				case 0xD1: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	3301      	adds	r3, #1
 8005724:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b91      	cmp	r3, #145	; 0x91
 800572c:	d102      	bne.n	8005734 <ST7565_Print+0x84>
 800572e:	23b8      	movs	r3, #184	; 0xb8
 8005730:	75fb      	strb	r3, [r7, #23]
 8005732:	e010      	b.n	8005756 <ST7565_Print+0xa6>
					if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F){ buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	b25b      	sxtb	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	da0a      	bge.n	8005754 <ST7565_Print+0xa4>
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b8f      	cmp	r3, #143	; 0x8f
 8005744:	d806      	bhi.n	8005754 <ST7565_Print+0xa4>
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	3370      	adds	r3, #112	; 0x70
 800574c:	75fb      	strb	r3, [r7, #23]
					break;
 800574e:	e001      	b.n	8005754 <ST7565_Print+0xa4>
					break;
 8005750:	bf00      	nop
 8005752:	e000      	b.n	8005756 <ST7565_Print+0xa6>
					break;
 8005754:	bf00      	nop
				}
			}
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8005756:	8abb      	ldrh	r3, [r7, #20]
 8005758:	3b01      	subs	r3, #1
 800575a:	82bb      	strh	r3, [r7, #20]
			
			ST7565_DrawChar( x, y, buff_char, Font, multiplier, color);
 800575c:	7dfa      	ldrb	r2, [r7, #23]
 800575e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8005762:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8005766:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800576a:	9301      	str	r3, [sp, #4]
 800576c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f7ff fe98 	bl	80054a8 <ST7565_DrawChar>
 8005778:	e00e      	b.n	8005798 <ST7565_Print+0xe8>
		}
		//---------------------------------------------------------------------
		else{			
			ST7565_DrawChar( x, y, *str, Font, multiplier, color);
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	781a      	ldrb	r2, [r3, #0]
 800577e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8005782:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8005786:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800578a:	9301      	str	r3, [sp, #4]
 800578c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f7ff fe88 	bl	80054a8 <ST7565_DrawChar>
		}
		
		x = x + (Font->FontWidth * multiplier);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	b29b      	uxth	r3, r3
 800579e:	f897 2020 	ldrb.w	r2, [r7, #32]
 80057a2:	b292      	uxth	r2, r2
 80057a4:	fb02 f303 	mul.w	r3, r2, r3
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	89fb      	ldrh	r3, [r7, #14]
 80057ac:	4413      	add	r3, r2
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	81fb      	strh	r3, [r7, #14]
		/* Increase string pointer */
		str++;
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	3301      	adds	r3, #1
 80057b6:	60bb      	str	r3, [r7, #8]
	while (len--) {
 80057b8:	8abb      	ldrh	r3, [r7, #20]
 80057ba:	1e5a      	subs	r2, r3, #1
 80057bc:	82ba      	strh	r2, [r7, #20]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d18c      	bne.n	80056dc <ST7565_Print+0x2c>
	}
}
 80057c2:	bf00      	nop
 80057c4:	bf00      	nop
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <__errno>:
 80057cc:	4b01      	ldr	r3, [pc, #4]	; (80057d4 <__errno+0x8>)
 80057ce:	6818      	ldr	r0, [r3, #0]
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	20000018 	.word	0x20000018

080057d8 <__libc_init_array>:
 80057d8:	b570      	push	{r4, r5, r6, lr}
 80057da:	2600      	movs	r6, #0
 80057dc:	4d0c      	ldr	r5, [pc, #48]	; (8005810 <__libc_init_array+0x38>)
 80057de:	4c0d      	ldr	r4, [pc, #52]	; (8005814 <__libc_init_array+0x3c>)
 80057e0:	1b64      	subs	r4, r4, r5
 80057e2:	10a4      	asrs	r4, r4, #2
 80057e4:	42a6      	cmp	r6, r4
 80057e6:	d109      	bne.n	80057fc <__libc_init_array+0x24>
 80057e8:	f004 fc2a 	bl	800a040 <_init>
 80057ec:	2600      	movs	r6, #0
 80057ee:	4d0a      	ldr	r5, [pc, #40]	; (8005818 <__libc_init_array+0x40>)
 80057f0:	4c0a      	ldr	r4, [pc, #40]	; (800581c <__libc_init_array+0x44>)
 80057f2:	1b64      	subs	r4, r4, r5
 80057f4:	10a4      	asrs	r4, r4, #2
 80057f6:	42a6      	cmp	r6, r4
 80057f8:	d105      	bne.n	8005806 <__libc_init_array+0x2e>
 80057fa:	bd70      	pop	{r4, r5, r6, pc}
 80057fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005800:	4798      	blx	r3
 8005802:	3601      	adds	r6, #1
 8005804:	e7ee      	b.n	80057e4 <__libc_init_array+0xc>
 8005806:	f855 3b04 	ldr.w	r3, [r5], #4
 800580a:	4798      	blx	r3
 800580c:	3601      	adds	r6, #1
 800580e:	e7f2      	b.n	80057f6 <__libc_init_array+0x1e>
 8005810:	0800acac 	.word	0x0800acac
 8005814:	0800acac 	.word	0x0800acac
 8005818:	0800acac 	.word	0x0800acac
 800581c:	0800acb0 	.word	0x0800acb0

08005820 <memcpy>:
 8005820:	440a      	add	r2, r1
 8005822:	4291      	cmp	r1, r2
 8005824:	f100 33ff 	add.w	r3, r0, #4294967295
 8005828:	d100      	bne.n	800582c <memcpy+0xc>
 800582a:	4770      	bx	lr
 800582c:	b510      	push	{r4, lr}
 800582e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005832:	4291      	cmp	r1, r2
 8005834:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005838:	d1f9      	bne.n	800582e <memcpy+0xe>
 800583a:	bd10      	pop	{r4, pc}

0800583c <memset>:
 800583c:	4603      	mov	r3, r0
 800583e:	4402      	add	r2, r0
 8005840:	4293      	cmp	r3, r2
 8005842:	d100      	bne.n	8005846 <memset+0xa>
 8005844:	4770      	bx	lr
 8005846:	f803 1b01 	strb.w	r1, [r3], #1
 800584a:	e7f9      	b.n	8005840 <memset+0x4>

0800584c <__cvt>:
 800584c:	2b00      	cmp	r3, #0
 800584e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005852:	461f      	mov	r7, r3
 8005854:	bfbb      	ittet	lt
 8005856:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800585a:	461f      	movlt	r7, r3
 800585c:	2300      	movge	r3, #0
 800585e:	232d      	movlt	r3, #45	; 0x2d
 8005860:	b088      	sub	sp, #32
 8005862:	4614      	mov	r4, r2
 8005864:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005866:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005868:	7013      	strb	r3, [r2, #0]
 800586a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800586c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005870:	f023 0820 	bic.w	r8, r3, #32
 8005874:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005878:	d005      	beq.n	8005886 <__cvt+0x3a>
 800587a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800587e:	d100      	bne.n	8005882 <__cvt+0x36>
 8005880:	3501      	adds	r5, #1
 8005882:	2302      	movs	r3, #2
 8005884:	e000      	b.n	8005888 <__cvt+0x3c>
 8005886:	2303      	movs	r3, #3
 8005888:	aa07      	add	r2, sp, #28
 800588a:	9204      	str	r2, [sp, #16]
 800588c:	aa06      	add	r2, sp, #24
 800588e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005892:	e9cd 3500 	strd	r3, r5, [sp]
 8005896:	4622      	mov	r2, r4
 8005898:	463b      	mov	r3, r7
 800589a:	f001 fda1 	bl	80073e0 <_dtoa_r>
 800589e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80058a2:	4606      	mov	r6, r0
 80058a4:	d102      	bne.n	80058ac <__cvt+0x60>
 80058a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058a8:	07db      	lsls	r3, r3, #31
 80058aa:	d522      	bpl.n	80058f2 <__cvt+0xa6>
 80058ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058b0:	eb06 0905 	add.w	r9, r6, r5
 80058b4:	d110      	bne.n	80058d8 <__cvt+0x8c>
 80058b6:	7833      	ldrb	r3, [r6, #0]
 80058b8:	2b30      	cmp	r3, #48	; 0x30
 80058ba:	d10a      	bne.n	80058d2 <__cvt+0x86>
 80058bc:	2200      	movs	r2, #0
 80058be:	2300      	movs	r3, #0
 80058c0:	4620      	mov	r0, r4
 80058c2:	4639      	mov	r1, r7
 80058c4:	f7fb f870 	bl	80009a8 <__aeabi_dcmpeq>
 80058c8:	b918      	cbnz	r0, 80058d2 <__cvt+0x86>
 80058ca:	f1c5 0501 	rsb	r5, r5, #1
 80058ce:	f8ca 5000 	str.w	r5, [sl]
 80058d2:	f8da 3000 	ldr.w	r3, [sl]
 80058d6:	4499      	add	r9, r3
 80058d8:	2200      	movs	r2, #0
 80058da:	2300      	movs	r3, #0
 80058dc:	4620      	mov	r0, r4
 80058de:	4639      	mov	r1, r7
 80058e0:	f7fb f862 	bl	80009a8 <__aeabi_dcmpeq>
 80058e4:	b108      	cbz	r0, 80058ea <__cvt+0x9e>
 80058e6:	f8cd 901c 	str.w	r9, [sp, #28]
 80058ea:	2230      	movs	r2, #48	; 0x30
 80058ec:	9b07      	ldr	r3, [sp, #28]
 80058ee:	454b      	cmp	r3, r9
 80058f0:	d307      	bcc.n	8005902 <__cvt+0xb6>
 80058f2:	4630      	mov	r0, r6
 80058f4:	9b07      	ldr	r3, [sp, #28]
 80058f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80058f8:	1b9b      	subs	r3, r3, r6
 80058fa:	6013      	str	r3, [r2, #0]
 80058fc:	b008      	add	sp, #32
 80058fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005902:	1c59      	adds	r1, r3, #1
 8005904:	9107      	str	r1, [sp, #28]
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	e7f0      	b.n	80058ec <__cvt+0xa0>

0800590a <__exponent>:
 800590a:	4603      	mov	r3, r0
 800590c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800590e:	2900      	cmp	r1, #0
 8005910:	f803 2b02 	strb.w	r2, [r3], #2
 8005914:	bfb6      	itet	lt
 8005916:	222d      	movlt	r2, #45	; 0x2d
 8005918:	222b      	movge	r2, #43	; 0x2b
 800591a:	4249      	neglt	r1, r1
 800591c:	2909      	cmp	r1, #9
 800591e:	7042      	strb	r2, [r0, #1]
 8005920:	dd2b      	ble.n	800597a <__exponent+0x70>
 8005922:	f10d 0407 	add.w	r4, sp, #7
 8005926:	46a4      	mov	ip, r4
 8005928:	270a      	movs	r7, #10
 800592a:	fb91 f6f7 	sdiv	r6, r1, r7
 800592e:	460a      	mov	r2, r1
 8005930:	46a6      	mov	lr, r4
 8005932:	fb07 1516 	mls	r5, r7, r6, r1
 8005936:	2a63      	cmp	r2, #99	; 0x63
 8005938:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800593c:	4631      	mov	r1, r6
 800593e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005942:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005946:	dcf0      	bgt.n	800592a <__exponent+0x20>
 8005948:	3130      	adds	r1, #48	; 0x30
 800594a:	f1ae 0502 	sub.w	r5, lr, #2
 800594e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005952:	4629      	mov	r1, r5
 8005954:	1c44      	adds	r4, r0, #1
 8005956:	4561      	cmp	r1, ip
 8005958:	d30a      	bcc.n	8005970 <__exponent+0x66>
 800595a:	f10d 0209 	add.w	r2, sp, #9
 800595e:	eba2 020e 	sub.w	r2, r2, lr
 8005962:	4565      	cmp	r5, ip
 8005964:	bf88      	it	hi
 8005966:	2200      	movhi	r2, #0
 8005968:	4413      	add	r3, r2
 800596a:	1a18      	subs	r0, r3, r0
 800596c:	b003      	add	sp, #12
 800596e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005970:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005974:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005978:	e7ed      	b.n	8005956 <__exponent+0x4c>
 800597a:	2330      	movs	r3, #48	; 0x30
 800597c:	3130      	adds	r1, #48	; 0x30
 800597e:	7083      	strb	r3, [r0, #2]
 8005980:	70c1      	strb	r1, [r0, #3]
 8005982:	1d03      	adds	r3, r0, #4
 8005984:	e7f1      	b.n	800596a <__exponent+0x60>
	...

08005988 <_printf_float>:
 8005988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598c:	b091      	sub	sp, #68	; 0x44
 800598e:	460c      	mov	r4, r1
 8005990:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005994:	4616      	mov	r6, r2
 8005996:	461f      	mov	r7, r3
 8005998:	4605      	mov	r5, r0
 800599a:	f002 fe75 	bl	8008688 <_localeconv_r>
 800599e:	6803      	ldr	r3, [r0, #0]
 80059a0:	4618      	mov	r0, r3
 80059a2:	9309      	str	r3, [sp, #36]	; 0x24
 80059a4:	f7fa fbd4 	bl	8000150 <strlen>
 80059a8:	2300      	movs	r3, #0
 80059aa:	930e      	str	r3, [sp, #56]	; 0x38
 80059ac:	f8d8 3000 	ldr.w	r3, [r8]
 80059b0:	900a      	str	r0, [sp, #40]	; 0x28
 80059b2:	3307      	adds	r3, #7
 80059b4:	f023 0307 	bic.w	r3, r3, #7
 80059b8:	f103 0208 	add.w	r2, r3, #8
 80059bc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80059c0:	f8d4 b000 	ldr.w	fp, [r4]
 80059c4:	f8c8 2000 	str.w	r2, [r8]
 80059c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059cc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80059d0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80059d4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80059d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80059da:	f04f 32ff 	mov.w	r2, #4294967295
 80059de:	4640      	mov	r0, r8
 80059e0:	4b9c      	ldr	r3, [pc, #624]	; (8005c54 <_printf_float+0x2cc>)
 80059e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059e4:	f7fb f812 	bl	8000a0c <__aeabi_dcmpun>
 80059e8:	bb70      	cbnz	r0, 8005a48 <_printf_float+0xc0>
 80059ea:	f04f 32ff 	mov.w	r2, #4294967295
 80059ee:	4640      	mov	r0, r8
 80059f0:	4b98      	ldr	r3, [pc, #608]	; (8005c54 <_printf_float+0x2cc>)
 80059f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059f4:	f7fa ffec 	bl	80009d0 <__aeabi_dcmple>
 80059f8:	bb30      	cbnz	r0, 8005a48 <_printf_float+0xc0>
 80059fa:	2200      	movs	r2, #0
 80059fc:	2300      	movs	r3, #0
 80059fe:	4640      	mov	r0, r8
 8005a00:	4651      	mov	r1, sl
 8005a02:	f7fa ffdb 	bl	80009bc <__aeabi_dcmplt>
 8005a06:	b110      	cbz	r0, 8005a0e <_printf_float+0x86>
 8005a08:	232d      	movs	r3, #45	; 0x2d
 8005a0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a0e:	4b92      	ldr	r3, [pc, #584]	; (8005c58 <_printf_float+0x2d0>)
 8005a10:	4892      	ldr	r0, [pc, #584]	; (8005c5c <_printf_float+0x2d4>)
 8005a12:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005a16:	bf94      	ite	ls
 8005a18:	4698      	movls	r8, r3
 8005a1a:	4680      	movhi	r8, r0
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	f04f 0a00 	mov.w	sl, #0
 8005a22:	6123      	str	r3, [r4, #16]
 8005a24:	f02b 0304 	bic.w	r3, fp, #4
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	4633      	mov	r3, r6
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	4628      	mov	r0, r5
 8005a30:	9700      	str	r7, [sp, #0]
 8005a32:	aa0f      	add	r2, sp, #60	; 0x3c
 8005a34:	f000 f9d4 	bl	8005de0 <_printf_common>
 8005a38:	3001      	adds	r0, #1
 8005a3a:	f040 8090 	bne.w	8005b5e <_printf_float+0x1d6>
 8005a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a42:	b011      	add	sp, #68	; 0x44
 8005a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a48:	4642      	mov	r2, r8
 8005a4a:	4653      	mov	r3, sl
 8005a4c:	4640      	mov	r0, r8
 8005a4e:	4651      	mov	r1, sl
 8005a50:	f7fa ffdc 	bl	8000a0c <__aeabi_dcmpun>
 8005a54:	b148      	cbz	r0, 8005a6a <_printf_float+0xe2>
 8005a56:	f1ba 0f00 	cmp.w	sl, #0
 8005a5a:	bfb8      	it	lt
 8005a5c:	232d      	movlt	r3, #45	; 0x2d
 8005a5e:	4880      	ldr	r0, [pc, #512]	; (8005c60 <_printf_float+0x2d8>)
 8005a60:	bfb8      	it	lt
 8005a62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a66:	4b7f      	ldr	r3, [pc, #508]	; (8005c64 <_printf_float+0x2dc>)
 8005a68:	e7d3      	b.n	8005a12 <_printf_float+0x8a>
 8005a6a:	6863      	ldr	r3, [r4, #4]
 8005a6c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	d142      	bne.n	8005afa <_printf_float+0x172>
 8005a74:	2306      	movs	r3, #6
 8005a76:	6063      	str	r3, [r4, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	9206      	str	r2, [sp, #24]
 8005a7c:	aa0e      	add	r2, sp, #56	; 0x38
 8005a7e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005a82:	aa0d      	add	r2, sp, #52	; 0x34
 8005a84:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005a88:	9203      	str	r2, [sp, #12]
 8005a8a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005a8e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005a92:	6023      	str	r3, [r4, #0]
 8005a94:	6863      	ldr	r3, [r4, #4]
 8005a96:	4642      	mov	r2, r8
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	4653      	mov	r3, sl
 8005a9e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005aa0:	f7ff fed4 	bl	800584c <__cvt>
 8005aa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005aa6:	4680      	mov	r8, r0
 8005aa8:	2947      	cmp	r1, #71	; 0x47
 8005aaa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005aac:	d108      	bne.n	8005ac0 <_printf_float+0x138>
 8005aae:	1cc8      	adds	r0, r1, #3
 8005ab0:	db02      	blt.n	8005ab8 <_printf_float+0x130>
 8005ab2:	6863      	ldr	r3, [r4, #4]
 8005ab4:	4299      	cmp	r1, r3
 8005ab6:	dd40      	ble.n	8005b3a <_printf_float+0x1b2>
 8005ab8:	f1a9 0902 	sub.w	r9, r9, #2
 8005abc:	fa5f f989 	uxtb.w	r9, r9
 8005ac0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ac4:	d81f      	bhi.n	8005b06 <_printf_float+0x17e>
 8005ac6:	464a      	mov	r2, r9
 8005ac8:	3901      	subs	r1, #1
 8005aca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ace:	910d      	str	r1, [sp, #52]	; 0x34
 8005ad0:	f7ff ff1b 	bl	800590a <__exponent>
 8005ad4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ad6:	4682      	mov	sl, r0
 8005ad8:	1813      	adds	r3, r2, r0
 8005ada:	2a01      	cmp	r2, #1
 8005adc:	6123      	str	r3, [r4, #16]
 8005ade:	dc02      	bgt.n	8005ae6 <_printf_float+0x15e>
 8005ae0:	6822      	ldr	r2, [r4, #0]
 8005ae2:	07d2      	lsls	r2, r2, #31
 8005ae4:	d501      	bpl.n	8005aea <_printf_float+0x162>
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	6123      	str	r3, [r4, #16]
 8005aea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d09b      	beq.n	8005a2a <_printf_float+0xa2>
 8005af2:	232d      	movs	r3, #45	; 0x2d
 8005af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005af8:	e797      	b.n	8005a2a <_printf_float+0xa2>
 8005afa:	2947      	cmp	r1, #71	; 0x47
 8005afc:	d1bc      	bne.n	8005a78 <_printf_float+0xf0>
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1ba      	bne.n	8005a78 <_printf_float+0xf0>
 8005b02:	2301      	movs	r3, #1
 8005b04:	e7b7      	b.n	8005a76 <_printf_float+0xee>
 8005b06:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005b0a:	d118      	bne.n	8005b3e <_printf_float+0x1b6>
 8005b0c:	2900      	cmp	r1, #0
 8005b0e:	6863      	ldr	r3, [r4, #4]
 8005b10:	dd0b      	ble.n	8005b2a <_printf_float+0x1a2>
 8005b12:	6121      	str	r1, [r4, #16]
 8005b14:	b913      	cbnz	r3, 8005b1c <_printf_float+0x194>
 8005b16:	6822      	ldr	r2, [r4, #0]
 8005b18:	07d0      	lsls	r0, r2, #31
 8005b1a:	d502      	bpl.n	8005b22 <_printf_float+0x19a>
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	440b      	add	r3, r1
 8005b20:	6123      	str	r3, [r4, #16]
 8005b22:	f04f 0a00 	mov.w	sl, #0
 8005b26:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b28:	e7df      	b.n	8005aea <_printf_float+0x162>
 8005b2a:	b913      	cbnz	r3, 8005b32 <_printf_float+0x1aa>
 8005b2c:	6822      	ldr	r2, [r4, #0]
 8005b2e:	07d2      	lsls	r2, r2, #31
 8005b30:	d501      	bpl.n	8005b36 <_printf_float+0x1ae>
 8005b32:	3302      	adds	r3, #2
 8005b34:	e7f4      	b.n	8005b20 <_printf_float+0x198>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e7f2      	b.n	8005b20 <_printf_float+0x198>
 8005b3a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005b3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b40:	4299      	cmp	r1, r3
 8005b42:	db05      	blt.n	8005b50 <_printf_float+0x1c8>
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	6121      	str	r1, [r4, #16]
 8005b48:	07d8      	lsls	r0, r3, #31
 8005b4a:	d5ea      	bpl.n	8005b22 <_printf_float+0x19a>
 8005b4c:	1c4b      	adds	r3, r1, #1
 8005b4e:	e7e7      	b.n	8005b20 <_printf_float+0x198>
 8005b50:	2900      	cmp	r1, #0
 8005b52:	bfcc      	ite	gt
 8005b54:	2201      	movgt	r2, #1
 8005b56:	f1c1 0202 	rsble	r2, r1, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	e7e0      	b.n	8005b20 <_printf_float+0x198>
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	055a      	lsls	r2, r3, #21
 8005b62:	d407      	bmi.n	8005b74 <_printf_float+0x1ec>
 8005b64:	6923      	ldr	r3, [r4, #16]
 8005b66:	4642      	mov	r2, r8
 8005b68:	4631      	mov	r1, r6
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	47b8      	blx	r7
 8005b6e:	3001      	adds	r0, #1
 8005b70:	d12b      	bne.n	8005bca <_printf_float+0x242>
 8005b72:	e764      	b.n	8005a3e <_printf_float+0xb6>
 8005b74:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005b78:	f240 80dd 	bls.w	8005d36 <_printf_float+0x3ae>
 8005b7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b80:	2200      	movs	r2, #0
 8005b82:	2300      	movs	r3, #0
 8005b84:	f7fa ff10 	bl	80009a8 <__aeabi_dcmpeq>
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	d033      	beq.n	8005bf4 <_printf_float+0x26c>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	4631      	mov	r1, r6
 8005b90:	4628      	mov	r0, r5
 8005b92:	4a35      	ldr	r2, [pc, #212]	; (8005c68 <_printf_float+0x2e0>)
 8005b94:	47b8      	blx	r7
 8005b96:	3001      	adds	r0, #1
 8005b98:	f43f af51 	beq.w	8005a3e <_printf_float+0xb6>
 8005b9c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	db02      	blt.n	8005baa <_printf_float+0x222>
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	07d8      	lsls	r0, r3, #31
 8005ba8:	d50f      	bpl.n	8005bca <_printf_float+0x242>
 8005baa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bae:	4631      	mov	r1, r6
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	47b8      	blx	r7
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	f43f af42 	beq.w	8005a3e <_printf_float+0xb6>
 8005bba:	f04f 0800 	mov.w	r8, #0
 8005bbe:	f104 091a 	add.w	r9, r4, #26
 8005bc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	4543      	cmp	r3, r8
 8005bc8:	dc09      	bgt.n	8005bde <_printf_float+0x256>
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	079b      	lsls	r3, r3, #30
 8005bce:	f100 8102 	bmi.w	8005dd6 <_printf_float+0x44e>
 8005bd2:	68e0      	ldr	r0, [r4, #12]
 8005bd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bd6:	4298      	cmp	r0, r3
 8005bd8:	bfb8      	it	lt
 8005bda:	4618      	movlt	r0, r3
 8005bdc:	e731      	b.n	8005a42 <_printf_float+0xba>
 8005bde:	2301      	movs	r3, #1
 8005be0:	464a      	mov	r2, r9
 8005be2:	4631      	mov	r1, r6
 8005be4:	4628      	mov	r0, r5
 8005be6:	47b8      	blx	r7
 8005be8:	3001      	adds	r0, #1
 8005bea:	f43f af28 	beq.w	8005a3e <_printf_float+0xb6>
 8005bee:	f108 0801 	add.w	r8, r8, #1
 8005bf2:	e7e6      	b.n	8005bc2 <_printf_float+0x23a>
 8005bf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	dc38      	bgt.n	8005c6c <_printf_float+0x2e4>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	4631      	mov	r1, r6
 8005bfe:	4628      	mov	r0, r5
 8005c00:	4a19      	ldr	r2, [pc, #100]	; (8005c68 <_printf_float+0x2e0>)
 8005c02:	47b8      	blx	r7
 8005c04:	3001      	adds	r0, #1
 8005c06:	f43f af1a 	beq.w	8005a3e <_printf_float+0xb6>
 8005c0a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	d102      	bne.n	8005c18 <_printf_float+0x290>
 8005c12:	6823      	ldr	r3, [r4, #0]
 8005c14:	07d9      	lsls	r1, r3, #31
 8005c16:	d5d8      	bpl.n	8005bca <_printf_float+0x242>
 8005c18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c1c:	4631      	mov	r1, r6
 8005c1e:	4628      	mov	r0, r5
 8005c20:	47b8      	blx	r7
 8005c22:	3001      	adds	r0, #1
 8005c24:	f43f af0b 	beq.w	8005a3e <_printf_float+0xb6>
 8005c28:	f04f 0900 	mov.w	r9, #0
 8005c2c:	f104 0a1a 	add.w	sl, r4, #26
 8005c30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c32:	425b      	negs	r3, r3
 8005c34:	454b      	cmp	r3, r9
 8005c36:	dc01      	bgt.n	8005c3c <_printf_float+0x2b4>
 8005c38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c3a:	e794      	b.n	8005b66 <_printf_float+0x1de>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	4652      	mov	r2, sl
 8005c40:	4631      	mov	r1, r6
 8005c42:	4628      	mov	r0, r5
 8005c44:	47b8      	blx	r7
 8005c46:	3001      	adds	r0, #1
 8005c48:	f43f aef9 	beq.w	8005a3e <_printf_float+0xb6>
 8005c4c:	f109 0901 	add.w	r9, r9, #1
 8005c50:	e7ee      	b.n	8005c30 <_printf_float+0x2a8>
 8005c52:	bf00      	nop
 8005c54:	7fefffff 	.word	0x7fefffff
 8005c58:	0800a7f8 	.word	0x0800a7f8
 8005c5c:	0800a7fc 	.word	0x0800a7fc
 8005c60:	0800a804 	.word	0x0800a804
 8005c64:	0800a800 	.word	0x0800a800
 8005c68:	0800a808 	.word	0x0800a808
 8005c6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c70:	429a      	cmp	r2, r3
 8005c72:	bfa8      	it	ge
 8005c74:	461a      	movge	r2, r3
 8005c76:	2a00      	cmp	r2, #0
 8005c78:	4691      	mov	r9, r2
 8005c7a:	dc37      	bgt.n	8005cec <_printf_float+0x364>
 8005c7c:	f04f 0b00 	mov.w	fp, #0
 8005c80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c84:	f104 021a 	add.w	r2, r4, #26
 8005c88:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005c8c:	ebaa 0309 	sub.w	r3, sl, r9
 8005c90:	455b      	cmp	r3, fp
 8005c92:	dc33      	bgt.n	8005cfc <_printf_float+0x374>
 8005c94:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	db3b      	blt.n	8005d14 <_printf_float+0x38c>
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	07da      	lsls	r2, r3, #31
 8005ca0:	d438      	bmi.n	8005d14 <_printf_float+0x38c>
 8005ca2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ca4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ca6:	eba2 030a 	sub.w	r3, r2, sl
 8005caa:	eba2 0901 	sub.w	r9, r2, r1
 8005cae:	4599      	cmp	r9, r3
 8005cb0:	bfa8      	it	ge
 8005cb2:	4699      	movge	r9, r3
 8005cb4:	f1b9 0f00 	cmp.w	r9, #0
 8005cb8:	dc34      	bgt.n	8005d24 <_printf_float+0x39c>
 8005cba:	f04f 0800 	mov.w	r8, #0
 8005cbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cc2:	f104 0a1a 	add.w	sl, r4, #26
 8005cc6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005cca:	1a9b      	subs	r3, r3, r2
 8005ccc:	eba3 0309 	sub.w	r3, r3, r9
 8005cd0:	4543      	cmp	r3, r8
 8005cd2:	f77f af7a 	ble.w	8005bca <_printf_float+0x242>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	4652      	mov	r2, sl
 8005cda:	4631      	mov	r1, r6
 8005cdc:	4628      	mov	r0, r5
 8005cde:	47b8      	blx	r7
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	f43f aeac 	beq.w	8005a3e <_printf_float+0xb6>
 8005ce6:	f108 0801 	add.w	r8, r8, #1
 8005cea:	e7ec      	b.n	8005cc6 <_printf_float+0x33e>
 8005cec:	4613      	mov	r3, r2
 8005cee:	4631      	mov	r1, r6
 8005cf0:	4642      	mov	r2, r8
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	47b8      	blx	r7
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	d1c0      	bne.n	8005c7c <_printf_float+0x2f4>
 8005cfa:	e6a0      	b.n	8005a3e <_printf_float+0xb6>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4628      	mov	r0, r5
 8005d02:	920b      	str	r2, [sp, #44]	; 0x2c
 8005d04:	47b8      	blx	r7
 8005d06:	3001      	adds	r0, #1
 8005d08:	f43f ae99 	beq.w	8005a3e <_printf_float+0xb6>
 8005d0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d0e:	f10b 0b01 	add.w	fp, fp, #1
 8005d12:	e7b9      	b.n	8005c88 <_printf_float+0x300>
 8005d14:	4631      	mov	r1, r6
 8005d16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	47b8      	blx	r7
 8005d1e:	3001      	adds	r0, #1
 8005d20:	d1bf      	bne.n	8005ca2 <_printf_float+0x31a>
 8005d22:	e68c      	b.n	8005a3e <_printf_float+0xb6>
 8005d24:	464b      	mov	r3, r9
 8005d26:	4631      	mov	r1, r6
 8005d28:	4628      	mov	r0, r5
 8005d2a:	eb08 020a 	add.w	r2, r8, sl
 8005d2e:	47b8      	blx	r7
 8005d30:	3001      	adds	r0, #1
 8005d32:	d1c2      	bne.n	8005cba <_printf_float+0x332>
 8005d34:	e683      	b.n	8005a3e <_printf_float+0xb6>
 8005d36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d38:	2a01      	cmp	r2, #1
 8005d3a:	dc01      	bgt.n	8005d40 <_printf_float+0x3b8>
 8005d3c:	07db      	lsls	r3, r3, #31
 8005d3e:	d537      	bpl.n	8005db0 <_printf_float+0x428>
 8005d40:	2301      	movs	r3, #1
 8005d42:	4642      	mov	r2, r8
 8005d44:	4631      	mov	r1, r6
 8005d46:	4628      	mov	r0, r5
 8005d48:	47b8      	blx	r7
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	f43f ae77 	beq.w	8005a3e <_printf_float+0xb6>
 8005d50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d54:	4631      	mov	r1, r6
 8005d56:	4628      	mov	r0, r5
 8005d58:	47b8      	blx	r7
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	f43f ae6f 	beq.w	8005a3e <_printf_float+0xb6>
 8005d60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d64:	2200      	movs	r2, #0
 8005d66:	2300      	movs	r3, #0
 8005d68:	f7fa fe1e 	bl	80009a8 <__aeabi_dcmpeq>
 8005d6c:	b9d8      	cbnz	r0, 8005da6 <_printf_float+0x41e>
 8005d6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d70:	f108 0201 	add.w	r2, r8, #1
 8005d74:	3b01      	subs	r3, #1
 8005d76:	4631      	mov	r1, r6
 8005d78:	4628      	mov	r0, r5
 8005d7a:	47b8      	blx	r7
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	d10e      	bne.n	8005d9e <_printf_float+0x416>
 8005d80:	e65d      	b.n	8005a3e <_printf_float+0xb6>
 8005d82:	2301      	movs	r3, #1
 8005d84:	464a      	mov	r2, r9
 8005d86:	4631      	mov	r1, r6
 8005d88:	4628      	mov	r0, r5
 8005d8a:	47b8      	blx	r7
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	f43f ae56 	beq.w	8005a3e <_printf_float+0xb6>
 8005d92:	f108 0801 	add.w	r8, r8, #1
 8005d96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	4543      	cmp	r3, r8
 8005d9c:	dcf1      	bgt.n	8005d82 <_printf_float+0x3fa>
 8005d9e:	4653      	mov	r3, sl
 8005da0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005da4:	e6e0      	b.n	8005b68 <_printf_float+0x1e0>
 8005da6:	f04f 0800 	mov.w	r8, #0
 8005daa:	f104 091a 	add.w	r9, r4, #26
 8005dae:	e7f2      	b.n	8005d96 <_printf_float+0x40e>
 8005db0:	2301      	movs	r3, #1
 8005db2:	4642      	mov	r2, r8
 8005db4:	e7df      	b.n	8005d76 <_printf_float+0x3ee>
 8005db6:	2301      	movs	r3, #1
 8005db8:	464a      	mov	r2, r9
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	47b8      	blx	r7
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	f43f ae3c 	beq.w	8005a3e <_printf_float+0xb6>
 8005dc6:	f108 0801 	add.w	r8, r8, #1
 8005dca:	68e3      	ldr	r3, [r4, #12]
 8005dcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005dce:	1a5b      	subs	r3, r3, r1
 8005dd0:	4543      	cmp	r3, r8
 8005dd2:	dcf0      	bgt.n	8005db6 <_printf_float+0x42e>
 8005dd4:	e6fd      	b.n	8005bd2 <_printf_float+0x24a>
 8005dd6:	f04f 0800 	mov.w	r8, #0
 8005dda:	f104 0919 	add.w	r9, r4, #25
 8005dde:	e7f4      	b.n	8005dca <_printf_float+0x442>

08005de0 <_printf_common>:
 8005de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005de4:	4616      	mov	r6, r2
 8005de6:	4699      	mov	r9, r3
 8005de8:	688a      	ldr	r2, [r1, #8]
 8005dea:	690b      	ldr	r3, [r1, #16]
 8005dec:	4607      	mov	r7, r0
 8005dee:	4293      	cmp	r3, r2
 8005df0:	bfb8      	it	lt
 8005df2:	4613      	movlt	r3, r2
 8005df4:	6033      	str	r3, [r6, #0]
 8005df6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dfa:	460c      	mov	r4, r1
 8005dfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e00:	b10a      	cbz	r2, 8005e06 <_printf_common+0x26>
 8005e02:	3301      	adds	r3, #1
 8005e04:	6033      	str	r3, [r6, #0]
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	0699      	lsls	r1, r3, #26
 8005e0a:	bf42      	ittt	mi
 8005e0c:	6833      	ldrmi	r3, [r6, #0]
 8005e0e:	3302      	addmi	r3, #2
 8005e10:	6033      	strmi	r3, [r6, #0]
 8005e12:	6825      	ldr	r5, [r4, #0]
 8005e14:	f015 0506 	ands.w	r5, r5, #6
 8005e18:	d106      	bne.n	8005e28 <_printf_common+0x48>
 8005e1a:	f104 0a19 	add.w	sl, r4, #25
 8005e1e:	68e3      	ldr	r3, [r4, #12]
 8005e20:	6832      	ldr	r2, [r6, #0]
 8005e22:	1a9b      	subs	r3, r3, r2
 8005e24:	42ab      	cmp	r3, r5
 8005e26:	dc28      	bgt.n	8005e7a <_printf_common+0x9a>
 8005e28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e2c:	1e13      	subs	r3, r2, #0
 8005e2e:	6822      	ldr	r2, [r4, #0]
 8005e30:	bf18      	it	ne
 8005e32:	2301      	movne	r3, #1
 8005e34:	0692      	lsls	r2, r2, #26
 8005e36:	d42d      	bmi.n	8005e94 <_printf_common+0xb4>
 8005e38:	4649      	mov	r1, r9
 8005e3a:	4638      	mov	r0, r7
 8005e3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e40:	47c0      	blx	r8
 8005e42:	3001      	adds	r0, #1
 8005e44:	d020      	beq.n	8005e88 <_printf_common+0xa8>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	68e5      	ldr	r5, [r4, #12]
 8005e4a:	f003 0306 	and.w	r3, r3, #6
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	bf18      	it	ne
 8005e52:	2500      	movne	r5, #0
 8005e54:	6832      	ldr	r2, [r6, #0]
 8005e56:	f04f 0600 	mov.w	r6, #0
 8005e5a:	68a3      	ldr	r3, [r4, #8]
 8005e5c:	bf08      	it	eq
 8005e5e:	1aad      	subeq	r5, r5, r2
 8005e60:	6922      	ldr	r2, [r4, #16]
 8005e62:	bf08      	it	eq
 8005e64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	bfc4      	itt	gt
 8005e6c:	1a9b      	subgt	r3, r3, r2
 8005e6e:	18ed      	addgt	r5, r5, r3
 8005e70:	341a      	adds	r4, #26
 8005e72:	42b5      	cmp	r5, r6
 8005e74:	d11a      	bne.n	8005eac <_printf_common+0xcc>
 8005e76:	2000      	movs	r0, #0
 8005e78:	e008      	b.n	8005e8c <_printf_common+0xac>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	4652      	mov	r2, sl
 8005e7e:	4649      	mov	r1, r9
 8005e80:	4638      	mov	r0, r7
 8005e82:	47c0      	blx	r8
 8005e84:	3001      	adds	r0, #1
 8005e86:	d103      	bne.n	8005e90 <_printf_common+0xb0>
 8005e88:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e90:	3501      	adds	r5, #1
 8005e92:	e7c4      	b.n	8005e1e <_printf_common+0x3e>
 8005e94:	2030      	movs	r0, #48	; 0x30
 8005e96:	18e1      	adds	r1, r4, r3
 8005e98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ea2:	4422      	add	r2, r4
 8005ea4:	3302      	adds	r3, #2
 8005ea6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005eaa:	e7c5      	b.n	8005e38 <_printf_common+0x58>
 8005eac:	2301      	movs	r3, #1
 8005eae:	4622      	mov	r2, r4
 8005eb0:	4649      	mov	r1, r9
 8005eb2:	4638      	mov	r0, r7
 8005eb4:	47c0      	blx	r8
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	d0e6      	beq.n	8005e88 <_printf_common+0xa8>
 8005eba:	3601      	adds	r6, #1
 8005ebc:	e7d9      	b.n	8005e72 <_printf_common+0x92>
	...

08005ec0 <_printf_i>:
 8005ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec4:	460c      	mov	r4, r1
 8005ec6:	7e27      	ldrb	r7, [r4, #24]
 8005ec8:	4691      	mov	r9, r2
 8005eca:	2f78      	cmp	r7, #120	; 0x78
 8005ecc:	4680      	mov	r8, r0
 8005ece:	469a      	mov	sl, r3
 8005ed0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ed2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ed6:	d807      	bhi.n	8005ee8 <_printf_i+0x28>
 8005ed8:	2f62      	cmp	r7, #98	; 0x62
 8005eda:	d80a      	bhi.n	8005ef2 <_printf_i+0x32>
 8005edc:	2f00      	cmp	r7, #0
 8005ede:	f000 80d9 	beq.w	8006094 <_printf_i+0x1d4>
 8005ee2:	2f58      	cmp	r7, #88	; 0x58
 8005ee4:	f000 80a4 	beq.w	8006030 <_printf_i+0x170>
 8005ee8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005eec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ef0:	e03a      	b.n	8005f68 <_printf_i+0xa8>
 8005ef2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ef6:	2b15      	cmp	r3, #21
 8005ef8:	d8f6      	bhi.n	8005ee8 <_printf_i+0x28>
 8005efa:	a001      	add	r0, pc, #4	; (adr r0, 8005f00 <_printf_i+0x40>)
 8005efc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f00:	08005f59 	.word	0x08005f59
 8005f04:	08005f6d 	.word	0x08005f6d
 8005f08:	08005ee9 	.word	0x08005ee9
 8005f0c:	08005ee9 	.word	0x08005ee9
 8005f10:	08005ee9 	.word	0x08005ee9
 8005f14:	08005ee9 	.word	0x08005ee9
 8005f18:	08005f6d 	.word	0x08005f6d
 8005f1c:	08005ee9 	.word	0x08005ee9
 8005f20:	08005ee9 	.word	0x08005ee9
 8005f24:	08005ee9 	.word	0x08005ee9
 8005f28:	08005ee9 	.word	0x08005ee9
 8005f2c:	0800607b 	.word	0x0800607b
 8005f30:	08005f9d 	.word	0x08005f9d
 8005f34:	0800605d 	.word	0x0800605d
 8005f38:	08005ee9 	.word	0x08005ee9
 8005f3c:	08005ee9 	.word	0x08005ee9
 8005f40:	0800609d 	.word	0x0800609d
 8005f44:	08005ee9 	.word	0x08005ee9
 8005f48:	08005f9d 	.word	0x08005f9d
 8005f4c:	08005ee9 	.word	0x08005ee9
 8005f50:	08005ee9 	.word	0x08005ee9
 8005f54:	08006065 	.word	0x08006065
 8005f58:	680b      	ldr	r3, [r1, #0]
 8005f5a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f5e:	1d1a      	adds	r2, r3, #4
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	600a      	str	r2, [r1, #0]
 8005f64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e0a4      	b.n	80060b6 <_printf_i+0x1f6>
 8005f6c:	6825      	ldr	r5, [r4, #0]
 8005f6e:	6808      	ldr	r0, [r1, #0]
 8005f70:	062e      	lsls	r6, r5, #24
 8005f72:	f100 0304 	add.w	r3, r0, #4
 8005f76:	d50a      	bpl.n	8005f8e <_printf_i+0xce>
 8005f78:	6805      	ldr	r5, [r0, #0]
 8005f7a:	600b      	str	r3, [r1, #0]
 8005f7c:	2d00      	cmp	r5, #0
 8005f7e:	da03      	bge.n	8005f88 <_printf_i+0xc8>
 8005f80:	232d      	movs	r3, #45	; 0x2d
 8005f82:	426d      	negs	r5, r5
 8005f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f88:	230a      	movs	r3, #10
 8005f8a:	485e      	ldr	r0, [pc, #376]	; (8006104 <_printf_i+0x244>)
 8005f8c:	e019      	b.n	8005fc2 <_printf_i+0x102>
 8005f8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f92:	6805      	ldr	r5, [r0, #0]
 8005f94:	600b      	str	r3, [r1, #0]
 8005f96:	bf18      	it	ne
 8005f98:	b22d      	sxthne	r5, r5
 8005f9a:	e7ef      	b.n	8005f7c <_printf_i+0xbc>
 8005f9c:	680b      	ldr	r3, [r1, #0]
 8005f9e:	6825      	ldr	r5, [r4, #0]
 8005fa0:	1d18      	adds	r0, r3, #4
 8005fa2:	6008      	str	r0, [r1, #0]
 8005fa4:	0628      	lsls	r0, r5, #24
 8005fa6:	d501      	bpl.n	8005fac <_printf_i+0xec>
 8005fa8:	681d      	ldr	r5, [r3, #0]
 8005faa:	e002      	b.n	8005fb2 <_printf_i+0xf2>
 8005fac:	0669      	lsls	r1, r5, #25
 8005fae:	d5fb      	bpl.n	8005fa8 <_printf_i+0xe8>
 8005fb0:	881d      	ldrh	r5, [r3, #0]
 8005fb2:	2f6f      	cmp	r7, #111	; 0x6f
 8005fb4:	bf0c      	ite	eq
 8005fb6:	2308      	moveq	r3, #8
 8005fb8:	230a      	movne	r3, #10
 8005fba:	4852      	ldr	r0, [pc, #328]	; (8006104 <_printf_i+0x244>)
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fc2:	6866      	ldr	r6, [r4, #4]
 8005fc4:	2e00      	cmp	r6, #0
 8005fc6:	bfa8      	it	ge
 8005fc8:	6821      	ldrge	r1, [r4, #0]
 8005fca:	60a6      	str	r6, [r4, #8]
 8005fcc:	bfa4      	itt	ge
 8005fce:	f021 0104 	bicge.w	r1, r1, #4
 8005fd2:	6021      	strge	r1, [r4, #0]
 8005fd4:	b90d      	cbnz	r5, 8005fda <_printf_i+0x11a>
 8005fd6:	2e00      	cmp	r6, #0
 8005fd8:	d04d      	beq.n	8006076 <_printf_i+0x1b6>
 8005fda:	4616      	mov	r6, r2
 8005fdc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fe0:	fb03 5711 	mls	r7, r3, r1, r5
 8005fe4:	5dc7      	ldrb	r7, [r0, r7]
 8005fe6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fea:	462f      	mov	r7, r5
 8005fec:	42bb      	cmp	r3, r7
 8005fee:	460d      	mov	r5, r1
 8005ff0:	d9f4      	bls.n	8005fdc <_printf_i+0x11c>
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	d10b      	bne.n	800600e <_printf_i+0x14e>
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	07df      	lsls	r7, r3, #31
 8005ffa:	d508      	bpl.n	800600e <_printf_i+0x14e>
 8005ffc:	6923      	ldr	r3, [r4, #16]
 8005ffe:	6861      	ldr	r1, [r4, #4]
 8006000:	4299      	cmp	r1, r3
 8006002:	bfde      	ittt	le
 8006004:	2330      	movle	r3, #48	; 0x30
 8006006:	f806 3c01 	strble.w	r3, [r6, #-1]
 800600a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800600e:	1b92      	subs	r2, r2, r6
 8006010:	6122      	str	r2, [r4, #16]
 8006012:	464b      	mov	r3, r9
 8006014:	4621      	mov	r1, r4
 8006016:	4640      	mov	r0, r8
 8006018:	f8cd a000 	str.w	sl, [sp]
 800601c:	aa03      	add	r2, sp, #12
 800601e:	f7ff fedf 	bl	8005de0 <_printf_common>
 8006022:	3001      	adds	r0, #1
 8006024:	d14c      	bne.n	80060c0 <_printf_i+0x200>
 8006026:	f04f 30ff 	mov.w	r0, #4294967295
 800602a:	b004      	add	sp, #16
 800602c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006030:	4834      	ldr	r0, [pc, #208]	; (8006104 <_printf_i+0x244>)
 8006032:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006036:	680e      	ldr	r6, [r1, #0]
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	f856 5b04 	ldr.w	r5, [r6], #4
 800603e:	061f      	lsls	r7, r3, #24
 8006040:	600e      	str	r6, [r1, #0]
 8006042:	d514      	bpl.n	800606e <_printf_i+0x1ae>
 8006044:	07d9      	lsls	r1, r3, #31
 8006046:	bf44      	itt	mi
 8006048:	f043 0320 	orrmi.w	r3, r3, #32
 800604c:	6023      	strmi	r3, [r4, #0]
 800604e:	b91d      	cbnz	r5, 8006058 <_printf_i+0x198>
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	f023 0320 	bic.w	r3, r3, #32
 8006056:	6023      	str	r3, [r4, #0]
 8006058:	2310      	movs	r3, #16
 800605a:	e7af      	b.n	8005fbc <_printf_i+0xfc>
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	f043 0320 	orr.w	r3, r3, #32
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	2378      	movs	r3, #120	; 0x78
 8006066:	4828      	ldr	r0, [pc, #160]	; (8006108 <_printf_i+0x248>)
 8006068:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800606c:	e7e3      	b.n	8006036 <_printf_i+0x176>
 800606e:	065e      	lsls	r6, r3, #25
 8006070:	bf48      	it	mi
 8006072:	b2ad      	uxthmi	r5, r5
 8006074:	e7e6      	b.n	8006044 <_printf_i+0x184>
 8006076:	4616      	mov	r6, r2
 8006078:	e7bb      	b.n	8005ff2 <_printf_i+0x132>
 800607a:	680b      	ldr	r3, [r1, #0]
 800607c:	6826      	ldr	r6, [r4, #0]
 800607e:	1d1d      	adds	r5, r3, #4
 8006080:	6960      	ldr	r0, [r4, #20]
 8006082:	600d      	str	r5, [r1, #0]
 8006084:	0635      	lsls	r5, r6, #24
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	d501      	bpl.n	800608e <_printf_i+0x1ce>
 800608a:	6018      	str	r0, [r3, #0]
 800608c:	e002      	b.n	8006094 <_printf_i+0x1d4>
 800608e:	0671      	lsls	r1, r6, #25
 8006090:	d5fb      	bpl.n	800608a <_printf_i+0x1ca>
 8006092:	8018      	strh	r0, [r3, #0]
 8006094:	2300      	movs	r3, #0
 8006096:	4616      	mov	r6, r2
 8006098:	6123      	str	r3, [r4, #16]
 800609a:	e7ba      	b.n	8006012 <_printf_i+0x152>
 800609c:	680b      	ldr	r3, [r1, #0]
 800609e:	1d1a      	adds	r2, r3, #4
 80060a0:	600a      	str	r2, [r1, #0]
 80060a2:	681e      	ldr	r6, [r3, #0]
 80060a4:	2100      	movs	r1, #0
 80060a6:	4630      	mov	r0, r6
 80060a8:	6862      	ldr	r2, [r4, #4]
 80060aa:	f002 fb0b 	bl	80086c4 <memchr>
 80060ae:	b108      	cbz	r0, 80060b4 <_printf_i+0x1f4>
 80060b0:	1b80      	subs	r0, r0, r6
 80060b2:	6060      	str	r0, [r4, #4]
 80060b4:	6863      	ldr	r3, [r4, #4]
 80060b6:	6123      	str	r3, [r4, #16]
 80060b8:	2300      	movs	r3, #0
 80060ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060be:	e7a8      	b.n	8006012 <_printf_i+0x152>
 80060c0:	4632      	mov	r2, r6
 80060c2:	4649      	mov	r1, r9
 80060c4:	4640      	mov	r0, r8
 80060c6:	6923      	ldr	r3, [r4, #16]
 80060c8:	47d0      	blx	sl
 80060ca:	3001      	adds	r0, #1
 80060cc:	d0ab      	beq.n	8006026 <_printf_i+0x166>
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	079b      	lsls	r3, r3, #30
 80060d2:	d413      	bmi.n	80060fc <_printf_i+0x23c>
 80060d4:	68e0      	ldr	r0, [r4, #12]
 80060d6:	9b03      	ldr	r3, [sp, #12]
 80060d8:	4298      	cmp	r0, r3
 80060da:	bfb8      	it	lt
 80060dc:	4618      	movlt	r0, r3
 80060de:	e7a4      	b.n	800602a <_printf_i+0x16a>
 80060e0:	2301      	movs	r3, #1
 80060e2:	4632      	mov	r2, r6
 80060e4:	4649      	mov	r1, r9
 80060e6:	4640      	mov	r0, r8
 80060e8:	47d0      	blx	sl
 80060ea:	3001      	adds	r0, #1
 80060ec:	d09b      	beq.n	8006026 <_printf_i+0x166>
 80060ee:	3501      	adds	r5, #1
 80060f0:	68e3      	ldr	r3, [r4, #12]
 80060f2:	9903      	ldr	r1, [sp, #12]
 80060f4:	1a5b      	subs	r3, r3, r1
 80060f6:	42ab      	cmp	r3, r5
 80060f8:	dcf2      	bgt.n	80060e0 <_printf_i+0x220>
 80060fa:	e7eb      	b.n	80060d4 <_printf_i+0x214>
 80060fc:	2500      	movs	r5, #0
 80060fe:	f104 0619 	add.w	r6, r4, #25
 8006102:	e7f5      	b.n	80060f0 <_printf_i+0x230>
 8006104:	0800a80a 	.word	0x0800a80a
 8006108:	0800a81b 	.word	0x0800a81b

0800610c <_scanf_float>:
 800610c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006110:	b087      	sub	sp, #28
 8006112:	9303      	str	r3, [sp, #12]
 8006114:	688b      	ldr	r3, [r1, #8]
 8006116:	4617      	mov	r7, r2
 8006118:	1e5a      	subs	r2, r3, #1
 800611a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800611e:	bf85      	ittet	hi
 8006120:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006124:	195b      	addhi	r3, r3, r5
 8006126:	2300      	movls	r3, #0
 8006128:	9302      	strhi	r3, [sp, #8]
 800612a:	bf88      	it	hi
 800612c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006130:	468b      	mov	fp, r1
 8006132:	f04f 0500 	mov.w	r5, #0
 8006136:	bf8c      	ite	hi
 8006138:	608b      	strhi	r3, [r1, #8]
 800613a:	9302      	strls	r3, [sp, #8]
 800613c:	680b      	ldr	r3, [r1, #0]
 800613e:	4680      	mov	r8, r0
 8006140:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006144:	f84b 3b1c 	str.w	r3, [fp], #28
 8006148:	460c      	mov	r4, r1
 800614a:	465e      	mov	r6, fp
 800614c:	46aa      	mov	sl, r5
 800614e:	46a9      	mov	r9, r5
 8006150:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006154:	9501      	str	r5, [sp, #4]
 8006156:	68a2      	ldr	r2, [r4, #8]
 8006158:	b152      	cbz	r2, 8006170 <_scanf_float+0x64>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b4e      	cmp	r3, #78	; 0x4e
 8006160:	d864      	bhi.n	800622c <_scanf_float+0x120>
 8006162:	2b40      	cmp	r3, #64	; 0x40
 8006164:	d83c      	bhi.n	80061e0 <_scanf_float+0xd4>
 8006166:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800616a:	b2c8      	uxtb	r0, r1
 800616c:	280e      	cmp	r0, #14
 800616e:	d93a      	bls.n	80061e6 <_scanf_float+0xda>
 8006170:	f1b9 0f00 	cmp.w	r9, #0
 8006174:	d003      	beq.n	800617e <_scanf_float+0x72>
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800617c:	6023      	str	r3, [r4, #0]
 800617e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006182:	f1ba 0f01 	cmp.w	sl, #1
 8006186:	f200 8113 	bhi.w	80063b0 <_scanf_float+0x2a4>
 800618a:	455e      	cmp	r6, fp
 800618c:	f200 8105 	bhi.w	800639a <_scanf_float+0x28e>
 8006190:	2501      	movs	r5, #1
 8006192:	4628      	mov	r0, r5
 8006194:	b007      	add	sp, #28
 8006196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800619a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800619e:	2a0d      	cmp	r2, #13
 80061a0:	d8e6      	bhi.n	8006170 <_scanf_float+0x64>
 80061a2:	a101      	add	r1, pc, #4	; (adr r1, 80061a8 <_scanf_float+0x9c>)
 80061a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80061a8:	080062e7 	.word	0x080062e7
 80061ac:	08006171 	.word	0x08006171
 80061b0:	08006171 	.word	0x08006171
 80061b4:	08006171 	.word	0x08006171
 80061b8:	08006347 	.word	0x08006347
 80061bc:	0800631f 	.word	0x0800631f
 80061c0:	08006171 	.word	0x08006171
 80061c4:	08006171 	.word	0x08006171
 80061c8:	080062f5 	.word	0x080062f5
 80061cc:	08006171 	.word	0x08006171
 80061d0:	08006171 	.word	0x08006171
 80061d4:	08006171 	.word	0x08006171
 80061d8:	08006171 	.word	0x08006171
 80061dc:	080062ad 	.word	0x080062ad
 80061e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80061e4:	e7db      	b.n	800619e <_scanf_float+0x92>
 80061e6:	290e      	cmp	r1, #14
 80061e8:	d8c2      	bhi.n	8006170 <_scanf_float+0x64>
 80061ea:	a001      	add	r0, pc, #4	; (adr r0, 80061f0 <_scanf_float+0xe4>)
 80061ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80061f0:	0800629f 	.word	0x0800629f
 80061f4:	08006171 	.word	0x08006171
 80061f8:	0800629f 	.word	0x0800629f
 80061fc:	08006333 	.word	0x08006333
 8006200:	08006171 	.word	0x08006171
 8006204:	0800624d 	.word	0x0800624d
 8006208:	08006289 	.word	0x08006289
 800620c:	08006289 	.word	0x08006289
 8006210:	08006289 	.word	0x08006289
 8006214:	08006289 	.word	0x08006289
 8006218:	08006289 	.word	0x08006289
 800621c:	08006289 	.word	0x08006289
 8006220:	08006289 	.word	0x08006289
 8006224:	08006289 	.word	0x08006289
 8006228:	08006289 	.word	0x08006289
 800622c:	2b6e      	cmp	r3, #110	; 0x6e
 800622e:	d809      	bhi.n	8006244 <_scanf_float+0x138>
 8006230:	2b60      	cmp	r3, #96	; 0x60
 8006232:	d8b2      	bhi.n	800619a <_scanf_float+0x8e>
 8006234:	2b54      	cmp	r3, #84	; 0x54
 8006236:	d077      	beq.n	8006328 <_scanf_float+0x21c>
 8006238:	2b59      	cmp	r3, #89	; 0x59
 800623a:	d199      	bne.n	8006170 <_scanf_float+0x64>
 800623c:	2d07      	cmp	r5, #7
 800623e:	d197      	bne.n	8006170 <_scanf_float+0x64>
 8006240:	2508      	movs	r5, #8
 8006242:	e029      	b.n	8006298 <_scanf_float+0x18c>
 8006244:	2b74      	cmp	r3, #116	; 0x74
 8006246:	d06f      	beq.n	8006328 <_scanf_float+0x21c>
 8006248:	2b79      	cmp	r3, #121	; 0x79
 800624a:	e7f6      	b.n	800623a <_scanf_float+0x12e>
 800624c:	6821      	ldr	r1, [r4, #0]
 800624e:	05c8      	lsls	r0, r1, #23
 8006250:	d51a      	bpl.n	8006288 <_scanf_float+0x17c>
 8006252:	9b02      	ldr	r3, [sp, #8]
 8006254:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006258:	6021      	str	r1, [r4, #0]
 800625a:	f109 0901 	add.w	r9, r9, #1
 800625e:	b11b      	cbz	r3, 8006268 <_scanf_float+0x15c>
 8006260:	3b01      	subs	r3, #1
 8006262:	3201      	adds	r2, #1
 8006264:	9302      	str	r3, [sp, #8]
 8006266:	60a2      	str	r2, [r4, #8]
 8006268:	68a3      	ldr	r3, [r4, #8]
 800626a:	3b01      	subs	r3, #1
 800626c:	60a3      	str	r3, [r4, #8]
 800626e:	6923      	ldr	r3, [r4, #16]
 8006270:	3301      	adds	r3, #1
 8006272:	6123      	str	r3, [r4, #16]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	3b01      	subs	r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	607b      	str	r3, [r7, #4]
 800627c:	f340 8084 	ble.w	8006388 <_scanf_float+0x27c>
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	3301      	adds	r3, #1
 8006284:	603b      	str	r3, [r7, #0]
 8006286:	e766      	b.n	8006156 <_scanf_float+0x4a>
 8006288:	eb1a 0f05 	cmn.w	sl, r5
 800628c:	f47f af70 	bne.w	8006170 <_scanf_float+0x64>
 8006290:	6822      	ldr	r2, [r4, #0]
 8006292:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006296:	6022      	str	r2, [r4, #0]
 8006298:	f806 3b01 	strb.w	r3, [r6], #1
 800629c:	e7e4      	b.n	8006268 <_scanf_float+0x15c>
 800629e:	6822      	ldr	r2, [r4, #0]
 80062a0:	0610      	lsls	r0, r2, #24
 80062a2:	f57f af65 	bpl.w	8006170 <_scanf_float+0x64>
 80062a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062aa:	e7f4      	b.n	8006296 <_scanf_float+0x18a>
 80062ac:	f1ba 0f00 	cmp.w	sl, #0
 80062b0:	d10e      	bne.n	80062d0 <_scanf_float+0x1c4>
 80062b2:	f1b9 0f00 	cmp.w	r9, #0
 80062b6:	d10e      	bne.n	80062d6 <_scanf_float+0x1ca>
 80062b8:	6822      	ldr	r2, [r4, #0]
 80062ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80062be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80062c2:	d108      	bne.n	80062d6 <_scanf_float+0x1ca>
 80062c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80062c8:	f04f 0a01 	mov.w	sl, #1
 80062cc:	6022      	str	r2, [r4, #0]
 80062ce:	e7e3      	b.n	8006298 <_scanf_float+0x18c>
 80062d0:	f1ba 0f02 	cmp.w	sl, #2
 80062d4:	d055      	beq.n	8006382 <_scanf_float+0x276>
 80062d6:	2d01      	cmp	r5, #1
 80062d8:	d002      	beq.n	80062e0 <_scanf_float+0x1d4>
 80062da:	2d04      	cmp	r5, #4
 80062dc:	f47f af48 	bne.w	8006170 <_scanf_float+0x64>
 80062e0:	3501      	adds	r5, #1
 80062e2:	b2ed      	uxtb	r5, r5
 80062e4:	e7d8      	b.n	8006298 <_scanf_float+0x18c>
 80062e6:	f1ba 0f01 	cmp.w	sl, #1
 80062ea:	f47f af41 	bne.w	8006170 <_scanf_float+0x64>
 80062ee:	f04f 0a02 	mov.w	sl, #2
 80062f2:	e7d1      	b.n	8006298 <_scanf_float+0x18c>
 80062f4:	b97d      	cbnz	r5, 8006316 <_scanf_float+0x20a>
 80062f6:	f1b9 0f00 	cmp.w	r9, #0
 80062fa:	f47f af3c 	bne.w	8006176 <_scanf_float+0x6a>
 80062fe:	6822      	ldr	r2, [r4, #0]
 8006300:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006304:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006308:	f47f af39 	bne.w	800617e <_scanf_float+0x72>
 800630c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006310:	2501      	movs	r5, #1
 8006312:	6022      	str	r2, [r4, #0]
 8006314:	e7c0      	b.n	8006298 <_scanf_float+0x18c>
 8006316:	2d03      	cmp	r5, #3
 8006318:	d0e2      	beq.n	80062e0 <_scanf_float+0x1d4>
 800631a:	2d05      	cmp	r5, #5
 800631c:	e7de      	b.n	80062dc <_scanf_float+0x1d0>
 800631e:	2d02      	cmp	r5, #2
 8006320:	f47f af26 	bne.w	8006170 <_scanf_float+0x64>
 8006324:	2503      	movs	r5, #3
 8006326:	e7b7      	b.n	8006298 <_scanf_float+0x18c>
 8006328:	2d06      	cmp	r5, #6
 800632a:	f47f af21 	bne.w	8006170 <_scanf_float+0x64>
 800632e:	2507      	movs	r5, #7
 8006330:	e7b2      	b.n	8006298 <_scanf_float+0x18c>
 8006332:	6822      	ldr	r2, [r4, #0]
 8006334:	0591      	lsls	r1, r2, #22
 8006336:	f57f af1b 	bpl.w	8006170 <_scanf_float+0x64>
 800633a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800633e:	6022      	str	r2, [r4, #0]
 8006340:	f8cd 9004 	str.w	r9, [sp, #4]
 8006344:	e7a8      	b.n	8006298 <_scanf_float+0x18c>
 8006346:	6822      	ldr	r2, [r4, #0]
 8006348:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800634c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006350:	d006      	beq.n	8006360 <_scanf_float+0x254>
 8006352:	0550      	lsls	r0, r2, #21
 8006354:	f57f af0c 	bpl.w	8006170 <_scanf_float+0x64>
 8006358:	f1b9 0f00 	cmp.w	r9, #0
 800635c:	f43f af0f 	beq.w	800617e <_scanf_float+0x72>
 8006360:	0591      	lsls	r1, r2, #22
 8006362:	bf58      	it	pl
 8006364:	9901      	ldrpl	r1, [sp, #4]
 8006366:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800636a:	bf58      	it	pl
 800636c:	eba9 0101 	subpl.w	r1, r9, r1
 8006370:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006374:	f04f 0900 	mov.w	r9, #0
 8006378:	bf58      	it	pl
 800637a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800637e:	6022      	str	r2, [r4, #0]
 8006380:	e78a      	b.n	8006298 <_scanf_float+0x18c>
 8006382:	f04f 0a03 	mov.w	sl, #3
 8006386:	e787      	b.n	8006298 <_scanf_float+0x18c>
 8006388:	4639      	mov	r1, r7
 800638a:	4640      	mov	r0, r8
 800638c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006390:	4798      	blx	r3
 8006392:	2800      	cmp	r0, #0
 8006394:	f43f aedf 	beq.w	8006156 <_scanf_float+0x4a>
 8006398:	e6ea      	b.n	8006170 <_scanf_float+0x64>
 800639a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800639e:	463a      	mov	r2, r7
 80063a0:	4640      	mov	r0, r8
 80063a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063a6:	4798      	blx	r3
 80063a8:	6923      	ldr	r3, [r4, #16]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	6123      	str	r3, [r4, #16]
 80063ae:	e6ec      	b.n	800618a <_scanf_float+0x7e>
 80063b0:	1e6b      	subs	r3, r5, #1
 80063b2:	2b06      	cmp	r3, #6
 80063b4:	d825      	bhi.n	8006402 <_scanf_float+0x2f6>
 80063b6:	2d02      	cmp	r5, #2
 80063b8:	d836      	bhi.n	8006428 <_scanf_float+0x31c>
 80063ba:	455e      	cmp	r6, fp
 80063bc:	f67f aee8 	bls.w	8006190 <_scanf_float+0x84>
 80063c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063c4:	463a      	mov	r2, r7
 80063c6:	4640      	mov	r0, r8
 80063c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063cc:	4798      	blx	r3
 80063ce:	6923      	ldr	r3, [r4, #16]
 80063d0:	3b01      	subs	r3, #1
 80063d2:	6123      	str	r3, [r4, #16]
 80063d4:	e7f1      	b.n	80063ba <_scanf_float+0x2ae>
 80063d6:	9802      	ldr	r0, [sp, #8]
 80063d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80063e0:	463a      	mov	r2, r7
 80063e2:	9002      	str	r0, [sp, #8]
 80063e4:	4640      	mov	r0, r8
 80063e6:	4798      	blx	r3
 80063e8:	6923      	ldr	r3, [r4, #16]
 80063ea:	3b01      	subs	r3, #1
 80063ec:	6123      	str	r3, [r4, #16]
 80063ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063f2:	fa5f fa8a 	uxtb.w	sl, sl
 80063f6:	f1ba 0f02 	cmp.w	sl, #2
 80063fa:	d1ec      	bne.n	80063d6 <_scanf_float+0x2ca>
 80063fc:	3d03      	subs	r5, #3
 80063fe:	b2ed      	uxtb	r5, r5
 8006400:	1b76      	subs	r6, r6, r5
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	05da      	lsls	r2, r3, #23
 8006406:	d52f      	bpl.n	8006468 <_scanf_float+0x35c>
 8006408:	055b      	lsls	r3, r3, #21
 800640a:	d510      	bpl.n	800642e <_scanf_float+0x322>
 800640c:	455e      	cmp	r6, fp
 800640e:	f67f aebf 	bls.w	8006190 <_scanf_float+0x84>
 8006412:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006416:	463a      	mov	r2, r7
 8006418:	4640      	mov	r0, r8
 800641a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800641e:	4798      	blx	r3
 8006420:	6923      	ldr	r3, [r4, #16]
 8006422:	3b01      	subs	r3, #1
 8006424:	6123      	str	r3, [r4, #16]
 8006426:	e7f1      	b.n	800640c <_scanf_float+0x300>
 8006428:	46aa      	mov	sl, r5
 800642a:	9602      	str	r6, [sp, #8]
 800642c:	e7df      	b.n	80063ee <_scanf_float+0x2e2>
 800642e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006432:	6923      	ldr	r3, [r4, #16]
 8006434:	2965      	cmp	r1, #101	; 0x65
 8006436:	f103 33ff 	add.w	r3, r3, #4294967295
 800643a:	f106 35ff 	add.w	r5, r6, #4294967295
 800643e:	6123      	str	r3, [r4, #16]
 8006440:	d00c      	beq.n	800645c <_scanf_float+0x350>
 8006442:	2945      	cmp	r1, #69	; 0x45
 8006444:	d00a      	beq.n	800645c <_scanf_float+0x350>
 8006446:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800644a:	463a      	mov	r2, r7
 800644c:	4640      	mov	r0, r8
 800644e:	4798      	blx	r3
 8006450:	6923      	ldr	r3, [r4, #16]
 8006452:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006456:	3b01      	subs	r3, #1
 8006458:	1eb5      	subs	r5, r6, #2
 800645a:	6123      	str	r3, [r4, #16]
 800645c:	463a      	mov	r2, r7
 800645e:	4640      	mov	r0, r8
 8006460:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006464:	4798      	blx	r3
 8006466:	462e      	mov	r6, r5
 8006468:	6825      	ldr	r5, [r4, #0]
 800646a:	f015 0510 	ands.w	r5, r5, #16
 800646e:	d159      	bne.n	8006524 <_scanf_float+0x418>
 8006470:	7035      	strb	r5, [r6, #0]
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800647c:	d11c      	bne.n	80064b8 <_scanf_float+0x3ac>
 800647e:	9b01      	ldr	r3, [sp, #4]
 8006480:	454b      	cmp	r3, r9
 8006482:	eba3 0209 	sub.w	r2, r3, r9
 8006486:	d124      	bne.n	80064d2 <_scanf_float+0x3c6>
 8006488:	2200      	movs	r2, #0
 800648a:	4659      	mov	r1, fp
 800648c:	4640      	mov	r0, r8
 800648e:	f000 fe8b 	bl	80071a8 <_strtod_r>
 8006492:	f8d4 c000 	ldr.w	ip, [r4]
 8006496:	9b03      	ldr	r3, [sp, #12]
 8006498:	f01c 0f02 	tst.w	ip, #2
 800649c:	4606      	mov	r6, r0
 800649e:	460f      	mov	r7, r1
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	d021      	beq.n	80064e8 <_scanf_float+0x3dc>
 80064a4:	9903      	ldr	r1, [sp, #12]
 80064a6:	1d1a      	adds	r2, r3, #4
 80064a8:	600a      	str	r2, [r1, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	e9c3 6700 	strd	r6, r7, [r3]
 80064b0:	68e3      	ldr	r3, [r4, #12]
 80064b2:	3301      	adds	r3, #1
 80064b4:	60e3      	str	r3, [r4, #12]
 80064b6:	e66c      	b.n	8006192 <_scanf_float+0x86>
 80064b8:	9b04      	ldr	r3, [sp, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0e4      	beq.n	8006488 <_scanf_float+0x37c>
 80064be:	9905      	ldr	r1, [sp, #20]
 80064c0:	230a      	movs	r3, #10
 80064c2:	462a      	mov	r2, r5
 80064c4:	4640      	mov	r0, r8
 80064c6:	3101      	adds	r1, #1
 80064c8:	f000 fefa 	bl	80072c0 <_strtol_r>
 80064cc:	9b04      	ldr	r3, [sp, #16]
 80064ce:	9e05      	ldr	r6, [sp, #20]
 80064d0:	1ac2      	subs	r2, r0, r3
 80064d2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80064d6:	429e      	cmp	r6, r3
 80064d8:	bf28      	it	cs
 80064da:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80064de:	4630      	mov	r0, r6
 80064e0:	4911      	ldr	r1, [pc, #68]	; (8006528 <_scanf_float+0x41c>)
 80064e2:	f000 f829 	bl	8006538 <siprintf>
 80064e6:	e7cf      	b.n	8006488 <_scanf_float+0x37c>
 80064e8:	f01c 0f04 	tst.w	ip, #4
 80064ec:	f103 0e04 	add.w	lr, r3, #4
 80064f0:	d003      	beq.n	80064fa <_scanf_float+0x3ee>
 80064f2:	9903      	ldr	r1, [sp, #12]
 80064f4:	f8c1 e000 	str.w	lr, [r1]
 80064f8:	e7d7      	b.n	80064aa <_scanf_float+0x39e>
 80064fa:	9a03      	ldr	r2, [sp, #12]
 80064fc:	f8c2 e000 	str.w	lr, [r2]
 8006500:	f8d3 8000 	ldr.w	r8, [r3]
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	f7fa fa80 	bl	8000a0c <__aeabi_dcmpun>
 800650c:	b128      	cbz	r0, 800651a <_scanf_float+0x40e>
 800650e:	4807      	ldr	r0, [pc, #28]	; (800652c <_scanf_float+0x420>)
 8006510:	f000 f80e 	bl	8006530 <nanf>
 8006514:	f8c8 0000 	str.w	r0, [r8]
 8006518:	e7ca      	b.n	80064b0 <_scanf_float+0x3a4>
 800651a:	4630      	mov	r0, r6
 800651c:	4639      	mov	r1, r7
 800651e:	f7fa fad3 	bl	8000ac8 <__aeabi_d2f>
 8006522:	e7f7      	b.n	8006514 <_scanf_float+0x408>
 8006524:	2500      	movs	r5, #0
 8006526:	e634      	b.n	8006192 <_scanf_float+0x86>
 8006528:	0800a82c 	.word	0x0800a82c
 800652c:	0800ac48 	.word	0x0800ac48

08006530 <nanf>:
 8006530:	4800      	ldr	r0, [pc, #0]	; (8006534 <nanf+0x4>)
 8006532:	4770      	bx	lr
 8006534:	7fc00000 	.word	0x7fc00000

08006538 <siprintf>:
 8006538:	b40e      	push	{r1, r2, r3}
 800653a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800653e:	b500      	push	{lr}
 8006540:	b09c      	sub	sp, #112	; 0x70
 8006542:	ab1d      	add	r3, sp, #116	; 0x74
 8006544:	9002      	str	r0, [sp, #8]
 8006546:	9006      	str	r0, [sp, #24]
 8006548:	9107      	str	r1, [sp, #28]
 800654a:	9104      	str	r1, [sp, #16]
 800654c:	4808      	ldr	r0, [pc, #32]	; (8006570 <siprintf+0x38>)
 800654e:	4909      	ldr	r1, [pc, #36]	; (8006574 <siprintf+0x3c>)
 8006550:	f853 2b04 	ldr.w	r2, [r3], #4
 8006554:	9105      	str	r1, [sp, #20]
 8006556:	6800      	ldr	r0, [r0, #0]
 8006558:	a902      	add	r1, sp, #8
 800655a:	9301      	str	r3, [sp, #4]
 800655c:	f002 fe88 	bl	8009270 <_svfiprintf_r>
 8006560:	2200      	movs	r2, #0
 8006562:	9b02      	ldr	r3, [sp, #8]
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	b01c      	add	sp, #112	; 0x70
 8006568:	f85d eb04 	ldr.w	lr, [sp], #4
 800656c:	b003      	add	sp, #12
 800656e:	4770      	bx	lr
 8006570:	20000018 	.word	0x20000018
 8006574:	ffff0208 	.word	0xffff0208

08006578 <sulp>:
 8006578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800657c:	460f      	mov	r7, r1
 800657e:	4690      	mov	r8, r2
 8006580:	f002 fc1e 	bl	8008dc0 <__ulp>
 8006584:	4604      	mov	r4, r0
 8006586:	460d      	mov	r5, r1
 8006588:	f1b8 0f00 	cmp.w	r8, #0
 800658c:	d011      	beq.n	80065b2 <sulp+0x3a>
 800658e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006592:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006596:	2b00      	cmp	r3, #0
 8006598:	dd0b      	ble.n	80065b2 <sulp+0x3a>
 800659a:	2400      	movs	r4, #0
 800659c:	051b      	lsls	r3, r3, #20
 800659e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80065a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80065a6:	4622      	mov	r2, r4
 80065a8:	462b      	mov	r3, r5
 80065aa:	f7f9 ff95 	bl	80004d8 <__aeabi_dmul>
 80065ae:	4604      	mov	r4, r0
 80065b0:	460d      	mov	r5, r1
 80065b2:	4620      	mov	r0, r4
 80065b4:	4629      	mov	r1, r5
 80065b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ba:	0000      	movs	r0, r0
 80065bc:	0000      	movs	r0, r0
	...

080065c0 <_strtod_l>:
 80065c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c4:	469b      	mov	fp, r3
 80065c6:	2300      	movs	r3, #0
 80065c8:	b0a1      	sub	sp, #132	; 0x84
 80065ca:	931c      	str	r3, [sp, #112]	; 0x70
 80065cc:	4ba1      	ldr	r3, [pc, #644]	; (8006854 <_strtod_l+0x294>)
 80065ce:	4682      	mov	sl, r0
 80065d0:	681f      	ldr	r7, [r3, #0]
 80065d2:	460e      	mov	r6, r1
 80065d4:	4638      	mov	r0, r7
 80065d6:	9217      	str	r2, [sp, #92]	; 0x5c
 80065d8:	f7f9 fdba 	bl	8000150 <strlen>
 80065dc:	f04f 0800 	mov.w	r8, #0
 80065e0:	4604      	mov	r4, r0
 80065e2:	f04f 0900 	mov.w	r9, #0
 80065e6:	961b      	str	r6, [sp, #108]	; 0x6c
 80065e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80065ea:	781a      	ldrb	r2, [r3, #0]
 80065ec:	2a2b      	cmp	r2, #43	; 0x2b
 80065ee:	d04c      	beq.n	800668a <_strtod_l+0xca>
 80065f0:	d83a      	bhi.n	8006668 <_strtod_l+0xa8>
 80065f2:	2a0d      	cmp	r2, #13
 80065f4:	d833      	bhi.n	800665e <_strtod_l+0x9e>
 80065f6:	2a08      	cmp	r2, #8
 80065f8:	d833      	bhi.n	8006662 <_strtod_l+0xa2>
 80065fa:	2a00      	cmp	r2, #0
 80065fc:	d03d      	beq.n	800667a <_strtod_l+0xba>
 80065fe:	2300      	movs	r3, #0
 8006600:	930c      	str	r3, [sp, #48]	; 0x30
 8006602:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006604:	782b      	ldrb	r3, [r5, #0]
 8006606:	2b30      	cmp	r3, #48	; 0x30
 8006608:	f040 80af 	bne.w	800676a <_strtod_l+0x1aa>
 800660c:	786b      	ldrb	r3, [r5, #1]
 800660e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006612:	2b58      	cmp	r3, #88	; 0x58
 8006614:	d16c      	bne.n	80066f0 <_strtod_l+0x130>
 8006616:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006618:	4650      	mov	r0, sl
 800661a:	9301      	str	r3, [sp, #4]
 800661c:	ab1c      	add	r3, sp, #112	; 0x70
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	4a8d      	ldr	r2, [pc, #564]	; (8006858 <_strtod_l+0x298>)
 8006622:	f8cd b008 	str.w	fp, [sp, #8]
 8006626:	ab1d      	add	r3, sp, #116	; 0x74
 8006628:	a91b      	add	r1, sp, #108	; 0x6c
 800662a:	f001 fd2f 	bl	800808c <__gethex>
 800662e:	f010 0607 	ands.w	r6, r0, #7
 8006632:	4604      	mov	r4, r0
 8006634:	d005      	beq.n	8006642 <_strtod_l+0x82>
 8006636:	2e06      	cmp	r6, #6
 8006638:	d129      	bne.n	800668e <_strtod_l+0xce>
 800663a:	2300      	movs	r3, #0
 800663c:	3501      	adds	r5, #1
 800663e:	951b      	str	r5, [sp, #108]	; 0x6c
 8006640:	930c      	str	r3, [sp, #48]	; 0x30
 8006642:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006644:	2b00      	cmp	r3, #0
 8006646:	f040 8596 	bne.w	8007176 <_strtod_l+0xbb6>
 800664a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800664c:	b1d3      	cbz	r3, 8006684 <_strtod_l+0xc4>
 800664e:	4642      	mov	r2, r8
 8006650:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006654:	4610      	mov	r0, r2
 8006656:	4619      	mov	r1, r3
 8006658:	b021      	add	sp, #132	; 0x84
 800665a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665e:	2a20      	cmp	r2, #32
 8006660:	d1cd      	bne.n	80065fe <_strtod_l+0x3e>
 8006662:	3301      	adds	r3, #1
 8006664:	931b      	str	r3, [sp, #108]	; 0x6c
 8006666:	e7bf      	b.n	80065e8 <_strtod_l+0x28>
 8006668:	2a2d      	cmp	r2, #45	; 0x2d
 800666a:	d1c8      	bne.n	80065fe <_strtod_l+0x3e>
 800666c:	2201      	movs	r2, #1
 800666e:	920c      	str	r2, [sp, #48]	; 0x30
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	921b      	str	r2, [sp, #108]	; 0x6c
 8006674:	785b      	ldrb	r3, [r3, #1]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1c3      	bne.n	8006602 <_strtod_l+0x42>
 800667a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800667c:	961b      	str	r6, [sp, #108]	; 0x6c
 800667e:	2b00      	cmp	r3, #0
 8006680:	f040 8577 	bne.w	8007172 <_strtod_l+0xbb2>
 8006684:	4642      	mov	r2, r8
 8006686:	464b      	mov	r3, r9
 8006688:	e7e4      	b.n	8006654 <_strtod_l+0x94>
 800668a:	2200      	movs	r2, #0
 800668c:	e7ef      	b.n	800666e <_strtod_l+0xae>
 800668e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006690:	b13a      	cbz	r2, 80066a2 <_strtod_l+0xe2>
 8006692:	2135      	movs	r1, #53	; 0x35
 8006694:	a81e      	add	r0, sp, #120	; 0x78
 8006696:	f002 fc97 	bl	8008fc8 <__copybits>
 800669a:	4650      	mov	r0, sl
 800669c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800669e:	f002 f85f 	bl	8008760 <_Bfree>
 80066a2:	3e01      	subs	r6, #1
 80066a4:	2e05      	cmp	r6, #5
 80066a6:	d807      	bhi.n	80066b8 <_strtod_l+0xf8>
 80066a8:	e8df f006 	tbb	[pc, r6]
 80066ac:	1d180b0e 	.word	0x1d180b0e
 80066b0:	030e      	.short	0x030e
 80066b2:	f04f 0900 	mov.w	r9, #0
 80066b6:	46c8      	mov	r8, r9
 80066b8:	0721      	lsls	r1, r4, #28
 80066ba:	d5c2      	bpl.n	8006642 <_strtod_l+0x82>
 80066bc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80066c0:	e7bf      	b.n	8006642 <_strtod_l+0x82>
 80066c2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80066c6:	e7f7      	b.n	80066b8 <_strtod_l+0xf8>
 80066c8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80066ca:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80066ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80066d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80066d6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80066da:	e7ed      	b.n	80066b8 <_strtod_l+0xf8>
 80066dc:	f04f 0800 	mov.w	r8, #0
 80066e0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800685c <_strtod_l+0x29c>
 80066e4:	e7e8      	b.n	80066b8 <_strtod_l+0xf8>
 80066e6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80066ea:	f04f 38ff 	mov.w	r8, #4294967295
 80066ee:	e7e3      	b.n	80066b8 <_strtod_l+0xf8>
 80066f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	921b      	str	r2, [sp, #108]	; 0x6c
 80066f6:	785b      	ldrb	r3, [r3, #1]
 80066f8:	2b30      	cmp	r3, #48	; 0x30
 80066fa:	d0f9      	beq.n	80066f0 <_strtod_l+0x130>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0a0      	beq.n	8006642 <_strtod_l+0x82>
 8006700:	2301      	movs	r3, #1
 8006702:	9307      	str	r3, [sp, #28]
 8006704:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006706:	220a      	movs	r2, #10
 8006708:	9308      	str	r3, [sp, #32]
 800670a:	2300      	movs	r3, #0
 800670c:	469b      	mov	fp, r3
 800670e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006712:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006714:	7805      	ldrb	r5, [r0, #0]
 8006716:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800671a:	b2d9      	uxtb	r1, r3
 800671c:	2909      	cmp	r1, #9
 800671e:	d926      	bls.n	800676e <_strtod_l+0x1ae>
 8006720:	4622      	mov	r2, r4
 8006722:	4639      	mov	r1, r7
 8006724:	f002 feba 	bl	800949c <strncmp>
 8006728:	2800      	cmp	r0, #0
 800672a:	d032      	beq.n	8006792 <_strtod_l+0x1d2>
 800672c:	2000      	movs	r0, #0
 800672e:	462b      	mov	r3, r5
 8006730:	465c      	mov	r4, fp
 8006732:	4602      	mov	r2, r0
 8006734:	9004      	str	r0, [sp, #16]
 8006736:	2b65      	cmp	r3, #101	; 0x65
 8006738:	d001      	beq.n	800673e <_strtod_l+0x17e>
 800673a:	2b45      	cmp	r3, #69	; 0x45
 800673c:	d113      	bne.n	8006766 <_strtod_l+0x1a6>
 800673e:	b91c      	cbnz	r4, 8006748 <_strtod_l+0x188>
 8006740:	9b07      	ldr	r3, [sp, #28]
 8006742:	4303      	orrs	r3, r0
 8006744:	d099      	beq.n	800667a <_strtod_l+0xba>
 8006746:	2400      	movs	r4, #0
 8006748:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800674a:	1c73      	adds	r3, r6, #1
 800674c:	931b      	str	r3, [sp, #108]	; 0x6c
 800674e:	7873      	ldrb	r3, [r6, #1]
 8006750:	2b2b      	cmp	r3, #43	; 0x2b
 8006752:	d078      	beq.n	8006846 <_strtod_l+0x286>
 8006754:	2b2d      	cmp	r3, #45	; 0x2d
 8006756:	d07b      	beq.n	8006850 <_strtod_l+0x290>
 8006758:	2700      	movs	r7, #0
 800675a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800675e:	2909      	cmp	r1, #9
 8006760:	f240 8082 	bls.w	8006868 <_strtod_l+0x2a8>
 8006764:	961b      	str	r6, [sp, #108]	; 0x6c
 8006766:	2500      	movs	r5, #0
 8006768:	e09e      	b.n	80068a8 <_strtod_l+0x2e8>
 800676a:	2300      	movs	r3, #0
 800676c:	e7c9      	b.n	8006702 <_strtod_l+0x142>
 800676e:	f1bb 0f08 	cmp.w	fp, #8
 8006772:	bfd5      	itete	le
 8006774:	9906      	ldrle	r1, [sp, #24]
 8006776:	9905      	ldrgt	r1, [sp, #20]
 8006778:	fb02 3301 	mlale	r3, r2, r1, r3
 800677c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006780:	f100 0001 	add.w	r0, r0, #1
 8006784:	bfd4      	ite	le
 8006786:	9306      	strle	r3, [sp, #24]
 8006788:	9305      	strgt	r3, [sp, #20]
 800678a:	f10b 0b01 	add.w	fp, fp, #1
 800678e:	901b      	str	r0, [sp, #108]	; 0x6c
 8006790:	e7bf      	b.n	8006712 <_strtod_l+0x152>
 8006792:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006794:	191a      	adds	r2, r3, r4
 8006796:	921b      	str	r2, [sp, #108]	; 0x6c
 8006798:	5d1b      	ldrb	r3, [r3, r4]
 800679a:	f1bb 0f00 	cmp.w	fp, #0
 800679e:	d036      	beq.n	800680e <_strtod_l+0x24e>
 80067a0:	465c      	mov	r4, fp
 80067a2:	9004      	str	r0, [sp, #16]
 80067a4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80067a8:	2a09      	cmp	r2, #9
 80067aa:	d912      	bls.n	80067d2 <_strtod_l+0x212>
 80067ac:	2201      	movs	r2, #1
 80067ae:	e7c2      	b.n	8006736 <_strtod_l+0x176>
 80067b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067b2:	3001      	adds	r0, #1
 80067b4:	1c5a      	adds	r2, r3, #1
 80067b6:	921b      	str	r2, [sp, #108]	; 0x6c
 80067b8:	785b      	ldrb	r3, [r3, #1]
 80067ba:	2b30      	cmp	r3, #48	; 0x30
 80067bc:	d0f8      	beq.n	80067b0 <_strtod_l+0x1f0>
 80067be:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80067c2:	2a08      	cmp	r2, #8
 80067c4:	f200 84dc 	bhi.w	8007180 <_strtod_l+0xbc0>
 80067c8:	9004      	str	r0, [sp, #16]
 80067ca:	2000      	movs	r0, #0
 80067cc:	4604      	mov	r4, r0
 80067ce:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80067d0:	9208      	str	r2, [sp, #32]
 80067d2:	3b30      	subs	r3, #48	; 0x30
 80067d4:	f100 0201 	add.w	r2, r0, #1
 80067d8:	d013      	beq.n	8006802 <_strtod_l+0x242>
 80067da:	9904      	ldr	r1, [sp, #16]
 80067dc:	1905      	adds	r5, r0, r4
 80067de:	4411      	add	r1, r2
 80067e0:	9104      	str	r1, [sp, #16]
 80067e2:	4622      	mov	r2, r4
 80067e4:	210a      	movs	r1, #10
 80067e6:	42aa      	cmp	r2, r5
 80067e8:	d113      	bne.n	8006812 <_strtod_l+0x252>
 80067ea:	1822      	adds	r2, r4, r0
 80067ec:	2a08      	cmp	r2, #8
 80067ee:	f104 0401 	add.w	r4, r4, #1
 80067f2:	4404      	add	r4, r0
 80067f4:	dc1b      	bgt.n	800682e <_strtod_l+0x26e>
 80067f6:	220a      	movs	r2, #10
 80067f8:	9906      	ldr	r1, [sp, #24]
 80067fa:	fb02 3301 	mla	r3, r2, r1, r3
 80067fe:	9306      	str	r3, [sp, #24]
 8006800:	2200      	movs	r2, #0
 8006802:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006804:	4610      	mov	r0, r2
 8006806:	1c59      	adds	r1, r3, #1
 8006808:	911b      	str	r1, [sp, #108]	; 0x6c
 800680a:	785b      	ldrb	r3, [r3, #1]
 800680c:	e7ca      	b.n	80067a4 <_strtod_l+0x1e4>
 800680e:	4658      	mov	r0, fp
 8006810:	e7d3      	b.n	80067ba <_strtod_l+0x1fa>
 8006812:	2a08      	cmp	r2, #8
 8006814:	dc04      	bgt.n	8006820 <_strtod_l+0x260>
 8006816:	9f06      	ldr	r7, [sp, #24]
 8006818:	434f      	muls	r7, r1
 800681a:	9706      	str	r7, [sp, #24]
 800681c:	3201      	adds	r2, #1
 800681e:	e7e2      	b.n	80067e6 <_strtod_l+0x226>
 8006820:	1c57      	adds	r7, r2, #1
 8006822:	2f10      	cmp	r7, #16
 8006824:	bfde      	ittt	le
 8006826:	9f05      	ldrle	r7, [sp, #20]
 8006828:	434f      	mulle	r7, r1
 800682a:	9705      	strle	r7, [sp, #20]
 800682c:	e7f6      	b.n	800681c <_strtod_l+0x25c>
 800682e:	2c10      	cmp	r4, #16
 8006830:	bfdf      	itttt	le
 8006832:	220a      	movle	r2, #10
 8006834:	9905      	ldrle	r1, [sp, #20]
 8006836:	fb02 3301 	mlale	r3, r2, r1, r3
 800683a:	9305      	strle	r3, [sp, #20]
 800683c:	e7e0      	b.n	8006800 <_strtod_l+0x240>
 800683e:	2300      	movs	r3, #0
 8006840:	2201      	movs	r2, #1
 8006842:	9304      	str	r3, [sp, #16]
 8006844:	e77c      	b.n	8006740 <_strtod_l+0x180>
 8006846:	2700      	movs	r7, #0
 8006848:	1cb3      	adds	r3, r6, #2
 800684a:	931b      	str	r3, [sp, #108]	; 0x6c
 800684c:	78b3      	ldrb	r3, [r6, #2]
 800684e:	e784      	b.n	800675a <_strtod_l+0x19a>
 8006850:	2701      	movs	r7, #1
 8006852:	e7f9      	b.n	8006848 <_strtod_l+0x288>
 8006854:	0800aa88 	.word	0x0800aa88
 8006858:	0800a834 	.word	0x0800a834
 800685c:	7ff00000 	.word	0x7ff00000
 8006860:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006862:	1c59      	adds	r1, r3, #1
 8006864:	911b      	str	r1, [sp, #108]	; 0x6c
 8006866:	785b      	ldrb	r3, [r3, #1]
 8006868:	2b30      	cmp	r3, #48	; 0x30
 800686a:	d0f9      	beq.n	8006860 <_strtod_l+0x2a0>
 800686c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006870:	2908      	cmp	r1, #8
 8006872:	f63f af78 	bhi.w	8006766 <_strtod_l+0x1a6>
 8006876:	f04f 0e0a 	mov.w	lr, #10
 800687a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800687e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006880:	9309      	str	r3, [sp, #36]	; 0x24
 8006882:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006884:	1c59      	adds	r1, r3, #1
 8006886:	911b      	str	r1, [sp, #108]	; 0x6c
 8006888:	785b      	ldrb	r3, [r3, #1]
 800688a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800688e:	2d09      	cmp	r5, #9
 8006890:	d935      	bls.n	80068fe <_strtod_l+0x33e>
 8006892:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006894:	1b49      	subs	r1, r1, r5
 8006896:	2908      	cmp	r1, #8
 8006898:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800689c:	dc02      	bgt.n	80068a4 <_strtod_l+0x2e4>
 800689e:	4565      	cmp	r5, ip
 80068a0:	bfa8      	it	ge
 80068a2:	4665      	movge	r5, ip
 80068a4:	b107      	cbz	r7, 80068a8 <_strtod_l+0x2e8>
 80068a6:	426d      	negs	r5, r5
 80068a8:	2c00      	cmp	r4, #0
 80068aa:	d14c      	bne.n	8006946 <_strtod_l+0x386>
 80068ac:	9907      	ldr	r1, [sp, #28]
 80068ae:	4301      	orrs	r1, r0
 80068b0:	f47f aec7 	bne.w	8006642 <_strtod_l+0x82>
 80068b4:	2a00      	cmp	r2, #0
 80068b6:	f47f aee0 	bne.w	800667a <_strtod_l+0xba>
 80068ba:	2b69      	cmp	r3, #105	; 0x69
 80068bc:	d026      	beq.n	800690c <_strtod_l+0x34c>
 80068be:	dc23      	bgt.n	8006908 <_strtod_l+0x348>
 80068c0:	2b49      	cmp	r3, #73	; 0x49
 80068c2:	d023      	beq.n	800690c <_strtod_l+0x34c>
 80068c4:	2b4e      	cmp	r3, #78	; 0x4e
 80068c6:	f47f aed8 	bne.w	800667a <_strtod_l+0xba>
 80068ca:	499c      	ldr	r1, [pc, #624]	; (8006b3c <_strtod_l+0x57c>)
 80068cc:	a81b      	add	r0, sp, #108	; 0x6c
 80068ce:	f001 fe2b 	bl	8008528 <__match>
 80068d2:	2800      	cmp	r0, #0
 80068d4:	f43f aed1 	beq.w	800667a <_strtod_l+0xba>
 80068d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	2b28      	cmp	r3, #40	; 0x28
 80068de:	d12c      	bne.n	800693a <_strtod_l+0x37a>
 80068e0:	4997      	ldr	r1, [pc, #604]	; (8006b40 <_strtod_l+0x580>)
 80068e2:	aa1e      	add	r2, sp, #120	; 0x78
 80068e4:	a81b      	add	r0, sp, #108	; 0x6c
 80068e6:	f001 fe33 	bl	8008550 <__hexnan>
 80068ea:	2805      	cmp	r0, #5
 80068ec:	d125      	bne.n	800693a <_strtod_l+0x37a>
 80068ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80068f0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80068f4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80068f8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80068fc:	e6a1      	b.n	8006642 <_strtod_l+0x82>
 80068fe:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8006902:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006906:	e7bc      	b.n	8006882 <_strtod_l+0x2c2>
 8006908:	2b6e      	cmp	r3, #110	; 0x6e
 800690a:	e7dc      	b.n	80068c6 <_strtod_l+0x306>
 800690c:	498d      	ldr	r1, [pc, #564]	; (8006b44 <_strtod_l+0x584>)
 800690e:	a81b      	add	r0, sp, #108	; 0x6c
 8006910:	f001 fe0a 	bl	8008528 <__match>
 8006914:	2800      	cmp	r0, #0
 8006916:	f43f aeb0 	beq.w	800667a <_strtod_l+0xba>
 800691a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800691c:	498a      	ldr	r1, [pc, #552]	; (8006b48 <_strtod_l+0x588>)
 800691e:	3b01      	subs	r3, #1
 8006920:	a81b      	add	r0, sp, #108	; 0x6c
 8006922:	931b      	str	r3, [sp, #108]	; 0x6c
 8006924:	f001 fe00 	bl	8008528 <__match>
 8006928:	b910      	cbnz	r0, 8006930 <_strtod_l+0x370>
 800692a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800692c:	3301      	adds	r3, #1
 800692e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006930:	f04f 0800 	mov.w	r8, #0
 8006934:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8006b58 <_strtod_l+0x598>
 8006938:	e683      	b.n	8006642 <_strtod_l+0x82>
 800693a:	4884      	ldr	r0, [pc, #528]	; (8006b4c <_strtod_l+0x58c>)
 800693c:	f002 fd98 	bl	8009470 <nan>
 8006940:	4680      	mov	r8, r0
 8006942:	4689      	mov	r9, r1
 8006944:	e67d      	b.n	8006642 <_strtod_l+0x82>
 8006946:	9b04      	ldr	r3, [sp, #16]
 8006948:	f1bb 0f00 	cmp.w	fp, #0
 800694c:	bf08      	it	eq
 800694e:	46a3      	moveq	fp, r4
 8006950:	1aeb      	subs	r3, r5, r3
 8006952:	2c10      	cmp	r4, #16
 8006954:	9806      	ldr	r0, [sp, #24]
 8006956:	4626      	mov	r6, r4
 8006958:	9307      	str	r3, [sp, #28]
 800695a:	bfa8      	it	ge
 800695c:	2610      	movge	r6, #16
 800695e:	f7f9 fd41 	bl	80003e4 <__aeabi_ui2d>
 8006962:	2c09      	cmp	r4, #9
 8006964:	4680      	mov	r8, r0
 8006966:	4689      	mov	r9, r1
 8006968:	dd13      	ble.n	8006992 <_strtod_l+0x3d2>
 800696a:	4b79      	ldr	r3, [pc, #484]	; (8006b50 <_strtod_l+0x590>)
 800696c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006970:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006974:	f7f9 fdb0 	bl	80004d8 <__aeabi_dmul>
 8006978:	4680      	mov	r8, r0
 800697a:	9805      	ldr	r0, [sp, #20]
 800697c:	4689      	mov	r9, r1
 800697e:	f7f9 fd31 	bl	80003e4 <__aeabi_ui2d>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	4640      	mov	r0, r8
 8006988:	4649      	mov	r1, r9
 800698a:	f7f9 fbef 	bl	800016c <__adddf3>
 800698e:	4680      	mov	r8, r0
 8006990:	4689      	mov	r9, r1
 8006992:	2c0f      	cmp	r4, #15
 8006994:	dc36      	bgt.n	8006a04 <_strtod_l+0x444>
 8006996:	9b07      	ldr	r3, [sp, #28]
 8006998:	2b00      	cmp	r3, #0
 800699a:	f43f ae52 	beq.w	8006642 <_strtod_l+0x82>
 800699e:	dd22      	ble.n	80069e6 <_strtod_l+0x426>
 80069a0:	2b16      	cmp	r3, #22
 80069a2:	dc09      	bgt.n	80069b8 <_strtod_l+0x3f8>
 80069a4:	4c6a      	ldr	r4, [pc, #424]	; (8006b50 <_strtod_l+0x590>)
 80069a6:	4642      	mov	r2, r8
 80069a8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80069ac:	464b      	mov	r3, r9
 80069ae:	e9d4 0100 	ldrd	r0, r1, [r4]
 80069b2:	f7f9 fd91 	bl	80004d8 <__aeabi_dmul>
 80069b6:	e7c3      	b.n	8006940 <_strtod_l+0x380>
 80069b8:	9a07      	ldr	r2, [sp, #28]
 80069ba:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80069be:	4293      	cmp	r3, r2
 80069c0:	db20      	blt.n	8006a04 <_strtod_l+0x444>
 80069c2:	4d63      	ldr	r5, [pc, #396]	; (8006b50 <_strtod_l+0x590>)
 80069c4:	f1c4 040f 	rsb	r4, r4, #15
 80069c8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80069cc:	4642      	mov	r2, r8
 80069ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069d2:	464b      	mov	r3, r9
 80069d4:	f7f9 fd80 	bl	80004d8 <__aeabi_dmul>
 80069d8:	9b07      	ldr	r3, [sp, #28]
 80069da:	1b1c      	subs	r4, r3, r4
 80069dc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80069e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069e4:	e7e5      	b.n	80069b2 <_strtod_l+0x3f2>
 80069e6:	9b07      	ldr	r3, [sp, #28]
 80069e8:	3316      	adds	r3, #22
 80069ea:	db0b      	blt.n	8006a04 <_strtod_l+0x444>
 80069ec:	9b04      	ldr	r3, [sp, #16]
 80069ee:	4a58      	ldr	r2, [pc, #352]	; (8006b50 <_strtod_l+0x590>)
 80069f0:	1b5d      	subs	r5, r3, r5
 80069f2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80069f6:	4640      	mov	r0, r8
 80069f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069fc:	4649      	mov	r1, r9
 80069fe:	f7f9 fe95 	bl	800072c <__aeabi_ddiv>
 8006a02:	e79d      	b.n	8006940 <_strtod_l+0x380>
 8006a04:	9b07      	ldr	r3, [sp, #28]
 8006a06:	1ba6      	subs	r6, r4, r6
 8006a08:	441e      	add	r6, r3
 8006a0a:	2e00      	cmp	r6, #0
 8006a0c:	dd71      	ble.n	8006af2 <_strtod_l+0x532>
 8006a0e:	f016 030f 	ands.w	r3, r6, #15
 8006a12:	d00a      	beq.n	8006a2a <_strtod_l+0x46a>
 8006a14:	494e      	ldr	r1, [pc, #312]	; (8006b50 <_strtod_l+0x590>)
 8006a16:	4642      	mov	r2, r8
 8006a18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a20:	464b      	mov	r3, r9
 8006a22:	f7f9 fd59 	bl	80004d8 <__aeabi_dmul>
 8006a26:	4680      	mov	r8, r0
 8006a28:	4689      	mov	r9, r1
 8006a2a:	f036 060f 	bics.w	r6, r6, #15
 8006a2e:	d050      	beq.n	8006ad2 <_strtod_l+0x512>
 8006a30:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006a34:	dd27      	ble.n	8006a86 <_strtod_l+0x4c6>
 8006a36:	f04f 0b00 	mov.w	fp, #0
 8006a3a:	f8cd b010 	str.w	fp, [sp, #16]
 8006a3e:	f8cd b020 	str.w	fp, [sp, #32]
 8006a42:	f8cd b018 	str.w	fp, [sp, #24]
 8006a46:	2322      	movs	r3, #34	; 0x22
 8006a48:	f04f 0800 	mov.w	r8, #0
 8006a4c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006b58 <_strtod_l+0x598>
 8006a50:	f8ca 3000 	str.w	r3, [sl]
 8006a54:	9b08      	ldr	r3, [sp, #32]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f43f adf3 	beq.w	8006642 <_strtod_l+0x82>
 8006a5c:	4650      	mov	r0, sl
 8006a5e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006a60:	f001 fe7e 	bl	8008760 <_Bfree>
 8006a64:	4650      	mov	r0, sl
 8006a66:	9906      	ldr	r1, [sp, #24]
 8006a68:	f001 fe7a 	bl	8008760 <_Bfree>
 8006a6c:	4650      	mov	r0, sl
 8006a6e:	9904      	ldr	r1, [sp, #16]
 8006a70:	f001 fe76 	bl	8008760 <_Bfree>
 8006a74:	4650      	mov	r0, sl
 8006a76:	9908      	ldr	r1, [sp, #32]
 8006a78:	f001 fe72 	bl	8008760 <_Bfree>
 8006a7c:	4659      	mov	r1, fp
 8006a7e:	4650      	mov	r0, sl
 8006a80:	f001 fe6e 	bl	8008760 <_Bfree>
 8006a84:	e5dd      	b.n	8006642 <_strtod_l+0x82>
 8006a86:	2300      	movs	r3, #0
 8006a88:	4640      	mov	r0, r8
 8006a8a:	4649      	mov	r1, r9
 8006a8c:	461f      	mov	r7, r3
 8006a8e:	1136      	asrs	r6, r6, #4
 8006a90:	2e01      	cmp	r6, #1
 8006a92:	dc21      	bgt.n	8006ad8 <_strtod_l+0x518>
 8006a94:	b10b      	cbz	r3, 8006a9a <_strtod_l+0x4da>
 8006a96:	4680      	mov	r8, r0
 8006a98:	4689      	mov	r9, r1
 8006a9a:	4b2e      	ldr	r3, [pc, #184]	; (8006b54 <_strtod_l+0x594>)
 8006a9c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006aa0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006aa4:	4642      	mov	r2, r8
 8006aa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006aaa:	464b      	mov	r3, r9
 8006aac:	f7f9 fd14 	bl	80004d8 <__aeabi_dmul>
 8006ab0:	4b29      	ldr	r3, [pc, #164]	; (8006b58 <_strtod_l+0x598>)
 8006ab2:	460a      	mov	r2, r1
 8006ab4:	400b      	ands	r3, r1
 8006ab6:	4929      	ldr	r1, [pc, #164]	; (8006b5c <_strtod_l+0x59c>)
 8006ab8:	4680      	mov	r8, r0
 8006aba:	428b      	cmp	r3, r1
 8006abc:	d8bb      	bhi.n	8006a36 <_strtod_l+0x476>
 8006abe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006ac2:	428b      	cmp	r3, r1
 8006ac4:	bf86      	itte	hi
 8006ac6:	f04f 38ff 	movhi.w	r8, #4294967295
 8006aca:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006b60 <_strtod_l+0x5a0>
 8006ace:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	9305      	str	r3, [sp, #20]
 8006ad6:	e07e      	b.n	8006bd6 <_strtod_l+0x616>
 8006ad8:	07f2      	lsls	r2, r6, #31
 8006ada:	d507      	bpl.n	8006aec <_strtod_l+0x52c>
 8006adc:	4b1d      	ldr	r3, [pc, #116]	; (8006b54 <_strtod_l+0x594>)
 8006ade:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae6:	f7f9 fcf7 	bl	80004d8 <__aeabi_dmul>
 8006aea:	2301      	movs	r3, #1
 8006aec:	3701      	adds	r7, #1
 8006aee:	1076      	asrs	r6, r6, #1
 8006af0:	e7ce      	b.n	8006a90 <_strtod_l+0x4d0>
 8006af2:	d0ee      	beq.n	8006ad2 <_strtod_l+0x512>
 8006af4:	4276      	negs	r6, r6
 8006af6:	f016 020f 	ands.w	r2, r6, #15
 8006afa:	d00a      	beq.n	8006b12 <_strtod_l+0x552>
 8006afc:	4b14      	ldr	r3, [pc, #80]	; (8006b50 <_strtod_l+0x590>)
 8006afe:	4640      	mov	r0, r8
 8006b00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b04:	4649      	mov	r1, r9
 8006b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0a:	f7f9 fe0f 	bl	800072c <__aeabi_ddiv>
 8006b0e:	4680      	mov	r8, r0
 8006b10:	4689      	mov	r9, r1
 8006b12:	1136      	asrs	r6, r6, #4
 8006b14:	d0dd      	beq.n	8006ad2 <_strtod_l+0x512>
 8006b16:	2e1f      	cmp	r6, #31
 8006b18:	dd24      	ble.n	8006b64 <_strtod_l+0x5a4>
 8006b1a:	f04f 0b00 	mov.w	fp, #0
 8006b1e:	f8cd b010 	str.w	fp, [sp, #16]
 8006b22:	f8cd b020 	str.w	fp, [sp, #32]
 8006b26:	f8cd b018 	str.w	fp, [sp, #24]
 8006b2a:	2322      	movs	r3, #34	; 0x22
 8006b2c:	f04f 0800 	mov.w	r8, #0
 8006b30:	f04f 0900 	mov.w	r9, #0
 8006b34:	f8ca 3000 	str.w	r3, [sl]
 8006b38:	e78c      	b.n	8006a54 <_strtod_l+0x494>
 8006b3a:	bf00      	nop
 8006b3c:	0800a805 	.word	0x0800a805
 8006b40:	0800a848 	.word	0x0800a848
 8006b44:	0800a7fd 	.word	0x0800a7fd
 8006b48:	0800a98c 	.word	0x0800a98c
 8006b4c:	0800ac48 	.word	0x0800ac48
 8006b50:	0800ab28 	.word	0x0800ab28
 8006b54:	0800ab00 	.word	0x0800ab00
 8006b58:	7ff00000 	.word	0x7ff00000
 8006b5c:	7ca00000 	.word	0x7ca00000
 8006b60:	7fefffff 	.word	0x7fefffff
 8006b64:	f016 0310 	ands.w	r3, r6, #16
 8006b68:	bf18      	it	ne
 8006b6a:	236a      	movne	r3, #106	; 0x6a
 8006b6c:	4640      	mov	r0, r8
 8006b6e:	9305      	str	r3, [sp, #20]
 8006b70:	4649      	mov	r1, r9
 8006b72:	2300      	movs	r3, #0
 8006b74:	4fb2      	ldr	r7, [pc, #712]	; (8006e40 <_strtod_l+0x880>)
 8006b76:	07f2      	lsls	r2, r6, #31
 8006b78:	d504      	bpl.n	8006b84 <_strtod_l+0x5c4>
 8006b7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b7e:	f7f9 fcab 	bl	80004d8 <__aeabi_dmul>
 8006b82:	2301      	movs	r3, #1
 8006b84:	1076      	asrs	r6, r6, #1
 8006b86:	f107 0708 	add.w	r7, r7, #8
 8006b8a:	d1f4      	bne.n	8006b76 <_strtod_l+0x5b6>
 8006b8c:	b10b      	cbz	r3, 8006b92 <_strtod_l+0x5d2>
 8006b8e:	4680      	mov	r8, r0
 8006b90:	4689      	mov	r9, r1
 8006b92:	9b05      	ldr	r3, [sp, #20]
 8006b94:	b1bb      	cbz	r3, 8006bc6 <_strtod_l+0x606>
 8006b96:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8006b9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	4649      	mov	r1, r9
 8006ba2:	dd10      	ble.n	8006bc6 <_strtod_l+0x606>
 8006ba4:	2b1f      	cmp	r3, #31
 8006ba6:	f340 812b 	ble.w	8006e00 <_strtod_l+0x840>
 8006baa:	2b34      	cmp	r3, #52	; 0x34
 8006bac:	bfd8      	it	le
 8006bae:	f04f 32ff 	movle.w	r2, #4294967295
 8006bb2:	f04f 0800 	mov.w	r8, #0
 8006bb6:	bfcf      	iteee	gt
 8006bb8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006bbc:	3b20      	suble	r3, #32
 8006bbe:	fa02 f303 	lslle.w	r3, r2, r3
 8006bc2:	ea03 0901 	andle.w	r9, r3, r1
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	2300      	movs	r3, #0
 8006bca:	4640      	mov	r0, r8
 8006bcc:	4649      	mov	r1, r9
 8006bce:	f7f9 feeb 	bl	80009a8 <__aeabi_dcmpeq>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	d1a1      	bne.n	8006b1a <_strtod_l+0x55a>
 8006bd6:	9b06      	ldr	r3, [sp, #24]
 8006bd8:	465a      	mov	r2, fp
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	4650      	mov	r0, sl
 8006bde:	4623      	mov	r3, r4
 8006be0:	9908      	ldr	r1, [sp, #32]
 8006be2:	f001 fe29 	bl	8008838 <__s2b>
 8006be6:	9008      	str	r0, [sp, #32]
 8006be8:	2800      	cmp	r0, #0
 8006bea:	f43f af24 	beq.w	8006a36 <_strtod_l+0x476>
 8006bee:	9b04      	ldr	r3, [sp, #16]
 8006bf0:	f04f 0b00 	mov.w	fp, #0
 8006bf4:	1b5d      	subs	r5, r3, r5
 8006bf6:	9b07      	ldr	r3, [sp, #28]
 8006bf8:	f8cd b010 	str.w	fp, [sp, #16]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	bfb4      	ite	lt
 8006c00:	462b      	movlt	r3, r5
 8006c02:	2300      	movge	r3, #0
 8006c04:	930e      	str	r3, [sp, #56]	; 0x38
 8006c06:	9b07      	ldr	r3, [sp, #28]
 8006c08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006c0c:	9316      	str	r3, [sp, #88]	; 0x58
 8006c0e:	9b08      	ldr	r3, [sp, #32]
 8006c10:	4650      	mov	r0, sl
 8006c12:	6859      	ldr	r1, [r3, #4]
 8006c14:	f001 fd64 	bl	80086e0 <_Balloc>
 8006c18:	9006      	str	r0, [sp, #24]
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	f43f af13 	beq.w	8006a46 <_strtod_l+0x486>
 8006c20:	9b08      	ldr	r3, [sp, #32]
 8006c22:	300c      	adds	r0, #12
 8006c24:	691a      	ldr	r2, [r3, #16]
 8006c26:	f103 010c 	add.w	r1, r3, #12
 8006c2a:	3202      	adds	r2, #2
 8006c2c:	0092      	lsls	r2, r2, #2
 8006c2e:	f7fe fdf7 	bl	8005820 <memcpy>
 8006c32:	ab1e      	add	r3, sp, #120	; 0x78
 8006c34:	9301      	str	r3, [sp, #4]
 8006c36:	ab1d      	add	r3, sp, #116	; 0x74
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	4642      	mov	r2, r8
 8006c3c:	464b      	mov	r3, r9
 8006c3e:	4650      	mov	r0, sl
 8006c40:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8006c44:	f002 f936 	bl	8008eb4 <__d2b>
 8006c48:	901c      	str	r0, [sp, #112]	; 0x70
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	f43f aefb 	beq.w	8006a46 <_strtod_l+0x486>
 8006c50:	2101      	movs	r1, #1
 8006c52:	4650      	mov	r0, sl
 8006c54:	f001 fe88 	bl	8008968 <__i2b>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	9004      	str	r0, [sp, #16]
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	f43f aef2 	beq.w	8006a46 <_strtod_l+0x486>
 8006c62:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8006c64:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006c66:	2d00      	cmp	r5, #0
 8006c68:	bfab      	itete	ge
 8006c6a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006c6c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006c6e:	18ee      	addge	r6, r5, r3
 8006c70:	1b5c      	sublt	r4, r3, r5
 8006c72:	9b05      	ldr	r3, [sp, #20]
 8006c74:	bfa8      	it	ge
 8006c76:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8006c78:	eba5 0503 	sub.w	r5, r5, r3
 8006c7c:	4415      	add	r5, r2
 8006c7e:	4b71      	ldr	r3, [pc, #452]	; (8006e44 <_strtod_l+0x884>)
 8006c80:	f105 35ff 	add.w	r5, r5, #4294967295
 8006c84:	bfb8      	it	lt
 8006c86:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006c88:	429d      	cmp	r5, r3
 8006c8a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006c8e:	f280 80c9 	bge.w	8006e24 <_strtod_l+0x864>
 8006c92:	1b5b      	subs	r3, r3, r5
 8006c94:	2b1f      	cmp	r3, #31
 8006c96:	f04f 0701 	mov.w	r7, #1
 8006c9a:	eba2 0203 	sub.w	r2, r2, r3
 8006c9e:	f300 80b6 	bgt.w	8006e0e <_strtod_l+0x84e>
 8006ca2:	2500      	movs	r5, #0
 8006ca4:	fa07 f303 	lsl.w	r3, r7, r3
 8006ca8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006caa:	18b7      	adds	r7, r6, r2
 8006cac:	9b05      	ldr	r3, [sp, #20]
 8006cae:	42be      	cmp	r6, r7
 8006cb0:	4414      	add	r4, r2
 8006cb2:	441c      	add	r4, r3
 8006cb4:	4633      	mov	r3, r6
 8006cb6:	bfa8      	it	ge
 8006cb8:	463b      	movge	r3, r7
 8006cba:	42a3      	cmp	r3, r4
 8006cbc:	bfa8      	it	ge
 8006cbe:	4623      	movge	r3, r4
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	bfc2      	ittt	gt
 8006cc4:	1aff      	subgt	r7, r7, r3
 8006cc6:	1ae4      	subgt	r4, r4, r3
 8006cc8:	1af6      	subgt	r6, r6, r3
 8006cca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	dd17      	ble.n	8006d00 <_strtod_l+0x740>
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	4650      	mov	r0, sl
 8006cd4:	9904      	ldr	r1, [sp, #16]
 8006cd6:	f001 ff01 	bl	8008adc <__pow5mult>
 8006cda:	9004      	str	r0, [sp, #16]
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	f43f aeb2 	beq.w	8006a46 <_strtod_l+0x486>
 8006ce2:	4601      	mov	r1, r0
 8006ce4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006ce6:	4650      	mov	r0, sl
 8006ce8:	f001 fe54 	bl	8008994 <__multiply>
 8006cec:	9009      	str	r0, [sp, #36]	; 0x24
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	f43f aea9 	beq.w	8006a46 <_strtod_l+0x486>
 8006cf4:	4650      	mov	r0, sl
 8006cf6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006cf8:	f001 fd32 	bl	8008760 <_Bfree>
 8006cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cfe:	931c      	str	r3, [sp, #112]	; 0x70
 8006d00:	2f00      	cmp	r7, #0
 8006d02:	f300 8093 	bgt.w	8006e2c <_strtod_l+0x86c>
 8006d06:	9b07      	ldr	r3, [sp, #28]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	dd08      	ble.n	8006d1e <_strtod_l+0x75e>
 8006d0c:	4650      	mov	r0, sl
 8006d0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006d10:	9906      	ldr	r1, [sp, #24]
 8006d12:	f001 fee3 	bl	8008adc <__pow5mult>
 8006d16:	9006      	str	r0, [sp, #24]
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	f43f ae94 	beq.w	8006a46 <_strtod_l+0x486>
 8006d1e:	2c00      	cmp	r4, #0
 8006d20:	dd08      	ble.n	8006d34 <_strtod_l+0x774>
 8006d22:	4622      	mov	r2, r4
 8006d24:	4650      	mov	r0, sl
 8006d26:	9906      	ldr	r1, [sp, #24]
 8006d28:	f001 ff32 	bl	8008b90 <__lshift>
 8006d2c:	9006      	str	r0, [sp, #24]
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	f43f ae89 	beq.w	8006a46 <_strtod_l+0x486>
 8006d34:	2e00      	cmp	r6, #0
 8006d36:	dd08      	ble.n	8006d4a <_strtod_l+0x78a>
 8006d38:	4632      	mov	r2, r6
 8006d3a:	4650      	mov	r0, sl
 8006d3c:	9904      	ldr	r1, [sp, #16]
 8006d3e:	f001 ff27 	bl	8008b90 <__lshift>
 8006d42:	9004      	str	r0, [sp, #16]
 8006d44:	2800      	cmp	r0, #0
 8006d46:	f43f ae7e 	beq.w	8006a46 <_strtod_l+0x486>
 8006d4a:	4650      	mov	r0, sl
 8006d4c:	9a06      	ldr	r2, [sp, #24]
 8006d4e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006d50:	f001 ffa6 	bl	8008ca0 <__mdiff>
 8006d54:	4683      	mov	fp, r0
 8006d56:	2800      	cmp	r0, #0
 8006d58:	f43f ae75 	beq.w	8006a46 <_strtod_l+0x486>
 8006d5c:	2400      	movs	r4, #0
 8006d5e:	68c3      	ldr	r3, [r0, #12]
 8006d60:	9904      	ldr	r1, [sp, #16]
 8006d62:	60c4      	str	r4, [r0, #12]
 8006d64:	930d      	str	r3, [sp, #52]	; 0x34
 8006d66:	f001 ff7f 	bl	8008c68 <__mcmp>
 8006d6a:	42a0      	cmp	r0, r4
 8006d6c:	da70      	bge.n	8006e50 <_strtod_l+0x890>
 8006d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d70:	ea53 0308 	orrs.w	r3, r3, r8
 8006d74:	f040 8096 	bne.w	8006ea4 <_strtod_l+0x8e4>
 8006d78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f040 8091 	bne.w	8006ea4 <_strtod_l+0x8e4>
 8006d82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d86:	0d1b      	lsrs	r3, r3, #20
 8006d88:	051b      	lsls	r3, r3, #20
 8006d8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006d8e:	f240 8089 	bls.w	8006ea4 <_strtod_l+0x8e4>
 8006d92:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006d96:	b923      	cbnz	r3, 8006da2 <_strtod_l+0x7e2>
 8006d98:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	f340 8081 	ble.w	8006ea4 <_strtod_l+0x8e4>
 8006da2:	4659      	mov	r1, fp
 8006da4:	2201      	movs	r2, #1
 8006da6:	4650      	mov	r0, sl
 8006da8:	f001 fef2 	bl	8008b90 <__lshift>
 8006dac:	9904      	ldr	r1, [sp, #16]
 8006dae:	4683      	mov	fp, r0
 8006db0:	f001 ff5a 	bl	8008c68 <__mcmp>
 8006db4:	2800      	cmp	r0, #0
 8006db6:	dd75      	ble.n	8006ea4 <_strtod_l+0x8e4>
 8006db8:	9905      	ldr	r1, [sp, #20]
 8006dba:	464b      	mov	r3, r9
 8006dbc:	4a22      	ldr	r2, [pc, #136]	; (8006e48 <_strtod_l+0x888>)
 8006dbe:	2900      	cmp	r1, #0
 8006dc0:	f000 8091 	beq.w	8006ee6 <_strtod_l+0x926>
 8006dc4:	ea02 0109 	and.w	r1, r2, r9
 8006dc8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006dcc:	f300 808b 	bgt.w	8006ee6 <_strtod_l+0x926>
 8006dd0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006dd4:	f77f aea9 	ble.w	8006b2a <_strtod_l+0x56a>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	4a1c      	ldr	r2, [pc, #112]	; (8006e4c <_strtod_l+0x88c>)
 8006ddc:	4640      	mov	r0, r8
 8006dde:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006de2:	4649      	mov	r1, r9
 8006de4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006de8:	f7f9 fb76 	bl	80004d8 <__aeabi_dmul>
 8006dec:	460b      	mov	r3, r1
 8006dee:	4303      	orrs	r3, r0
 8006df0:	bf08      	it	eq
 8006df2:	2322      	moveq	r3, #34	; 0x22
 8006df4:	4680      	mov	r8, r0
 8006df6:	4689      	mov	r9, r1
 8006df8:	bf08      	it	eq
 8006dfa:	f8ca 3000 	streq.w	r3, [sl]
 8006dfe:	e62d      	b.n	8006a5c <_strtod_l+0x49c>
 8006e00:	f04f 32ff 	mov.w	r2, #4294967295
 8006e04:	fa02 f303 	lsl.w	r3, r2, r3
 8006e08:	ea03 0808 	and.w	r8, r3, r8
 8006e0c:	e6db      	b.n	8006bc6 <_strtod_l+0x606>
 8006e0e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006e12:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006e16:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006e1a:	35e2      	adds	r5, #226	; 0xe2
 8006e1c:	fa07 f505 	lsl.w	r5, r7, r5
 8006e20:	970f      	str	r7, [sp, #60]	; 0x3c
 8006e22:	e742      	b.n	8006caa <_strtod_l+0x6ea>
 8006e24:	2301      	movs	r3, #1
 8006e26:	2500      	movs	r5, #0
 8006e28:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e2a:	e73e      	b.n	8006caa <_strtod_l+0x6ea>
 8006e2c:	463a      	mov	r2, r7
 8006e2e:	4650      	mov	r0, sl
 8006e30:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006e32:	f001 fead 	bl	8008b90 <__lshift>
 8006e36:	901c      	str	r0, [sp, #112]	; 0x70
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	f47f af64 	bne.w	8006d06 <_strtod_l+0x746>
 8006e3e:	e602      	b.n	8006a46 <_strtod_l+0x486>
 8006e40:	0800a860 	.word	0x0800a860
 8006e44:	fffffc02 	.word	0xfffffc02
 8006e48:	7ff00000 	.word	0x7ff00000
 8006e4c:	39500000 	.word	0x39500000
 8006e50:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006e54:	d166      	bne.n	8006f24 <_strtod_l+0x964>
 8006e56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e5c:	b35a      	cbz	r2, 8006eb6 <_strtod_l+0x8f6>
 8006e5e:	4a9c      	ldr	r2, [pc, #624]	; (80070d0 <_strtod_l+0xb10>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d12c      	bne.n	8006ebe <_strtod_l+0x8fe>
 8006e64:	9b05      	ldr	r3, [sp, #20]
 8006e66:	4640      	mov	r0, r8
 8006e68:	b303      	cbz	r3, 8006eac <_strtod_l+0x8ec>
 8006e6a:	464b      	mov	r3, r9
 8006e6c:	4a99      	ldr	r2, [pc, #612]	; (80070d4 <_strtod_l+0xb14>)
 8006e6e:	f04f 31ff 	mov.w	r1, #4294967295
 8006e72:	401a      	ands	r2, r3
 8006e74:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006e78:	d81b      	bhi.n	8006eb2 <_strtod_l+0x8f2>
 8006e7a:	0d12      	lsrs	r2, r2, #20
 8006e7c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006e80:	fa01 f303 	lsl.w	r3, r1, r3
 8006e84:	4298      	cmp	r0, r3
 8006e86:	d11a      	bne.n	8006ebe <_strtod_l+0x8fe>
 8006e88:	4b93      	ldr	r3, [pc, #588]	; (80070d8 <_strtod_l+0xb18>)
 8006e8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d102      	bne.n	8006e96 <_strtod_l+0x8d6>
 8006e90:	3001      	adds	r0, #1
 8006e92:	f43f add8 	beq.w	8006a46 <_strtod_l+0x486>
 8006e96:	f04f 0800 	mov.w	r8, #0
 8006e9a:	4b8e      	ldr	r3, [pc, #568]	; (80070d4 <_strtod_l+0xb14>)
 8006e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e9e:	401a      	ands	r2, r3
 8006ea0:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006ea4:	9b05      	ldr	r3, [sp, #20]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d196      	bne.n	8006dd8 <_strtod_l+0x818>
 8006eaa:	e5d7      	b.n	8006a5c <_strtod_l+0x49c>
 8006eac:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb0:	e7e8      	b.n	8006e84 <_strtod_l+0x8c4>
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	e7e6      	b.n	8006e84 <_strtod_l+0x8c4>
 8006eb6:	ea53 0308 	orrs.w	r3, r3, r8
 8006eba:	f43f af7d 	beq.w	8006db8 <_strtod_l+0x7f8>
 8006ebe:	b1e5      	cbz	r5, 8006efa <_strtod_l+0x93a>
 8006ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec2:	421d      	tst	r5, r3
 8006ec4:	d0ee      	beq.n	8006ea4 <_strtod_l+0x8e4>
 8006ec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ec8:	4640      	mov	r0, r8
 8006eca:	4649      	mov	r1, r9
 8006ecc:	9a05      	ldr	r2, [sp, #20]
 8006ece:	b1c3      	cbz	r3, 8006f02 <_strtod_l+0x942>
 8006ed0:	f7ff fb52 	bl	8006578 <sulp>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006edc:	f7f9 f946 	bl	800016c <__adddf3>
 8006ee0:	4680      	mov	r8, r0
 8006ee2:	4689      	mov	r9, r1
 8006ee4:	e7de      	b.n	8006ea4 <_strtod_l+0x8e4>
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006eec:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006ef0:	f04f 38ff 	mov.w	r8, #4294967295
 8006ef4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006ef8:	e7d4      	b.n	8006ea4 <_strtod_l+0x8e4>
 8006efa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006efc:	ea13 0f08 	tst.w	r3, r8
 8006f00:	e7e0      	b.n	8006ec4 <_strtod_l+0x904>
 8006f02:	f7ff fb39 	bl	8006578 <sulp>
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f0e:	f7f9 f92b 	bl	8000168 <__aeabi_dsub>
 8006f12:	2200      	movs	r2, #0
 8006f14:	2300      	movs	r3, #0
 8006f16:	4680      	mov	r8, r0
 8006f18:	4689      	mov	r9, r1
 8006f1a:	f7f9 fd45 	bl	80009a8 <__aeabi_dcmpeq>
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	d0c0      	beq.n	8006ea4 <_strtod_l+0x8e4>
 8006f22:	e602      	b.n	8006b2a <_strtod_l+0x56a>
 8006f24:	4658      	mov	r0, fp
 8006f26:	9904      	ldr	r1, [sp, #16]
 8006f28:	f002 f820 	bl	8008f6c <__ratio>
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f32:	4606      	mov	r6, r0
 8006f34:	460f      	mov	r7, r1
 8006f36:	f7f9 fd4b 	bl	80009d0 <__aeabi_dcmple>
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	d075      	beq.n	800702a <_strtod_l+0xa6a>
 8006f3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d047      	beq.n	8006fd4 <_strtod_l+0xa14>
 8006f44:	2600      	movs	r6, #0
 8006f46:	4f65      	ldr	r7, [pc, #404]	; (80070dc <_strtod_l+0xb1c>)
 8006f48:	4d64      	ldr	r5, [pc, #400]	; (80070dc <_strtod_l+0xb1c>)
 8006f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f50:	0d1b      	lsrs	r3, r3, #20
 8006f52:	051b      	lsls	r3, r3, #20
 8006f54:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f58:	4b61      	ldr	r3, [pc, #388]	; (80070e0 <_strtod_l+0xb20>)
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	f040 80c8 	bne.w	80070f0 <_strtod_l+0xb30>
 8006f60:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006f64:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f6a:	4640      	mov	r0, r8
 8006f6c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006f70:	4649      	mov	r1, r9
 8006f72:	f001 ff25 	bl	8008dc0 <__ulp>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	4639      	mov	r1, r7
 8006f7e:	f7f9 faab 	bl	80004d8 <__aeabi_dmul>
 8006f82:	4642      	mov	r2, r8
 8006f84:	464b      	mov	r3, r9
 8006f86:	f7f9 f8f1 	bl	800016c <__adddf3>
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	4951      	ldr	r1, [pc, #324]	; (80070d4 <_strtod_l+0xb14>)
 8006f8e:	4a55      	ldr	r2, [pc, #340]	; (80070e4 <_strtod_l+0xb24>)
 8006f90:	4019      	ands	r1, r3
 8006f92:	4291      	cmp	r1, r2
 8006f94:	4680      	mov	r8, r0
 8006f96:	d95e      	bls.n	8007056 <_strtod_l+0xa96>
 8006f98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f9a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d103      	bne.n	8006faa <_strtod_l+0x9ea>
 8006fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	f43f ad4e 	beq.w	8006a46 <_strtod_l+0x486>
 8006faa:	f04f 38ff 	mov.w	r8, #4294967295
 8006fae:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80070d8 <_strtod_l+0xb18>
 8006fb2:	4650      	mov	r0, sl
 8006fb4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006fb6:	f001 fbd3 	bl	8008760 <_Bfree>
 8006fba:	4650      	mov	r0, sl
 8006fbc:	9906      	ldr	r1, [sp, #24]
 8006fbe:	f001 fbcf 	bl	8008760 <_Bfree>
 8006fc2:	4650      	mov	r0, sl
 8006fc4:	9904      	ldr	r1, [sp, #16]
 8006fc6:	f001 fbcb 	bl	8008760 <_Bfree>
 8006fca:	4659      	mov	r1, fp
 8006fcc:	4650      	mov	r0, sl
 8006fce:	f001 fbc7 	bl	8008760 <_Bfree>
 8006fd2:	e61c      	b.n	8006c0e <_strtod_l+0x64e>
 8006fd4:	f1b8 0f00 	cmp.w	r8, #0
 8006fd8:	d119      	bne.n	800700e <_strtod_l+0xa4e>
 8006fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fe0:	b9e3      	cbnz	r3, 800701c <_strtod_l+0xa5c>
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	4639      	mov	r1, r7
 8006fe8:	4b3c      	ldr	r3, [pc, #240]	; (80070dc <_strtod_l+0xb1c>)
 8006fea:	f7f9 fce7 	bl	80009bc <__aeabi_dcmplt>
 8006fee:	b9c8      	cbnz	r0, 8007024 <_strtod_l+0xa64>
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	4b3c      	ldr	r3, [pc, #240]	; (80070e8 <_strtod_l+0xb28>)
 8006ff8:	f7f9 fa6e 	bl	80004d8 <__aeabi_dmul>
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	460d      	mov	r5, r1
 8007000:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007004:	9418      	str	r4, [sp, #96]	; 0x60
 8007006:	9319      	str	r3, [sp, #100]	; 0x64
 8007008:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800700c:	e79d      	b.n	8006f4a <_strtod_l+0x98a>
 800700e:	f1b8 0f01 	cmp.w	r8, #1
 8007012:	d103      	bne.n	800701c <_strtod_l+0xa5c>
 8007014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007016:	2b00      	cmp	r3, #0
 8007018:	f43f ad87 	beq.w	8006b2a <_strtod_l+0x56a>
 800701c:	2600      	movs	r6, #0
 800701e:	2400      	movs	r4, #0
 8007020:	4f32      	ldr	r7, [pc, #200]	; (80070ec <_strtod_l+0xb2c>)
 8007022:	e791      	b.n	8006f48 <_strtod_l+0x988>
 8007024:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007026:	4d30      	ldr	r5, [pc, #192]	; (80070e8 <_strtod_l+0xb28>)
 8007028:	e7ea      	b.n	8007000 <_strtod_l+0xa40>
 800702a:	4b2f      	ldr	r3, [pc, #188]	; (80070e8 <_strtod_l+0xb28>)
 800702c:	2200      	movs	r2, #0
 800702e:	4630      	mov	r0, r6
 8007030:	4639      	mov	r1, r7
 8007032:	f7f9 fa51 	bl	80004d8 <__aeabi_dmul>
 8007036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007038:	4604      	mov	r4, r0
 800703a:	460d      	mov	r5, r1
 800703c:	b933      	cbnz	r3, 800704c <_strtod_l+0xa8c>
 800703e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007042:	9010      	str	r0, [sp, #64]	; 0x40
 8007044:	9311      	str	r3, [sp, #68]	; 0x44
 8007046:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800704a:	e77e      	b.n	8006f4a <_strtod_l+0x98a>
 800704c:	4602      	mov	r2, r0
 800704e:	460b      	mov	r3, r1
 8007050:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007054:	e7f7      	b.n	8007046 <_strtod_l+0xa86>
 8007056:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800705a:	9b05      	ldr	r3, [sp, #20]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1a8      	bne.n	8006fb2 <_strtod_l+0x9f2>
 8007060:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007064:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007066:	0d1b      	lsrs	r3, r3, #20
 8007068:	051b      	lsls	r3, r3, #20
 800706a:	429a      	cmp	r2, r3
 800706c:	d1a1      	bne.n	8006fb2 <_strtod_l+0x9f2>
 800706e:	4620      	mov	r0, r4
 8007070:	4629      	mov	r1, r5
 8007072:	f7f9 fd79 	bl	8000b68 <__aeabi_d2lz>
 8007076:	f7f9 fa01 	bl	800047c <__aeabi_l2d>
 800707a:	4602      	mov	r2, r0
 800707c:	460b      	mov	r3, r1
 800707e:	4620      	mov	r0, r4
 8007080:	4629      	mov	r1, r5
 8007082:	f7f9 f871 	bl	8000168 <__aeabi_dsub>
 8007086:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007088:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800708c:	ea43 0308 	orr.w	r3, r3, r8
 8007090:	4313      	orrs	r3, r2
 8007092:	4604      	mov	r4, r0
 8007094:	460d      	mov	r5, r1
 8007096:	d066      	beq.n	8007166 <_strtod_l+0xba6>
 8007098:	a309      	add	r3, pc, #36	; (adr r3, 80070c0 <_strtod_l+0xb00>)
 800709a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709e:	f7f9 fc8d 	bl	80009bc <__aeabi_dcmplt>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	f47f acda 	bne.w	8006a5c <_strtod_l+0x49c>
 80070a8:	a307      	add	r3, pc, #28	; (adr r3, 80070c8 <_strtod_l+0xb08>)
 80070aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ae:	4620      	mov	r0, r4
 80070b0:	4629      	mov	r1, r5
 80070b2:	f7f9 fca1 	bl	80009f8 <__aeabi_dcmpgt>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	f43f af7b 	beq.w	8006fb2 <_strtod_l+0x9f2>
 80070bc:	e4ce      	b.n	8006a5c <_strtod_l+0x49c>
 80070be:	bf00      	nop
 80070c0:	94a03595 	.word	0x94a03595
 80070c4:	3fdfffff 	.word	0x3fdfffff
 80070c8:	35afe535 	.word	0x35afe535
 80070cc:	3fe00000 	.word	0x3fe00000
 80070d0:	000fffff 	.word	0x000fffff
 80070d4:	7ff00000 	.word	0x7ff00000
 80070d8:	7fefffff 	.word	0x7fefffff
 80070dc:	3ff00000 	.word	0x3ff00000
 80070e0:	7fe00000 	.word	0x7fe00000
 80070e4:	7c9fffff 	.word	0x7c9fffff
 80070e8:	3fe00000 	.word	0x3fe00000
 80070ec:	bff00000 	.word	0xbff00000
 80070f0:	9b05      	ldr	r3, [sp, #20]
 80070f2:	b313      	cbz	r3, 800713a <_strtod_l+0xb7a>
 80070f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80070fa:	d81e      	bhi.n	800713a <_strtod_l+0xb7a>
 80070fc:	a326      	add	r3, pc, #152	; (adr r3, 8007198 <_strtod_l+0xbd8>)
 80070fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007102:	4620      	mov	r0, r4
 8007104:	4629      	mov	r1, r5
 8007106:	f7f9 fc63 	bl	80009d0 <__aeabi_dcmple>
 800710a:	b190      	cbz	r0, 8007132 <_strtod_l+0xb72>
 800710c:	4629      	mov	r1, r5
 800710e:	4620      	mov	r0, r4
 8007110:	f7f9 fcba 	bl	8000a88 <__aeabi_d2uiz>
 8007114:	2801      	cmp	r0, #1
 8007116:	bf38      	it	cc
 8007118:	2001      	movcc	r0, #1
 800711a:	f7f9 f963 	bl	80003e4 <__aeabi_ui2d>
 800711e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007120:	4604      	mov	r4, r0
 8007122:	460d      	mov	r5, r1
 8007124:	b9d3      	cbnz	r3, 800715c <_strtod_l+0xb9c>
 8007126:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800712a:	9012      	str	r0, [sp, #72]	; 0x48
 800712c:	9313      	str	r3, [sp, #76]	; 0x4c
 800712e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007132:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007134:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007138:	1a9f      	subs	r7, r3, r2
 800713a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800713e:	f001 fe3f 	bl	8008dc0 <__ulp>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	4630      	mov	r0, r6
 8007148:	4639      	mov	r1, r7
 800714a:	f7f9 f9c5 	bl	80004d8 <__aeabi_dmul>
 800714e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007152:	f7f9 f80b 	bl	800016c <__adddf3>
 8007156:	4680      	mov	r8, r0
 8007158:	4689      	mov	r9, r1
 800715a:	e77e      	b.n	800705a <_strtod_l+0xa9a>
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007164:	e7e3      	b.n	800712e <_strtod_l+0xb6e>
 8007166:	a30e      	add	r3, pc, #56	; (adr r3, 80071a0 <_strtod_l+0xbe0>)
 8007168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716c:	f7f9 fc26 	bl	80009bc <__aeabi_dcmplt>
 8007170:	e7a1      	b.n	80070b6 <_strtod_l+0xaf6>
 8007172:	2300      	movs	r3, #0
 8007174:	930c      	str	r3, [sp, #48]	; 0x30
 8007176:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007178:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800717a:	6013      	str	r3, [r2, #0]
 800717c:	f7ff ba65 	b.w	800664a <_strtod_l+0x8a>
 8007180:	2b65      	cmp	r3, #101	; 0x65
 8007182:	f43f ab5c 	beq.w	800683e <_strtod_l+0x27e>
 8007186:	2b45      	cmp	r3, #69	; 0x45
 8007188:	f43f ab59 	beq.w	800683e <_strtod_l+0x27e>
 800718c:	2201      	movs	r2, #1
 800718e:	f7ff bb8d 	b.w	80068ac <_strtod_l+0x2ec>
 8007192:	bf00      	nop
 8007194:	f3af 8000 	nop.w
 8007198:	ffc00000 	.word	0xffc00000
 800719c:	41dfffff 	.word	0x41dfffff
 80071a0:	94a03595 	.word	0x94a03595
 80071a4:	3fcfffff 	.word	0x3fcfffff

080071a8 <_strtod_r>:
 80071a8:	4b01      	ldr	r3, [pc, #4]	; (80071b0 <_strtod_r+0x8>)
 80071aa:	f7ff ba09 	b.w	80065c0 <_strtod_l>
 80071ae:	bf00      	nop
 80071b0:	20000080 	.word	0x20000080

080071b4 <_strtol_l.isra.0>:
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071ba:	4686      	mov	lr, r0
 80071bc:	d001      	beq.n	80071c2 <_strtol_l.isra.0+0xe>
 80071be:	2b24      	cmp	r3, #36	; 0x24
 80071c0:	d906      	bls.n	80071d0 <_strtol_l.isra.0+0x1c>
 80071c2:	f7fe fb03 	bl	80057cc <__errno>
 80071c6:	2316      	movs	r3, #22
 80071c8:	6003      	str	r3, [r0, #0]
 80071ca:	2000      	movs	r0, #0
 80071cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071d0:	468c      	mov	ip, r1
 80071d2:	4e3a      	ldr	r6, [pc, #232]	; (80072bc <_strtol_l.isra.0+0x108>)
 80071d4:	4660      	mov	r0, ip
 80071d6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80071da:	5da5      	ldrb	r5, [r4, r6]
 80071dc:	f015 0508 	ands.w	r5, r5, #8
 80071e0:	d1f8      	bne.n	80071d4 <_strtol_l.isra.0+0x20>
 80071e2:	2c2d      	cmp	r4, #45	; 0x2d
 80071e4:	d133      	bne.n	800724e <_strtol_l.isra.0+0x9a>
 80071e6:	f04f 0801 	mov.w	r8, #1
 80071ea:	f89c 4000 	ldrb.w	r4, [ip]
 80071ee:	f100 0c02 	add.w	ip, r0, #2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d05d      	beq.n	80072b2 <_strtol_l.isra.0+0xfe>
 80071f6:	2b10      	cmp	r3, #16
 80071f8:	d10c      	bne.n	8007214 <_strtol_l.isra.0+0x60>
 80071fa:	2c30      	cmp	r4, #48	; 0x30
 80071fc:	d10a      	bne.n	8007214 <_strtol_l.isra.0+0x60>
 80071fe:	f89c 0000 	ldrb.w	r0, [ip]
 8007202:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007206:	2858      	cmp	r0, #88	; 0x58
 8007208:	d14e      	bne.n	80072a8 <_strtol_l.isra.0+0xf4>
 800720a:	2310      	movs	r3, #16
 800720c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8007210:	f10c 0c02 	add.w	ip, ip, #2
 8007214:	2500      	movs	r5, #0
 8007216:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800721a:	3f01      	subs	r7, #1
 800721c:	fbb7 f9f3 	udiv	r9, r7, r3
 8007220:	4628      	mov	r0, r5
 8007222:	fb03 7a19 	mls	sl, r3, r9, r7
 8007226:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800722a:	2e09      	cmp	r6, #9
 800722c:	d818      	bhi.n	8007260 <_strtol_l.isra.0+0xac>
 800722e:	4634      	mov	r4, r6
 8007230:	42a3      	cmp	r3, r4
 8007232:	dd24      	ble.n	800727e <_strtol_l.isra.0+0xca>
 8007234:	2d00      	cmp	r5, #0
 8007236:	db1f      	blt.n	8007278 <_strtol_l.isra.0+0xc4>
 8007238:	4581      	cmp	r9, r0
 800723a:	d31d      	bcc.n	8007278 <_strtol_l.isra.0+0xc4>
 800723c:	d101      	bne.n	8007242 <_strtol_l.isra.0+0x8e>
 800723e:	45a2      	cmp	sl, r4
 8007240:	db1a      	blt.n	8007278 <_strtol_l.isra.0+0xc4>
 8007242:	2501      	movs	r5, #1
 8007244:	fb00 4003 	mla	r0, r0, r3, r4
 8007248:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800724c:	e7eb      	b.n	8007226 <_strtol_l.isra.0+0x72>
 800724e:	2c2b      	cmp	r4, #43	; 0x2b
 8007250:	bf08      	it	eq
 8007252:	f89c 4000 	ldrbeq.w	r4, [ip]
 8007256:	46a8      	mov	r8, r5
 8007258:	bf08      	it	eq
 800725a:	f100 0c02 	addeq.w	ip, r0, #2
 800725e:	e7c8      	b.n	80071f2 <_strtol_l.isra.0+0x3e>
 8007260:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8007264:	2e19      	cmp	r6, #25
 8007266:	d801      	bhi.n	800726c <_strtol_l.isra.0+0xb8>
 8007268:	3c37      	subs	r4, #55	; 0x37
 800726a:	e7e1      	b.n	8007230 <_strtol_l.isra.0+0x7c>
 800726c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8007270:	2e19      	cmp	r6, #25
 8007272:	d804      	bhi.n	800727e <_strtol_l.isra.0+0xca>
 8007274:	3c57      	subs	r4, #87	; 0x57
 8007276:	e7db      	b.n	8007230 <_strtol_l.isra.0+0x7c>
 8007278:	f04f 35ff 	mov.w	r5, #4294967295
 800727c:	e7e4      	b.n	8007248 <_strtol_l.isra.0+0x94>
 800727e:	2d00      	cmp	r5, #0
 8007280:	da08      	bge.n	8007294 <_strtol_l.isra.0+0xe0>
 8007282:	2322      	movs	r3, #34	; 0x22
 8007284:	4638      	mov	r0, r7
 8007286:	f8ce 3000 	str.w	r3, [lr]
 800728a:	2a00      	cmp	r2, #0
 800728c:	d09e      	beq.n	80071cc <_strtol_l.isra.0+0x18>
 800728e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8007292:	e007      	b.n	80072a4 <_strtol_l.isra.0+0xf0>
 8007294:	f1b8 0f00 	cmp.w	r8, #0
 8007298:	d000      	beq.n	800729c <_strtol_l.isra.0+0xe8>
 800729a:	4240      	negs	r0, r0
 800729c:	2a00      	cmp	r2, #0
 800729e:	d095      	beq.n	80071cc <_strtol_l.isra.0+0x18>
 80072a0:	2d00      	cmp	r5, #0
 80072a2:	d1f4      	bne.n	800728e <_strtol_l.isra.0+0xda>
 80072a4:	6011      	str	r1, [r2, #0]
 80072a6:	e791      	b.n	80071cc <_strtol_l.isra.0+0x18>
 80072a8:	2430      	movs	r4, #48	; 0x30
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1b2      	bne.n	8007214 <_strtol_l.isra.0+0x60>
 80072ae:	2308      	movs	r3, #8
 80072b0:	e7b0      	b.n	8007214 <_strtol_l.isra.0+0x60>
 80072b2:	2c30      	cmp	r4, #48	; 0x30
 80072b4:	d0a3      	beq.n	80071fe <_strtol_l.isra.0+0x4a>
 80072b6:	230a      	movs	r3, #10
 80072b8:	e7ac      	b.n	8007214 <_strtol_l.isra.0+0x60>
 80072ba:	bf00      	nop
 80072bc:	0800a889 	.word	0x0800a889

080072c0 <_strtol_r>:
 80072c0:	f7ff bf78 	b.w	80071b4 <_strtol_l.isra.0>

080072c4 <quorem>:
 80072c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c8:	6903      	ldr	r3, [r0, #16]
 80072ca:	690c      	ldr	r4, [r1, #16]
 80072cc:	4607      	mov	r7, r0
 80072ce:	42a3      	cmp	r3, r4
 80072d0:	f2c0 8083 	blt.w	80073da <quorem+0x116>
 80072d4:	3c01      	subs	r4, #1
 80072d6:	f100 0514 	add.w	r5, r0, #20
 80072da:	f101 0814 	add.w	r8, r1, #20
 80072de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072e2:	9301      	str	r3, [sp, #4]
 80072e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072ec:	3301      	adds	r3, #1
 80072ee:	429a      	cmp	r2, r3
 80072f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80072f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80072f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072fc:	d332      	bcc.n	8007364 <quorem+0xa0>
 80072fe:	f04f 0e00 	mov.w	lr, #0
 8007302:	4640      	mov	r0, r8
 8007304:	46ac      	mov	ip, r5
 8007306:	46f2      	mov	sl, lr
 8007308:	f850 2b04 	ldr.w	r2, [r0], #4
 800730c:	b293      	uxth	r3, r2
 800730e:	fb06 e303 	mla	r3, r6, r3, lr
 8007312:	0c12      	lsrs	r2, r2, #16
 8007314:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007318:	fb06 e202 	mla	r2, r6, r2, lr
 800731c:	b29b      	uxth	r3, r3
 800731e:	ebaa 0303 	sub.w	r3, sl, r3
 8007322:	f8dc a000 	ldr.w	sl, [ip]
 8007326:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800732a:	fa1f fa8a 	uxth.w	sl, sl
 800732e:	4453      	add	r3, sl
 8007330:	fa1f fa82 	uxth.w	sl, r2
 8007334:	f8dc 2000 	ldr.w	r2, [ip]
 8007338:	4581      	cmp	r9, r0
 800733a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800733e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007342:	b29b      	uxth	r3, r3
 8007344:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007348:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800734c:	f84c 3b04 	str.w	r3, [ip], #4
 8007350:	d2da      	bcs.n	8007308 <quorem+0x44>
 8007352:	f855 300b 	ldr.w	r3, [r5, fp]
 8007356:	b92b      	cbnz	r3, 8007364 <quorem+0xa0>
 8007358:	9b01      	ldr	r3, [sp, #4]
 800735a:	3b04      	subs	r3, #4
 800735c:	429d      	cmp	r5, r3
 800735e:	461a      	mov	r2, r3
 8007360:	d32f      	bcc.n	80073c2 <quorem+0xfe>
 8007362:	613c      	str	r4, [r7, #16]
 8007364:	4638      	mov	r0, r7
 8007366:	f001 fc7f 	bl	8008c68 <__mcmp>
 800736a:	2800      	cmp	r0, #0
 800736c:	db25      	blt.n	80073ba <quorem+0xf6>
 800736e:	4628      	mov	r0, r5
 8007370:	f04f 0c00 	mov.w	ip, #0
 8007374:	3601      	adds	r6, #1
 8007376:	f858 1b04 	ldr.w	r1, [r8], #4
 800737a:	f8d0 e000 	ldr.w	lr, [r0]
 800737e:	b28b      	uxth	r3, r1
 8007380:	ebac 0303 	sub.w	r3, ip, r3
 8007384:	fa1f f28e 	uxth.w	r2, lr
 8007388:	4413      	add	r3, r2
 800738a:	0c0a      	lsrs	r2, r1, #16
 800738c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007390:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007394:	b29b      	uxth	r3, r3
 8007396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800739a:	45c1      	cmp	r9, r8
 800739c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80073a0:	f840 3b04 	str.w	r3, [r0], #4
 80073a4:	d2e7      	bcs.n	8007376 <quorem+0xb2>
 80073a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073ae:	b922      	cbnz	r2, 80073ba <quorem+0xf6>
 80073b0:	3b04      	subs	r3, #4
 80073b2:	429d      	cmp	r5, r3
 80073b4:	461a      	mov	r2, r3
 80073b6:	d30a      	bcc.n	80073ce <quorem+0x10a>
 80073b8:	613c      	str	r4, [r7, #16]
 80073ba:	4630      	mov	r0, r6
 80073bc:	b003      	add	sp, #12
 80073be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c2:	6812      	ldr	r2, [r2, #0]
 80073c4:	3b04      	subs	r3, #4
 80073c6:	2a00      	cmp	r2, #0
 80073c8:	d1cb      	bne.n	8007362 <quorem+0x9e>
 80073ca:	3c01      	subs	r4, #1
 80073cc:	e7c6      	b.n	800735c <quorem+0x98>
 80073ce:	6812      	ldr	r2, [r2, #0]
 80073d0:	3b04      	subs	r3, #4
 80073d2:	2a00      	cmp	r2, #0
 80073d4:	d1f0      	bne.n	80073b8 <quorem+0xf4>
 80073d6:	3c01      	subs	r4, #1
 80073d8:	e7eb      	b.n	80073b2 <quorem+0xee>
 80073da:	2000      	movs	r0, #0
 80073dc:	e7ee      	b.n	80073bc <quorem+0xf8>
	...

080073e0 <_dtoa_r>:
 80073e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e4:	4616      	mov	r6, r2
 80073e6:	461f      	mov	r7, r3
 80073e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80073ea:	b099      	sub	sp, #100	; 0x64
 80073ec:	4605      	mov	r5, r0
 80073ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80073f2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80073f6:	b974      	cbnz	r4, 8007416 <_dtoa_r+0x36>
 80073f8:	2010      	movs	r0, #16
 80073fa:	f001 f949 	bl	8008690 <malloc>
 80073fe:	4602      	mov	r2, r0
 8007400:	6268      	str	r0, [r5, #36]	; 0x24
 8007402:	b920      	cbnz	r0, 800740e <_dtoa_r+0x2e>
 8007404:	21ea      	movs	r1, #234	; 0xea
 8007406:	4bae      	ldr	r3, [pc, #696]	; (80076c0 <_dtoa_r+0x2e0>)
 8007408:	48ae      	ldr	r0, [pc, #696]	; (80076c4 <_dtoa_r+0x2e4>)
 800740a:	f002 f867 	bl	80094dc <__assert_func>
 800740e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007412:	6004      	str	r4, [r0, #0]
 8007414:	60c4      	str	r4, [r0, #12]
 8007416:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007418:	6819      	ldr	r1, [r3, #0]
 800741a:	b151      	cbz	r1, 8007432 <_dtoa_r+0x52>
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	2301      	movs	r3, #1
 8007420:	4093      	lsls	r3, r2
 8007422:	604a      	str	r2, [r1, #4]
 8007424:	608b      	str	r3, [r1, #8]
 8007426:	4628      	mov	r0, r5
 8007428:	f001 f99a 	bl	8008760 <_Bfree>
 800742c:	2200      	movs	r2, #0
 800742e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007430:	601a      	str	r2, [r3, #0]
 8007432:	1e3b      	subs	r3, r7, #0
 8007434:	bfaf      	iteee	ge
 8007436:	2300      	movge	r3, #0
 8007438:	2201      	movlt	r2, #1
 800743a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800743e:	9305      	strlt	r3, [sp, #20]
 8007440:	bfa8      	it	ge
 8007442:	f8c8 3000 	strge.w	r3, [r8]
 8007446:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800744a:	4b9f      	ldr	r3, [pc, #636]	; (80076c8 <_dtoa_r+0x2e8>)
 800744c:	bfb8      	it	lt
 800744e:	f8c8 2000 	strlt.w	r2, [r8]
 8007452:	ea33 0309 	bics.w	r3, r3, r9
 8007456:	d119      	bne.n	800748c <_dtoa_r+0xac>
 8007458:	f242 730f 	movw	r3, #9999	; 0x270f
 800745c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800745e:	6013      	str	r3, [r2, #0]
 8007460:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007464:	4333      	orrs	r3, r6
 8007466:	f000 8580 	beq.w	8007f6a <_dtoa_r+0xb8a>
 800746a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800746c:	b953      	cbnz	r3, 8007484 <_dtoa_r+0xa4>
 800746e:	4b97      	ldr	r3, [pc, #604]	; (80076cc <_dtoa_r+0x2ec>)
 8007470:	e022      	b.n	80074b8 <_dtoa_r+0xd8>
 8007472:	4b97      	ldr	r3, [pc, #604]	; (80076d0 <_dtoa_r+0x2f0>)
 8007474:	9308      	str	r3, [sp, #32]
 8007476:	3308      	adds	r3, #8
 8007478:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800747a:	6013      	str	r3, [r2, #0]
 800747c:	9808      	ldr	r0, [sp, #32]
 800747e:	b019      	add	sp, #100	; 0x64
 8007480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007484:	4b91      	ldr	r3, [pc, #580]	; (80076cc <_dtoa_r+0x2ec>)
 8007486:	9308      	str	r3, [sp, #32]
 8007488:	3303      	adds	r3, #3
 800748a:	e7f5      	b.n	8007478 <_dtoa_r+0x98>
 800748c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007490:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007494:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007498:	2200      	movs	r2, #0
 800749a:	2300      	movs	r3, #0
 800749c:	f7f9 fa84 	bl	80009a8 <__aeabi_dcmpeq>
 80074a0:	4680      	mov	r8, r0
 80074a2:	b158      	cbz	r0, 80074bc <_dtoa_r+0xdc>
 80074a4:	2301      	movs	r3, #1
 80074a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80074a8:	6013      	str	r3, [r2, #0]
 80074aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 8559 	beq.w	8007f64 <_dtoa_r+0xb84>
 80074b2:	4888      	ldr	r0, [pc, #544]	; (80076d4 <_dtoa_r+0x2f4>)
 80074b4:	6018      	str	r0, [r3, #0]
 80074b6:	1e43      	subs	r3, r0, #1
 80074b8:	9308      	str	r3, [sp, #32]
 80074ba:	e7df      	b.n	800747c <_dtoa_r+0x9c>
 80074bc:	ab16      	add	r3, sp, #88	; 0x58
 80074be:	9301      	str	r3, [sp, #4]
 80074c0:	ab17      	add	r3, sp, #92	; 0x5c
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	4628      	mov	r0, r5
 80074c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80074ca:	f001 fcf3 	bl	8008eb4 <__d2b>
 80074ce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80074d2:	4682      	mov	sl, r0
 80074d4:	2c00      	cmp	r4, #0
 80074d6:	d07e      	beq.n	80075d6 <_dtoa_r+0x1f6>
 80074d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074de:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80074e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074e6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80074ea:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80074ee:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80074f2:	2200      	movs	r2, #0
 80074f4:	4b78      	ldr	r3, [pc, #480]	; (80076d8 <_dtoa_r+0x2f8>)
 80074f6:	f7f8 fe37 	bl	8000168 <__aeabi_dsub>
 80074fa:	a36b      	add	r3, pc, #428	; (adr r3, 80076a8 <_dtoa_r+0x2c8>)
 80074fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007500:	f7f8 ffea 	bl	80004d8 <__aeabi_dmul>
 8007504:	a36a      	add	r3, pc, #424	; (adr r3, 80076b0 <_dtoa_r+0x2d0>)
 8007506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750a:	f7f8 fe2f 	bl	800016c <__adddf3>
 800750e:	4606      	mov	r6, r0
 8007510:	4620      	mov	r0, r4
 8007512:	460f      	mov	r7, r1
 8007514:	f7f8 ff76 	bl	8000404 <__aeabi_i2d>
 8007518:	a367      	add	r3, pc, #412	; (adr r3, 80076b8 <_dtoa_r+0x2d8>)
 800751a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751e:	f7f8 ffdb 	bl	80004d8 <__aeabi_dmul>
 8007522:	4602      	mov	r2, r0
 8007524:	460b      	mov	r3, r1
 8007526:	4630      	mov	r0, r6
 8007528:	4639      	mov	r1, r7
 800752a:	f7f8 fe1f 	bl	800016c <__adddf3>
 800752e:	4606      	mov	r6, r0
 8007530:	460f      	mov	r7, r1
 8007532:	f7f9 fa81 	bl	8000a38 <__aeabi_d2iz>
 8007536:	2200      	movs	r2, #0
 8007538:	4681      	mov	r9, r0
 800753a:	2300      	movs	r3, #0
 800753c:	4630      	mov	r0, r6
 800753e:	4639      	mov	r1, r7
 8007540:	f7f9 fa3c 	bl	80009bc <__aeabi_dcmplt>
 8007544:	b148      	cbz	r0, 800755a <_dtoa_r+0x17a>
 8007546:	4648      	mov	r0, r9
 8007548:	f7f8 ff5c 	bl	8000404 <__aeabi_i2d>
 800754c:	4632      	mov	r2, r6
 800754e:	463b      	mov	r3, r7
 8007550:	f7f9 fa2a 	bl	80009a8 <__aeabi_dcmpeq>
 8007554:	b908      	cbnz	r0, 800755a <_dtoa_r+0x17a>
 8007556:	f109 39ff 	add.w	r9, r9, #4294967295
 800755a:	f1b9 0f16 	cmp.w	r9, #22
 800755e:	d857      	bhi.n	8007610 <_dtoa_r+0x230>
 8007560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007564:	4b5d      	ldr	r3, [pc, #372]	; (80076dc <_dtoa_r+0x2fc>)
 8007566:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800756a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756e:	f7f9 fa25 	bl	80009bc <__aeabi_dcmplt>
 8007572:	2800      	cmp	r0, #0
 8007574:	d04e      	beq.n	8007614 <_dtoa_r+0x234>
 8007576:	2300      	movs	r3, #0
 8007578:	f109 39ff 	add.w	r9, r9, #4294967295
 800757c:	930f      	str	r3, [sp, #60]	; 0x3c
 800757e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007580:	1b1c      	subs	r4, r3, r4
 8007582:	1e63      	subs	r3, r4, #1
 8007584:	9309      	str	r3, [sp, #36]	; 0x24
 8007586:	bf49      	itett	mi
 8007588:	f1c4 0301 	rsbmi	r3, r4, #1
 800758c:	2300      	movpl	r3, #0
 800758e:	9306      	strmi	r3, [sp, #24]
 8007590:	2300      	movmi	r3, #0
 8007592:	bf54      	ite	pl
 8007594:	9306      	strpl	r3, [sp, #24]
 8007596:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007598:	f1b9 0f00 	cmp.w	r9, #0
 800759c:	db3c      	blt.n	8007618 <_dtoa_r+0x238>
 800759e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075a0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80075a4:	444b      	add	r3, r9
 80075a6:	9309      	str	r3, [sp, #36]	; 0x24
 80075a8:	2300      	movs	r3, #0
 80075aa:	930a      	str	r3, [sp, #40]	; 0x28
 80075ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075ae:	2b09      	cmp	r3, #9
 80075b0:	d86c      	bhi.n	800768c <_dtoa_r+0x2ac>
 80075b2:	2b05      	cmp	r3, #5
 80075b4:	bfc4      	itt	gt
 80075b6:	3b04      	subgt	r3, #4
 80075b8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80075ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075bc:	bfc8      	it	gt
 80075be:	2400      	movgt	r4, #0
 80075c0:	f1a3 0302 	sub.w	r3, r3, #2
 80075c4:	bfd8      	it	le
 80075c6:	2401      	movle	r4, #1
 80075c8:	2b03      	cmp	r3, #3
 80075ca:	f200 808b 	bhi.w	80076e4 <_dtoa_r+0x304>
 80075ce:	e8df f003 	tbb	[pc, r3]
 80075d2:	4f2d      	.short	0x4f2d
 80075d4:	5b4d      	.short	0x5b4d
 80075d6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80075da:	441c      	add	r4, r3
 80075dc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80075e0:	2b20      	cmp	r3, #32
 80075e2:	bfc3      	ittte	gt
 80075e4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80075e8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80075ec:	fa09 f303 	lslgt.w	r3, r9, r3
 80075f0:	f1c3 0320 	rsble	r3, r3, #32
 80075f4:	bfc6      	itte	gt
 80075f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80075fa:	4318      	orrgt	r0, r3
 80075fc:	fa06 f003 	lslle.w	r0, r6, r3
 8007600:	f7f8 fef0 	bl	80003e4 <__aeabi_ui2d>
 8007604:	2301      	movs	r3, #1
 8007606:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800760a:	3c01      	subs	r4, #1
 800760c:	9313      	str	r3, [sp, #76]	; 0x4c
 800760e:	e770      	b.n	80074f2 <_dtoa_r+0x112>
 8007610:	2301      	movs	r3, #1
 8007612:	e7b3      	b.n	800757c <_dtoa_r+0x19c>
 8007614:	900f      	str	r0, [sp, #60]	; 0x3c
 8007616:	e7b2      	b.n	800757e <_dtoa_r+0x19e>
 8007618:	9b06      	ldr	r3, [sp, #24]
 800761a:	eba3 0309 	sub.w	r3, r3, r9
 800761e:	9306      	str	r3, [sp, #24]
 8007620:	f1c9 0300 	rsb	r3, r9, #0
 8007624:	930a      	str	r3, [sp, #40]	; 0x28
 8007626:	2300      	movs	r3, #0
 8007628:	930e      	str	r3, [sp, #56]	; 0x38
 800762a:	e7bf      	b.n	80075ac <_dtoa_r+0x1cc>
 800762c:	2300      	movs	r3, #0
 800762e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007630:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007632:	2b00      	cmp	r3, #0
 8007634:	dc59      	bgt.n	80076ea <_dtoa_r+0x30a>
 8007636:	f04f 0b01 	mov.w	fp, #1
 800763a:	465b      	mov	r3, fp
 800763c:	f8cd b008 	str.w	fp, [sp, #8]
 8007640:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007644:	2200      	movs	r2, #0
 8007646:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007648:	6042      	str	r2, [r0, #4]
 800764a:	2204      	movs	r2, #4
 800764c:	f102 0614 	add.w	r6, r2, #20
 8007650:	429e      	cmp	r6, r3
 8007652:	6841      	ldr	r1, [r0, #4]
 8007654:	d94f      	bls.n	80076f6 <_dtoa_r+0x316>
 8007656:	4628      	mov	r0, r5
 8007658:	f001 f842 	bl	80086e0 <_Balloc>
 800765c:	9008      	str	r0, [sp, #32]
 800765e:	2800      	cmp	r0, #0
 8007660:	d14d      	bne.n	80076fe <_dtoa_r+0x31e>
 8007662:	4602      	mov	r2, r0
 8007664:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007668:	4b1d      	ldr	r3, [pc, #116]	; (80076e0 <_dtoa_r+0x300>)
 800766a:	e6cd      	b.n	8007408 <_dtoa_r+0x28>
 800766c:	2301      	movs	r3, #1
 800766e:	e7de      	b.n	800762e <_dtoa_r+0x24e>
 8007670:	2300      	movs	r3, #0
 8007672:	930b      	str	r3, [sp, #44]	; 0x2c
 8007674:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007676:	eb09 0b03 	add.w	fp, r9, r3
 800767a:	f10b 0301 	add.w	r3, fp, #1
 800767e:	2b01      	cmp	r3, #1
 8007680:	9302      	str	r3, [sp, #8]
 8007682:	bfb8      	it	lt
 8007684:	2301      	movlt	r3, #1
 8007686:	e7dd      	b.n	8007644 <_dtoa_r+0x264>
 8007688:	2301      	movs	r3, #1
 800768a:	e7f2      	b.n	8007672 <_dtoa_r+0x292>
 800768c:	2401      	movs	r4, #1
 800768e:	2300      	movs	r3, #0
 8007690:	940b      	str	r4, [sp, #44]	; 0x2c
 8007692:	9322      	str	r3, [sp, #136]	; 0x88
 8007694:	f04f 3bff 	mov.w	fp, #4294967295
 8007698:	2200      	movs	r2, #0
 800769a:	2312      	movs	r3, #18
 800769c:	f8cd b008 	str.w	fp, [sp, #8]
 80076a0:	9223      	str	r2, [sp, #140]	; 0x8c
 80076a2:	e7cf      	b.n	8007644 <_dtoa_r+0x264>
 80076a4:	f3af 8000 	nop.w
 80076a8:	636f4361 	.word	0x636f4361
 80076ac:	3fd287a7 	.word	0x3fd287a7
 80076b0:	8b60c8b3 	.word	0x8b60c8b3
 80076b4:	3fc68a28 	.word	0x3fc68a28
 80076b8:	509f79fb 	.word	0x509f79fb
 80076bc:	3fd34413 	.word	0x3fd34413
 80076c0:	0800a996 	.word	0x0800a996
 80076c4:	0800a9ad 	.word	0x0800a9ad
 80076c8:	7ff00000 	.word	0x7ff00000
 80076cc:	0800a992 	.word	0x0800a992
 80076d0:	0800a989 	.word	0x0800a989
 80076d4:	0800a809 	.word	0x0800a809
 80076d8:	3ff80000 	.word	0x3ff80000
 80076dc:	0800ab28 	.word	0x0800ab28
 80076e0:	0800aa0c 	.word	0x0800aa0c
 80076e4:	2301      	movs	r3, #1
 80076e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80076e8:	e7d4      	b.n	8007694 <_dtoa_r+0x2b4>
 80076ea:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80076ee:	465b      	mov	r3, fp
 80076f0:	f8cd b008 	str.w	fp, [sp, #8]
 80076f4:	e7a6      	b.n	8007644 <_dtoa_r+0x264>
 80076f6:	3101      	adds	r1, #1
 80076f8:	6041      	str	r1, [r0, #4]
 80076fa:	0052      	lsls	r2, r2, #1
 80076fc:	e7a6      	b.n	800764c <_dtoa_r+0x26c>
 80076fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007700:	9a08      	ldr	r2, [sp, #32]
 8007702:	601a      	str	r2, [r3, #0]
 8007704:	9b02      	ldr	r3, [sp, #8]
 8007706:	2b0e      	cmp	r3, #14
 8007708:	f200 80a8 	bhi.w	800785c <_dtoa_r+0x47c>
 800770c:	2c00      	cmp	r4, #0
 800770e:	f000 80a5 	beq.w	800785c <_dtoa_r+0x47c>
 8007712:	f1b9 0f00 	cmp.w	r9, #0
 8007716:	dd34      	ble.n	8007782 <_dtoa_r+0x3a2>
 8007718:	4a9a      	ldr	r2, [pc, #616]	; (8007984 <_dtoa_r+0x5a4>)
 800771a:	f009 030f 	and.w	r3, r9, #15
 800771e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007722:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007726:	e9d3 3400 	ldrd	r3, r4, [r3]
 800772a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800772e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8007732:	d016      	beq.n	8007762 <_dtoa_r+0x382>
 8007734:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007738:	4b93      	ldr	r3, [pc, #588]	; (8007988 <_dtoa_r+0x5a8>)
 800773a:	2703      	movs	r7, #3
 800773c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007740:	f7f8 fff4 	bl	800072c <__aeabi_ddiv>
 8007744:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007748:	f004 040f 	and.w	r4, r4, #15
 800774c:	4e8e      	ldr	r6, [pc, #568]	; (8007988 <_dtoa_r+0x5a8>)
 800774e:	b954      	cbnz	r4, 8007766 <_dtoa_r+0x386>
 8007750:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007754:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007758:	f7f8 ffe8 	bl	800072c <__aeabi_ddiv>
 800775c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007760:	e029      	b.n	80077b6 <_dtoa_r+0x3d6>
 8007762:	2702      	movs	r7, #2
 8007764:	e7f2      	b.n	800774c <_dtoa_r+0x36c>
 8007766:	07e1      	lsls	r1, r4, #31
 8007768:	d508      	bpl.n	800777c <_dtoa_r+0x39c>
 800776a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800776e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007772:	f7f8 feb1 	bl	80004d8 <__aeabi_dmul>
 8007776:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800777a:	3701      	adds	r7, #1
 800777c:	1064      	asrs	r4, r4, #1
 800777e:	3608      	adds	r6, #8
 8007780:	e7e5      	b.n	800774e <_dtoa_r+0x36e>
 8007782:	f000 80a5 	beq.w	80078d0 <_dtoa_r+0x4f0>
 8007786:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800778a:	f1c9 0400 	rsb	r4, r9, #0
 800778e:	4b7d      	ldr	r3, [pc, #500]	; (8007984 <_dtoa_r+0x5a4>)
 8007790:	f004 020f 	and.w	r2, r4, #15
 8007794:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779c:	f7f8 fe9c 	bl	80004d8 <__aeabi_dmul>
 80077a0:	2702      	movs	r7, #2
 80077a2:	2300      	movs	r3, #0
 80077a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077a8:	4e77      	ldr	r6, [pc, #476]	; (8007988 <_dtoa_r+0x5a8>)
 80077aa:	1124      	asrs	r4, r4, #4
 80077ac:	2c00      	cmp	r4, #0
 80077ae:	f040 8084 	bne.w	80078ba <_dtoa_r+0x4da>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1d2      	bne.n	800775c <_dtoa_r+0x37c>
 80077b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 808b 	beq.w	80078d4 <_dtoa_r+0x4f4>
 80077be:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80077c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80077c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077ca:	2200      	movs	r2, #0
 80077cc:	4b6f      	ldr	r3, [pc, #444]	; (800798c <_dtoa_r+0x5ac>)
 80077ce:	f7f9 f8f5 	bl	80009bc <__aeabi_dcmplt>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d07e      	beq.n	80078d4 <_dtoa_r+0x4f4>
 80077d6:	9b02      	ldr	r3, [sp, #8]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d07b      	beq.n	80078d4 <_dtoa_r+0x4f4>
 80077dc:	f1bb 0f00 	cmp.w	fp, #0
 80077e0:	dd38      	ble.n	8007854 <_dtoa_r+0x474>
 80077e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077e6:	2200      	movs	r2, #0
 80077e8:	4b69      	ldr	r3, [pc, #420]	; (8007990 <_dtoa_r+0x5b0>)
 80077ea:	f7f8 fe75 	bl	80004d8 <__aeabi_dmul>
 80077ee:	465c      	mov	r4, fp
 80077f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077f4:	f109 38ff 	add.w	r8, r9, #4294967295
 80077f8:	3701      	adds	r7, #1
 80077fa:	4638      	mov	r0, r7
 80077fc:	f7f8 fe02 	bl	8000404 <__aeabi_i2d>
 8007800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007804:	f7f8 fe68 	bl	80004d8 <__aeabi_dmul>
 8007808:	2200      	movs	r2, #0
 800780a:	4b62      	ldr	r3, [pc, #392]	; (8007994 <_dtoa_r+0x5b4>)
 800780c:	f7f8 fcae 	bl	800016c <__adddf3>
 8007810:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007814:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007818:	9611      	str	r6, [sp, #68]	; 0x44
 800781a:	2c00      	cmp	r4, #0
 800781c:	d15d      	bne.n	80078da <_dtoa_r+0x4fa>
 800781e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007822:	2200      	movs	r2, #0
 8007824:	4b5c      	ldr	r3, [pc, #368]	; (8007998 <_dtoa_r+0x5b8>)
 8007826:	f7f8 fc9f 	bl	8000168 <__aeabi_dsub>
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007832:	4633      	mov	r3, r6
 8007834:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007836:	f7f9 f8df 	bl	80009f8 <__aeabi_dcmpgt>
 800783a:	2800      	cmp	r0, #0
 800783c:	f040 829e 	bne.w	8007d7c <_dtoa_r+0x99c>
 8007840:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007844:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007846:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800784a:	f7f9 f8b7 	bl	80009bc <__aeabi_dcmplt>
 800784e:	2800      	cmp	r0, #0
 8007850:	f040 8292 	bne.w	8007d78 <_dtoa_r+0x998>
 8007854:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007858:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800785c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800785e:	2b00      	cmp	r3, #0
 8007860:	f2c0 8153 	blt.w	8007b0a <_dtoa_r+0x72a>
 8007864:	f1b9 0f0e 	cmp.w	r9, #14
 8007868:	f300 814f 	bgt.w	8007b0a <_dtoa_r+0x72a>
 800786c:	4b45      	ldr	r3, [pc, #276]	; (8007984 <_dtoa_r+0x5a4>)
 800786e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007872:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007876:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800787a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800787c:	2b00      	cmp	r3, #0
 800787e:	f280 80db 	bge.w	8007a38 <_dtoa_r+0x658>
 8007882:	9b02      	ldr	r3, [sp, #8]
 8007884:	2b00      	cmp	r3, #0
 8007886:	f300 80d7 	bgt.w	8007a38 <_dtoa_r+0x658>
 800788a:	f040 8274 	bne.w	8007d76 <_dtoa_r+0x996>
 800788e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007892:	2200      	movs	r2, #0
 8007894:	4b40      	ldr	r3, [pc, #256]	; (8007998 <_dtoa_r+0x5b8>)
 8007896:	f7f8 fe1f 	bl	80004d8 <__aeabi_dmul>
 800789a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800789e:	f7f9 f8a1 	bl	80009e4 <__aeabi_dcmpge>
 80078a2:	9c02      	ldr	r4, [sp, #8]
 80078a4:	4626      	mov	r6, r4
 80078a6:	2800      	cmp	r0, #0
 80078a8:	f040 824a 	bne.w	8007d40 <_dtoa_r+0x960>
 80078ac:	2331      	movs	r3, #49	; 0x31
 80078ae:	9f08      	ldr	r7, [sp, #32]
 80078b0:	f109 0901 	add.w	r9, r9, #1
 80078b4:	f807 3b01 	strb.w	r3, [r7], #1
 80078b8:	e246      	b.n	8007d48 <_dtoa_r+0x968>
 80078ba:	07e2      	lsls	r2, r4, #31
 80078bc:	d505      	bpl.n	80078ca <_dtoa_r+0x4ea>
 80078be:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078c2:	f7f8 fe09 	bl	80004d8 <__aeabi_dmul>
 80078c6:	2301      	movs	r3, #1
 80078c8:	3701      	adds	r7, #1
 80078ca:	1064      	asrs	r4, r4, #1
 80078cc:	3608      	adds	r6, #8
 80078ce:	e76d      	b.n	80077ac <_dtoa_r+0x3cc>
 80078d0:	2702      	movs	r7, #2
 80078d2:	e770      	b.n	80077b6 <_dtoa_r+0x3d6>
 80078d4:	46c8      	mov	r8, r9
 80078d6:	9c02      	ldr	r4, [sp, #8]
 80078d8:	e78f      	b.n	80077fa <_dtoa_r+0x41a>
 80078da:	9908      	ldr	r1, [sp, #32]
 80078dc:	4b29      	ldr	r3, [pc, #164]	; (8007984 <_dtoa_r+0x5a4>)
 80078de:	4421      	add	r1, r4
 80078e0:	9112      	str	r1, [sp, #72]	; 0x48
 80078e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80078e8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80078ec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80078f0:	2900      	cmp	r1, #0
 80078f2:	d055      	beq.n	80079a0 <_dtoa_r+0x5c0>
 80078f4:	2000      	movs	r0, #0
 80078f6:	4929      	ldr	r1, [pc, #164]	; (800799c <_dtoa_r+0x5bc>)
 80078f8:	f7f8 ff18 	bl	800072c <__aeabi_ddiv>
 80078fc:	463b      	mov	r3, r7
 80078fe:	4632      	mov	r2, r6
 8007900:	f7f8 fc32 	bl	8000168 <__aeabi_dsub>
 8007904:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007908:	9f08      	ldr	r7, [sp, #32]
 800790a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800790e:	f7f9 f893 	bl	8000a38 <__aeabi_d2iz>
 8007912:	4604      	mov	r4, r0
 8007914:	f7f8 fd76 	bl	8000404 <__aeabi_i2d>
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007920:	f7f8 fc22 	bl	8000168 <__aeabi_dsub>
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	3430      	adds	r4, #48	; 0x30
 800792a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800792e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007932:	f807 4b01 	strb.w	r4, [r7], #1
 8007936:	f7f9 f841 	bl	80009bc <__aeabi_dcmplt>
 800793a:	2800      	cmp	r0, #0
 800793c:	d174      	bne.n	8007a28 <_dtoa_r+0x648>
 800793e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007942:	2000      	movs	r0, #0
 8007944:	4911      	ldr	r1, [pc, #68]	; (800798c <_dtoa_r+0x5ac>)
 8007946:	f7f8 fc0f 	bl	8000168 <__aeabi_dsub>
 800794a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800794e:	f7f9 f835 	bl	80009bc <__aeabi_dcmplt>
 8007952:	2800      	cmp	r0, #0
 8007954:	f040 80b6 	bne.w	8007ac4 <_dtoa_r+0x6e4>
 8007958:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800795a:	429f      	cmp	r7, r3
 800795c:	f43f af7a 	beq.w	8007854 <_dtoa_r+0x474>
 8007960:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007964:	2200      	movs	r2, #0
 8007966:	4b0a      	ldr	r3, [pc, #40]	; (8007990 <_dtoa_r+0x5b0>)
 8007968:	f7f8 fdb6 	bl	80004d8 <__aeabi_dmul>
 800796c:	2200      	movs	r2, #0
 800796e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007972:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007976:	4b06      	ldr	r3, [pc, #24]	; (8007990 <_dtoa_r+0x5b0>)
 8007978:	f7f8 fdae 	bl	80004d8 <__aeabi_dmul>
 800797c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007980:	e7c3      	b.n	800790a <_dtoa_r+0x52a>
 8007982:	bf00      	nop
 8007984:	0800ab28 	.word	0x0800ab28
 8007988:	0800ab00 	.word	0x0800ab00
 800798c:	3ff00000 	.word	0x3ff00000
 8007990:	40240000 	.word	0x40240000
 8007994:	401c0000 	.word	0x401c0000
 8007998:	40140000 	.word	0x40140000
 800799c:	3fe00000 	.word	0x3fe00000
 80079a0:	4630      	mov	r0, r6
 80079a2:	4639      	mov	r1, r7
 80079a4:	f7f8 fd98 	bl	80004d8 <__aeabi_dmul>
 80079a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80079ae:	9c08      	ldr	r4, [sp, #32]
 80079b0:	9314      	str	r3, [sp, #80]	; 0x50
 80079b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079b6:	f7f9 f83f 	bl	8000a38 <__aeabi_d2iz>
 80079ba:	9015      	str	r0, [sp, #84]	; 0x54
 80079bc:	f7f8 fd22 	bl	8000404 <__aeabi_i2d>
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079c8:	f7f8 fbce 	bl	8000168 <__aeabi_dsub>
 80079cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079ce:	4606      	mov	r6, r0
 80079d0:	3330      	adds	r3, #48	; 0x30
 80079d2:	f804 3b01 	strb.w	r3, [r4], #1
 80079d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079d8:	460f      	mov	r7, r1
 80079da:	429c      	cmp	r4, r3
 80079dc:	f04f 0200 	mov.w	r2, #0
 80079e0:	d124      	bne.n	8007a2c <_dtoa_r+0x64c>
 80079e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80079e6:	4bb3      	ldr	r3, [pc, #716]	; (8007cb4 <_dtoa_r+0x8d4>)
 80079e8:	f7f8 fbc0 	bl	800016c <__adddf3>
 80079ec:	4602      	mov	r2, r0
 80079ee:	460b      	mov	r3, r1
 80079f0:	4630      	mov	r0, r6
 80079f2:	4639      	mov	r1, r7
 80079f4:	f7f9 f800 	bl	80009f8 <__aeabi_dcmpgt>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d162      	bne.n	8007ac2 <_dtoa_r+0x6e2>
 80079fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a00:	2000      	movs	r0, #0
 8007a02:	49ac      	ldr	r1, [pc, #688]	; (8007cb4 <_dtoa_r+0x8d4>)
 8007a04:	f7f8 fbb0 	bl	8000168 <__aeabi_dsub>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	4639      	mov	r1, r7
 8007a10:	f7f8 ffd4 	bl	80009bc <__aeabi_dcmplt>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	f43f af1d 	beq.w	8007854 <_dtoa_r+0x474>
 8007a1a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007a1c:	1e7b      	subs	r3, r7, #1
 8007a1e:	9314      	str	r3, [sp, #80]	; 0x50
 8007a20:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007a24:	2b30      	cmp	r3, #48	; 0x30
 8007a26:	d0f8      	beq.n	8007a1a <_dtoa_r+0x63a>
 8007a28:	46c1      	mov	r9, r8
 8007a2a:	e03a      	b.n	8007aa2 <_dtoa_r+0x6c2>
 8007a2c:	4ba2      	ldr	r3, [pc, #648]	; (8007cb8 <_dtoa_r+0x8d8>)
 8007a2e:	f7f8 fd53 	bl	80004d8 <__aeabi_dmul>
 8007a32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a36:	e7bc      	b.n	80079b2 <_dtoa_r+0x5d2>
 8007a38:	9f08      	ldr	r7, [sp, #32]
 8007a3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a42:	f7f8 fe73 	bl	800072c <__aeabi_ddiv>
 8007a46:	f7f8 fff7 	bl	8000a38 <__aeabi_d2iz>
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	f7f8 fcda 	bl	8000404 <__aeabi_i2d>
 8007a50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a54:	f7f8 fd40 	bl	80004d8 <__aeabi_dmul>
 8007a58:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4602      	mov	r2, r0
 8007a60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a64:	f7f8 fb80 	bl	8000168 <__aeabi_dsub>
 8007a68:	f807 6b01 	strb.w	r6, [r7], #1
 8007a6c:	9e08      	ldr	r6, [sp, #32]
 8007a6e:	9b02      	ldr	r3, [sp, #8]
 8007a70:	1bbe      	subs	r6, r7, r6
 8007a72:	42b3      	cmp	r3, r6
 8007a74:	d13a      	bne.n	8007aec <_dtoa_r+0x70c>
 8007a76:	4602      	mov	r2, r0
 8007a78:	460b      	mov	r3, r1
 8007a7a:	f7f8 fb77 	bl	800016c <__adddf3>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a8a:	f7f8 ffb5 	bl	80009f8 <__aeabi_dcmpgt>
 8007a8e:	bb58      	cbnz	r0, 8007ae8 <_dtoa_r+0x708>
 8007a90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a98:	f7f8 ff86 	bl	80009a8 <__aeabi_dcmpeq>
 8007a9c:	b108      	cbz	r0, 8007aa2 <_dtoa_r+0x6c2>
 8007a9e:	07e1      	lsls	r1, r4, #31
 8007aa0:	d422      	bmi.n	8007ae8 <_dtoa_r+0x708>
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	4651      	mov	r1, sl
 8007aa6:	f000 fe5b 	bl	8008760 <_Bfree>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	703b      	strb	r3, [r7, #0]
 8007aae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007ab0:	f109 0001 	add.w	r0, r9, #1
 8007ab4:	6018      	str	r0, [r3, #0]
 8007ab6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f43f acdf 	beq.w	800747c <_dtoa_r+0x9c>
 8007abe:	601f      	str	r7, [r3, #0]
 8007ac0:	e4dc      	b.n	800747c <_dtoa_r+0x9c>
 8007ac2:	4627      	mov	r7, r4
 8007ac4:	463b      	mov	r3, r7
 8007ac6:	461f      	mov	r7, r3
 8007ac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007acc:	2a39      	cmp	r2, #57	; 0x39
 8007ace:	d107      	bne.n	8007ae0 <_dtoa_r+0x700>
 8007ad0:	9a08      	ldr	r2, [sp, #32]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d1f7      	bne.n	8007ac6 <_dtoa_r+0x6e6>
 8007ad6:	2230      	movs	r2, #48	; 0x30
 8007ad8:	9908      	ldr	r1, [sp, #32]
 8007ada:	f108 0801 	add.w	r8, r8, #1
 8007ade:	700a      	strb	r2, [r1, #0]
 8007ae0:	781a      	ldrb	r2, [r3, #0]
 8007ae2:	3201      	adds	r2, #1
 8007ae4:	701a      	strb	r2, [r3, #0]
 8007ae6:	e79f      	b.n	8007a28 <_dtoa_r+0x648>
 8007ae8:	46c8      	mov	r8, r9
 8007aea:	e7eb      	b.n	8007ac4 <_dtoa_r+0x6e4>
 8007aec:	2200      	movs	r2, #0
 8007aee:	4b72      	ldr	r3, [pc, #456]	; (8007cb8 <_dtoa_r+0x8d8>)
 8007af0:	f7f8 fcf2 	bl	80004d8 <__aeabi_dmul>
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007afc:	2200      	movs	r2, #0
 8007afe:	2300      	movs	r3, #0
 8007b00:	f7f8 ff52 	bl	80009a8 <__aeabi_dcmpeq>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	d098      	beq.n	8007a3a <_dtoa_r+0x65a>
 8007b08:	e7cb      	b.n	8007aa2 <_dtoa_r+0x6c2>
 8007b0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b0c:	2a00      	cmp	r2, #0
 8007b0e:	f000 80cd 	beq.w	8007cac <_dtoa_r+0x8cc>
 8007b12:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007b14:	2a01      	cmp	r2, #1
 8007b16:	f300 80af 	bgt.w	8007c78 <_dtoa_r+0x898>
 8007b1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b1c:	2a00      	cmp	r2, #0
 8007b1e:	f000 80a7 	beq.w	8007c70 <_dtoa_r+0x890>
 8007b22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b28:	9f06      	ldr	r7, [sp, #24]
 8007b2a:	9a06      	ldr	r2, [sp, #24]
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	441a      	add	r2, r3
 8007b30:	9206      	str	r2, [sp, #24]
 8007b32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b34:	4628      	mov	r0, r5
 8007b36:	441a      	add	r2, r3
 8007b38:	9209      	str	r2, [sp, #36]	; 0x24
 8007b3a:	f000 ff15 	bl	8008968 <__i2b>
 8007b3e:	4606      	mov	r6, r0
 8007b40:	2f00      	cmp	r7, #0
 8007b42:	dd0c      	ble.n	8007b5e <_dtoa_r+0x77e>
 8007b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	dd09      	ble.n	8007b5e <_dtoa_r+0x77e>
 8007b4a:	42bb      	cmp	r3, r7
 8007b4c:	bfa8      	it	ge
 8007b4e:	463b      	movge	r3, r7
 8007b50:	9a06      	ldr	r2, [sp, #24]
 8007b52:	1aff      	subs	r7, r7, r3
 8007b54:	1ad2      	subs	r2, r2, r3
 8007b56:	9206      	str	r2, [sp, #24]
 8007b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b60:	b1f3      	cbz	r3, 8007ba0 <_dtoa_r+0x7c0>
 8007b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 80a9 	beq.w	8007cbc <_dtoa_r+0x8dc>
 8007b6a:	2c00      	cmp	r4, #0
 8007b6c:	dd10      	ble.n	8007b90 <_dtoa_r+0x7b0>
 8007b6e:	4631      	mov	r1, r6
 8007b70:	4622      	mov	r2, r4
 8007b72:	4628      	mov	r0, r5
 8007b74:	f000 ffb2 	bl	8008adc <__pow5mult>
 8007b78:	4652      	mov	r2, sl
 8007b7a:	4601      	mov	r1, r0
 8007b7c:	4606      	mov	r6, r0
 8007b7e:	4628      	mov	r0, r5
 8007b80:	f000 ff08 	bl	8008994 <__multiply>
 8007b84:	4680      	mov	r8, r0
 8007b86:	4651      	mov	r1, sl
 8007b88:	4628      	mov	r0, r5
 8007b8a:	f000 fde9 	bl	8008760 <_Bfree>
 8007b8e:	46c2      	mov	sl, r8
 8007b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b92:	1b1a      	subs	r2, r3, r4
 8007b94:	d004      	beq.n	8007ba0 <_dtoa_r+0x7c0>
 8007b96:	4651      	mov	r1, sl
 8007b98:	4628      	mov	r0, r5
 8007b9a:	f000 ff9f 	bl	8008adc <__pow5mult>
 8007b9e:	4682      	mov	sl, r0
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	f000 fee0 	bl	8008968 <__i2b>
 8007ba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007baa:	4604      	mov	r4, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f340 8087 	ble.w	8007cc0 <_dtoa_r+0x8e0>
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	4601      	mov	r1, r0
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f000 ff90 	bl	8008adc <__pow5mult>
 8007bbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	f340 8080 	ble.w	8007cc6 <_dtoa_r+0x8e6>
 8007bc6:	f04f 0800 	mov.w	r8, #0
 8007bca:	6923      	ldr	r3, [r4, #16]
 8007bcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007bd0:	6918      	ldr	r0, [r3, #16]
 8007bd2:	f000 fe7b 	bl	80088cc <__hi0bits>
 8007bd6:	f1c0 0020 	rsb	r0, r0, #32
 8007bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bdc:	4418      	add	r0, r3
 8007bde:	f010 001f 	ands.w	r0, r0, #31
 8007be2:	f000 8092 	beq.w	8007d0a <_dtoa_r+0x92a>
 8007be6:	f1c0 0320 	rsb	r3, r0, #32
 8007bea:	2b04      	cmp	r3, #4
 8007bec:	f340 808a 	ble.w	8007d04 <_dtoa_r+0x924>
 8007bf0:	f1c0 001c 	rsb	r0, r0, #28
 8007bf4:	9b06      	ldr	r3, [sp, #24]
 8007bf6:	4407      	add	r7, r0
 8007bf8:	4403      	add	r3, r0
 8007bfa:	9306      	str	r3, [sp, #24]
 8007bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bfe:	4403      	add	r3, r0
 8007c00:	9309      	str	r3, [sp, #36]	; 0x24
 8007c02:	9b06      	ldr	r3, [sp, #24]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	dd05      	ble.n	8007c14 <_dtoa_r+0x834>
 8007c08:	4651      	mov	r1, sl
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	f000 ffbf 	bl	8008b90 <__lshift>
 8007c12:	4682      	mov	sl, r0
 8007c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	dd05      	ble.n	8007c26 <_dtoa_r+0x846>
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	4628      	mov	r0, r5
 8007c20:	f000 ffb6 	bl	8008b90 <__lshift>
 8007c24:	4604      	mov	r4, r0
 8007c26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d070      	beq.n	8007d0e <_dtoa_r+0x92e>
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	4650      	mov	r0, sl
 8007c30:	f001 f81a 	bl	8008c68 <__mcmp>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	da6a      	bge.n	8007d0e <_dtoa_r+0x92e>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	4651      	mov	r1, sl
 8007c3c:	220a      	movs	r2, #10
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f000 fdb0 	bl	80087a4 <__multadd>
 8007c44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c46:	4682      	mov	sl, r0
 8007c48:	f109 39ff 	add.w	r9, r9, #4294967295
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 8193 	beq.w	8007f78 <_dtoa_r+0xb98>
 8007c52:	4631      	mov	r1, r6
 8007c54:	2300      	movs	r3, #0
 8007c56:	220a      	movs	r2, #10
 8007c58:	4628      	mov	r0, r5
 8007c5a:	f000 fda3 	bl	80087a4 <__multadd>
 8007c5e:	f1bb 0f00 	cmp.w	fp, #0
 8007c62:	4606      	mov	r6, r0
 8007c64:	f300 8093 	bgt.w	8007d8e <_dtoa_r+0x9ae>
 8007c68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	dc57      	bgt.n	8007d1e <_dtoa_r+0x93e>
 8007c6e:	e08e      	b.n	8007d8e <_dtoa_r+0x9ae>
 8007c70:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007c72:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c76:	e756      	b.n	8007b26 <_dtoa_r+0x746>
 8007c78:	9b02      	ldr	r3, [sp, #8]
 8007c7a:	1e5c      	subs	r4, r3, #1
 8007c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c7e:	42a3      	cmp	r3, r4
 8007c80:	bfb7      	itett	lt
 8007c82:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007c84:	1b1c      	subge	r4, r3, r4
 8007c86:	1ae2      	sublt	r2, r4, r3
 8007c88:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007c8a:	bfbe      	ittt	lt
 8007c8c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007c8e:	189b      	addlt	r3, r3, r2
 8007c90:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007c92:	9b02      	ldr	r3, [sp, #8]
 8007c94:	bfb8      	it	lt
 8007c96:	2400      	movlt	r4, #0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	bfbb      	ittet	lt
 8007c9c:	9b06      	ldrlt	r3, [sp, #24]
 8007c9e:	9a02      	ldrlt	r2, [sp, #8]
 8007ca0:	9f06      	ldrge	r7, [sp, #24]
 8007ca2:	1a9f      	sublt	r7, r3, r2
 8007ca4:	bfac      	ite	ge
 8007ca6:	9b02      	ldrge	r3, [sp, #8]
 8007ca8:	2300      	movlt	r3, #0
 8007caa:	e73e      	b.n	8007b2a <_dtoa_r+0x74a>
 8007cac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007cae:	9f06      	ldr	r7, [sp, #24]
 8007cb0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007cb2:	e745      	b.n	8007b40 <_dtoa_r+0x760>
 8007cb4:	3fe00000 	.word	0x3fe00000
 8007cb8:	40240000 	.word	0x40240000
 8007cbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cbe:	e76a      	b.n	8007b96 <_dtoa_r+0x7b6>
 8007cc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	dc19      	bgt.n	8007cfa <_dtoa_r+0x91a>
 8007cc6:	9b04      	ldr	r3, [sp, #16]
 8007cc8:	b9bb      	cbnz	r3, 8007cfa <_dtoa_r+0x91a>
 8007cca:	9b05      	ldr	r3, [sp, #20]
 8007ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cd0:	b99b      	cbnz	r3, 8007cfa <_dtoa_r+0x91a>
 8007cd2:	9b05      	ldr	r3, [sp, #20]
 8007cd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cd8:	0d1b      	lsrs	r3, r3, #20
 8007cda:	051b      	lsls	r3, r3, #20
 8007cdc:	b183      	cbz	r3, 8007d00 <_dtoa_r+0x920>
 8007cde:	f04f 0801 	mov.w	r8, #1
 8007ce2:	9b06      	ldr	r3, [sp, #24]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	9306      	str	r3, [sp, #24]
 8007ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cea:	3301      	adds	r3, #1
 8007cec:	9309      	str	r3, [sp, #36]	; 0x24
 8007cee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f47f af6a 	bne.w	8007bca <_dtoa_r+0x7ea>
 8007cf6:	2001      	movs	r0, #1
 8007cf8:	e76f      	b.n	8007bda <_dtoa_r+0x7fa>
 8007cfa:	f04f 0800 	mov.w	r8, #0
 8007cfe:	e7f6      	b.n	8007cee <_dtoa_r+0x90e>
 8007d00:	4698      	mov	r8, r3
 8007d02:	e7f4      	b.n	8007cee <_dtoa_r+0x90e>
 8007d04:	f43f af7d 	beq.w	8007c02 <_dtoa_r+0x822>
 8007d08:	4618      	mov	r0, r3
 8007d0a:	301c      	adds	r0, #28
 8007d0c:	e772      	b.n	8007bf4 <_dtoa_r+0x814>
 8007d0e:	9b02      	ldr	r3, [sp, #8]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	dc36      	bgt.n	8007d82 <_dtoa_r+0x9a2>
 8007d14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	dd33      	ble.n	8007d82 <_dtoa_r+0x9a2>
 8007d1a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007d1e:	f1bb 0f00 	cmp.w	fp, #0
 8007d22:	d10d      	bne.n	8007d40 <_dtoa_r+0x960>
 8007d24:	4621      	mov	r1, r4
 8007d26:	465b      	mov	r3, fp
 8007d28:	2205      	movs	r2, #5
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f000 fd3a 	bl	80087a4 <__multadd>
 8007d30:	4601      	mov	r1, r0
 8007d32:	4604      	mov	r4, r0
 8007d34:	4650      	mov	r0, sl
 8007d36:	f000 ff97 	bl	8008c68 <__mcmp>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	f73f adb6 	bgt.w	80078ac <_dtoa_r+0x4cc>
 8007d40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d42:	9f08      	ldr	r7, [sp, #32]
 8007d44:	ea6f 0903 	mvn.w	r9, r3
 8007d48:	f04f 0800 	mov.w	r8, #0
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	4628      	mov	r0, r5
 8007d50:	f000 fd06 	bl	8008760 <_Bfree>
 8007d54:	2e00      	cmp	r6, #0
 8007d56:	f43f aea4 	beq.w	8007aa2 <_dtoa_r+0x6c2>
 8007d5a:	f1b8 0f00 	cmp.w	r8, #0
 8007d5e:	d005      	beq.n	8007d6c <_dtoa_r+0x98c>
 8007d60:	45b0      	cmp	r8, r6
 8007d62:	d003      	beq.n	8007d6c <_dtoa_r+0x98c>
 8007d64:	4641      	mov	r1, r8
 8007d66:	4628      	mov	r0, r5
 8007d68:	f000 fcfa 	bl	8008760 <_Bfree>
 8007d6c:	4631      	mov	r1, r6
 8007d6e:	4628      	mov	r0, r5
 8007d70:	f000 fcf6 	bl	8008760 <_Bfree>
 8007d74:	e695      	b.n	8007aa2 <_dtoa_r+0x6c2>
 8007d76:	2400      	movs	r4, #0
 8007d78:	4626      	mov	r6, r4
 8007d7a:	e7e1      	b.n	8007d40 <_dtoa_r+0x960>
 8007d7c:	46c1      	mov	r9, r8
 8007d7e:	4626      	mov	r6, r4
 8007d80:	e594      	b.n	80078ac <_dtoa_r+0x4cc>
 8007d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d84:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 80fc 	beq.w	8007f86 <_dtoa_r+0xba6>
 8007d8e:	2f00      	cmp	r7, #0
 8007d90:	dd05      	ble.n	8007d9e <_dtoa_r+0x9be>
 8007d92:	4631      	mov	r1, r6
 8007d94:	463a      	mov	r2, r7
 8007d96:	4628      	mov	r0, r5
 8007d98:	f000 fefa 	bl	8008b90 <__lshift>
 8007d9c:	4606      	mov	r6, r0
 8007d9e:	f1b8 0f00 	cmp.w	r8, #0
 8007da2:	d05c      	beq.n	8007e5e <_dtoa_r+0xa7e>
 8007da4:	4628      	mov	r0, r5
 8007da6:	6871      	ldr	r1, [r6, #4]
 8007da8:	f000 fc9a 	bl	80086e0 <_Balloc>
 8007dac:	4607      	mov	r7, r0
 8007dae:	b928      	cbnz	r0, 8007dbc <_dtoa_r+0x9dc>
 8007db0:	4602      	mov	r2, r0
 8007db2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007db6:	4b7e      	ldr	r3, [pc, #504]	; (8007fb0 <_dtoa_r+0xbd0>)
 8007db8:	f7ff bb26 	b.w	8007408 <_dtoa_r+0x28>
 8007dbc:	6932      	ldr	r2, [r6, #16]
 8007dbe:	f106 010c 	add.w	r1, r6, #12
 8007dc2:	3202      	adds	r2, #2
 8007dc4:	0092      	lsls	r2, r2, #2
 8007dc6:	300c      	adds	r0, #12
 8007dc8:	f7fd fd2a 	bl	8005820 <memcpy>
 8007dcc:	2201      	movs	r2, #1
 8007dce:	4639      	mov	r1, r7
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	f000 fedd 	bl	8008b90 <__lshift>
 8007dd6:	46b0      	mov	r8, r6
 8007dd8:	4606      	mov	r6, r0
 8007dda:	9b08      	ldr	r3, [sp, #32]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	9302      	str	r3, [sp, #8]
 8007de0:	9b08      	ldr	r3, [sp, #32]
 8007de2:	445b      	add	r3, fp
 8007de4:	930a      	str	r3, [sp, #40]	; 0x28
 8007de6:	9b04      	ldr	r3, [sp, #16]
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	9309      	str	r3, [sp, #36]	; 0x24
 8007dee:	9b02      	ldr	r3, [sp, #8]
 8007df0:	4621      	mov	r1, r4
 8007df2:	4650      	mov	r0, sl
 8007df4:	f103 3bff 	add.w	fp, r3, #4294967295
 8007df8:	f7ff fa64 	bl	80072c4 <quorem>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	4641      	mov	r1, r8
 8007e00:	3330      	adds	r3, #48	; 0x30
 8007e02:	9004      	str	r0, [sp, #16]
 8007e04:	4650      	mov	r0, sl
 8007e06:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e08:	f000 ff2e 	bl	8008c68 <__mcmp>
 8007e0c:	4632      	mov	r2, r6
 8007e0e:	9006      	str	r0, [sp, #24]
 8007e10:	4621      	mov	r1, r4
 8007e12:	4628      	mov	r0, r5
 8007e14:	f000 ff44 	bl	8008ca0 <__mdiff>
 8007e18:	68c2      	ldr	r2, [r0, #12]
 8007e1a:	4607      	mov	r7, r0
 8007e1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e1e:	bb02      	cbnz	r2, 8007e62 <_dtoa_r+0xa82>
 8007e20:	4601      	mov	r1, r0
 8007e22:	4650      	mov	r0, sl
 8007e24:	f000 ff20 	bl	8008c68 <__mcmp>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e2c:	4639      	mov	r1, r7
 8007e2e:	4628      	mov	r0, r5
 8007e30:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007e34:	f000 fc94 	bl	8008760 <_Bfree>
 8007e38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e3c:	9f02      	ldr	r7, [sp, #8]
 8007e3e:	ea43 0102 	orr.w	r1, r3, r2
 8007e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e44:	430b      	orrs	r3, r1
 8007e46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e48:	d10d      	bne.n	8007e66 <_dtoa_r+0xa86>
 8007e4a:	2b39      	cmp	r3, #57	; 0x39
 8007e4c:	d027      	beq.n	8007e9e <_dtoa_r+0xabe>
 8007e4e:	9a06      	ldr	r2, [sp, #24]
 8007e50:	2a00      	cmp	r2, #0
 8007e52:	dd01      	ble.n	8007e58 <_dtoa_r+0xa78>
 8007e54:	9b04      	ldr	r3, [sp, #16]
 8007e56:	3331      	adds	r3, #49	; 0x31
 8007e58:	f88b 3000 	strb.w	r3, [fp]
 8007e5c:	e776      	b.n	8007d4c <_dtoa_r+0x96c>
 8007e5e:	4630      	mov	r0, r6
 8007e60:	e7b9      	b.n	8007dd6 <_dtoa_r+0x9f6>
 8007e62:	2201      	movs	r2, #1
 8007e64:	e7e2      	b.n	8007e2c <_dtoa_r+0xa4c>
 8007e66:	9906      	ldr	r1, [sp, #24]
 8007e68:	2900      	cmp	r1, #0
 8007e6a:	db04      	blt.n	8007e76 <_dtoa_r+0xa96>
 8007e6c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007e6e:	4301      	orrs	r1, r0
 8007e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e72:	4301      	orrs	r1, r0
 8007e74:	d120      	bne.n	8007eb8 <_dtoa_r+0xad8>
 8007e76:	2a00      	cmp	r2, #0
 8007e78:	ddee      	ble.n	8007e58 <_dtoa_r+0xa78>
 8007e7a:	4651      	mov	r1, sl
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	4628      	mov	r0, r5
 8007e80:	9302      	str	r3, [sp, #8]
 8007e82:	f000 fe85 	bl	8008b90 <__lshift>
 8007e86:	4621      	mov	r1, r4
 8007e88:	4682      	mov	sl, r0
 8007e8a:	f000 feed 	bl	8008c68 <__mcmp>
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	9b02      	ldr	r3, [sp, #8]
 8007e92:	dc02      	bgt.n	8007e9a <_dtoa_r+0xaba>
 8007e94:	d1e0      	bne.n	8007e58 <_dtoa_r+0xa78>
 8007e96:	07da      	lsls	r2, r3, #31
 8007e98:	d5de      	bpl.n	8007e58 <_dtoa_r+0xa78>
 8007e9a:	2b39      	cmp	r3, #57	; 0x39
 8007e9c:	d1da      	bne.n	8007e54 <_dtoa_r+0xa74>
 8007e9e:	2339      	movs	r3, #57	; 0x39
 8007ea0:	f88b 3000 	strb.w	r3, [fp]
 8007ea4:	463b      	mov	r3, r7
 8007ea6:	461f      	mov	r7, r3
 8007ea8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007eac:	3b01      	subs	r3, #1
 8007eae:	2a39      	cmp	r2, #57	; 0x39
 8007eb0:	d050      	beq.n	8007f54 <_dtoa_r+0xb74>
 8007eb2:	3201      	adds	r2, #1
 8007eb4:	701a      	strb	r2, [r3, #0]
 8007eb6:	e749      	b.n	8007d4c <_dtoa_r+0x96c>
 8007eb8:	2a00      	cmp	r2, #0
 8007eba:	dd03      	ble.n	8007ec4 <_dtoa_r+0xae4>
 8007ebc:	2b39      	cmp	r3, #57	; 0x39
 8007ebe:	d0ee      	beq.n	8007e9e <_dtoa_r+0xabe>
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	e7c9      	b.n	8007e58 <_dtoa_r+0xa78>
 8007ec4:	9a02      	ldr	r2, [sp, #8]
 8007ec6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007ec8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007ecc:	428a      	cmp	r2, r1
 8007ece:	d02a      	beq.n	8007f26 <_dtoa_r+0xb46>
 8007ed0:	4651      	mov	r1, sl
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	220a      	movs	r2, #10
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f000 fc64 	bl	80087a4 <__multadd>
 8007edc:	45b0      	cmp	r8, r6
 8007ede:	4682      	mov	sl, r0
 8007ee0:	f04f 0300 	mov.w	r3, #0
 8007ee4:	f04f 020a 	mov.w	r2, #10
 8007ee8:	4641      	mov	r1, r8
 8007eea:	4628      	mov	r0, r5
 8007eec:	d107      	bne.n	8007efe <_dtoa_r+0xb1e>
 8007eee:	f000 fc59 	bl	80087a4 <__multadd>
 8007ef2:	4680      	mov	r8, r0
 8007ef4:	4606      	mov	r6, r0
 8007ef6:	9b02      	ldr	r3, [sp, #8]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	9302      	str	r3, [sp, #8]
 8007efc:	e777      	b.n	8007dee <_dtoa_r+0xa0e>
 8007efe:	f000 fc51 	bl	80087a4 <__multadd>
 8007f02:	4631      	mov	r1, r6
 8007f04:	4680      	mov	r8, r0
 8007f06:	2300      	movs	r3, #0
 8007f08:	220a      	movs	r2, #10
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	f000 fc4a 	bl	80087a4 <__multadd>
 8007f10:	4606      	mov	r6, r0
 8007f12:	e7f0      	b.n	8007ef6 <_dtoa_r+0xb16>
 8007f14:	f1bb 0f00 	cmp.w	fp, #0
 8007f18:	bfcc      	ite	gt
 8007f1a:	465f      	movgt	r7, fp
 8007f1c:	2701      	movle	r7, #1
 8007f1e:	f04f 0800 	mov.w	r8, #0
 8007f22:	9a08      	ldr	r2, [sp, #32]
 8007f24:	4417      	add	r7, r2
 8007f26:	4651      	mov	r1, sl
 8007f28:	2201      	movs	r2, #1
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	9302      	str	r3, [sp, #8]
 8007f2e:	f000 fe2f 	bl	8008b90 <__lshift>
 8007f32:	4621      	mov	r1, r4
 8007f34:	4682      	mov	sl, r0
 8007f36:	f000 fe97 	bl	8008c68 <__mcmp>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	dcb2      	bgt.n	8007ea4 <_dtoa_r+0xac4>
 8007f3e:	d102      	bne.n	8007f46 <_dtoa_r+0xb66>
 8007f40:	9b02      	ldr	r3, [sp, #8]
 8007f42:	07db      	lsls	r3, r3, #31
 8007f44:	d4ae      	bmi.n	8007ea4 <_dtoa_r+0xac4>
 8007f46:	463b      	mov	r3, r7
 8007f48:	461f      	mov	r7, r3
 8007f4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f4e:	2a30      	cmp	r2, #48	; 0x30
 8007f50:	d0fa      	beq.n	8007f48 <_dtoa_r+0xb68>
 8007f52:	e6fb      	b.n	8007d4c <_dtoa_r+0x96c>
 8007f54:	9a08      	ldr	r2, [sp, #32]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d1a5      	bne.n	8007ea6 <_dtoa_r+0xac6>
 8007f5a:	2331      	movs	r3, #49	; 0x31
 8007f5c:	f109 0901 	add.w	r9, r9, #1
 8007f60:	7013      	strb	r3, [r2, #0]
 8007f62:	e6f3      	b.n	8007d4c <_dtoa_r+0x96c>
 8007f64:	4b13      	ldr	r3, [pc, #76]	; (8007fb4 <_dtoa_r+0xbd4>)
 8007f66:	f7ff baa7 	b.w	80074b8 <_dtoa_r+0xd8>
 8007f6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f47f aa80 	bne.w	8007472 <_dtoa_r+0x92>
 8007f72:	4b11      	ldr	r3, [pc, #68]	; (8007fb8 <_dtoa_r+0xbd8>)
 8007f74:	f7ff baa0 	b.w	80074b8 <_dtoa_r+0xd8>
 8007f78:	f1bb 0f00 	cmp.w	fp, #0
 8007f7c:	dc03      	bgt.n	8007f86 <_dtoa_r+0xba6>
 8007f7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	f73f aecc 	bgt.w	8007d1e <_dtoa_r+0x93e>
 8007f86:	9f08      	ldr	r7, [sp, #32]
 8007f88:	4621      	mov	r1, r4
 8007f8a:	4650      	mov	r0, sl
 8007f8c:	f7ff f99a 	bl	80072c4 <quorem>
 8007f90:	9a08      	ldr	r2, [sp, #32]
 8007f92:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007f96:	f807 3b01 	strb.w	r3, [r7], #1
 8007f9a:	1aba      	subs	r2, r7, r2
 8007f9c:	4593      	cmp	fp, r2
 8007f9e:	ddb9      	ble.n	8007f14 <_dtoa_r+0xb34>
 8007fa0:	4651      	mov	r1, sl
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	220a      	movs	r2, #10
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	f000 fbfc 	bl	80087a4 <__multadd>
 8007fac:	4682      	mov	sl, r0
 8007fae:	e7eb      	b.n	8007f88 <_dtoa_r+0xba8>
 8007fb0:	0800aa0c 	.word	0x0800aa0c
 8007fb4:	0800a808 	.word	0x0800a808
 8007fb8:	0800a989 	.word	0x0800a989

08007fbc <rshift>:
 8007fbc:	6903      	ldr	r3, [r0, #16]
 8007fbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007fc2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007fc6:	f100 0414 	add.w	r4, r0, #20
 8007fca:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007fce:	dd46      	ble.n	800805e <rshift+0xa2>
 8007fd0:	f011 011f 	ands.w	r1, r1, #31
 8007fd4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007fd8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007fdc:	d10c      	bne.n	8007ff8 <rshift+0x3c>
 8007fde:	4629      	mov	r1, r5
 8007fe0:	f100 0710 	add.w	r7, r0, #16
 8007fe4:	42b1      	cmp	r1, r6
 8007fe6:	d335      	bcc.n	8008054 <rshift+0x98>
 8007fe8:	1a9b      	subs	r3, r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	1eea      	subs	r2, r5, #3
 8007fee:	4296      	cmp	r6, r2
 8007ff0:	bf38      	it	cc
 8007ff2:	2300      	movcc	r3, #0
 8007ff4:	4423      	add	r3, r4
 8007ff6:	e015      	b.n	8008024 <rshift+0x68>
 8007ff8:	46a1      	mov	r9, r4
 8007ffa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007ffe:	f1c1 0820 	rsb	r8, r1, #32
 8008002:	40cf      	lsrs	r7, r1
 8008004:	f105 0e04 	add.w	lr, r5, #4
 8008008:	4576      	cmp	r6, lr
 800800a:	46f4      	mov	ip, lr
 800800c:	d816      	bhi.n	800803c <rshift+0x80>
 800800e:	1a9b      	subs	r3, r3, r2
 8008010:	009a      	lsls	r2, r3, #2
 8008012:	3a04      	subs	r2, #4
 8008014:	3501      	adds	r5, #1
 8008016:	42ae      	cmp	r6, r5
 8008018:	bf38      	it	cc
 800801a:	2200      	movcc	r2, #0
 800801c:	18a3      	adds	r3, r4, r2
 800801e:	50a7      	str	r7, [r4, r2]
 8008020:	b107      	cbz	r7, 8008024 <rshift+0x68>
 8008022:	3304      	adds	r3, #4
 8008024:	42a3      	cmp	r3, r4
 8008026:	eba3 0204 	sub.w	r2, r3, r4
 800802a:	bf08      	it	eq
 800802c:	2300      	moveq	r3, #0
 800802e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008032:	6102      	str	r2, [r0, #16]
 8008034:	bf08      	it	eq
 8008036:	6143      	streq	r3, [r0, #20]
 8008038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800803c:	f8dc c000 	ldr.w	ip, [ip]
 8008040:	fa0c fc08 	lsl.w	ip, ip, r8
 8008044:	ea4c 0707 	orr.w	r7, ip, r7
 8008048:	f849 7b04 	str.w	r7, [r9], #4
 800804c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008050:	40cf      	lsrs	r7, r1
 8008052:	e7d9      	b.n	8008008 <rshift+0x4c>
 8008054:	f851 cb04 	ldr.w	ip, [r1], #4
 8008058:	f847 cf04 	str.w	ip, [r7, #4]!
 800805c:	e7c2      	b.n	8007fe4 <rshift+0x28>
 800805e:	4623      	mov	r3, r4
 8008060:	e7e0      	b.n	8008024 <rshift+0x68>

08008062 <__hexdig_fun>:
 8008062:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008066:	2b09      	cmp	r3, #9
 8008068:	d802      	bhi.n	8008070 <__hexdig_fun+0xe>
 800806a:	3820      	subs	r0, #32
 800806c:	b2c0      	uxtb	r0, r0
 800806e:	4770      	bx	lr
 8008070:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008074:	2b05      	cmp	r3, #5
 8008076:	d801      	bhi.n	800807c <__hexdig_fun+0x1a>
 8008078:	3847      	subs	r0, #71	; 0x47
 800807a:	e7f7      	b.n	800806c <__hexdig_fun+0xa>
 800807c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008080:	2b05      	cmp	r3, #5
 8008082:	d801      	bhi.n	8008088 <__hexdig_fun+0x26>
 8008084:	3827      	subs	r0, #39	; 0x27
 8008086:	e7f1      	b.n	800806c <__hexdig_fun+0xa>
 8008088:	2000      	movs	r0, #0
 800808a:	4770      	bx	lr

0800808c <__gethex>:
 800808c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008090:	b08b      	sub	sp, #44	; 0x2c
 8008092:	9306      	str	r3, [sp, #24]
 8008094:	4bb9      	ldr	r3, [pc, #740]	; (800837c <__gethex+0x2f0>)
 8008096:	9002      	str	r0, [sp, #8]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	468b      	mov	fp, r1
 800809c:	4618      	mov	r0, r3
 800809e:	4690      	mov	r8, r2
 80080a0:	9303      	str	r3, [sp, #12]
 80080a2:	f7f8 f855 	bl	8000150 <strlen>
 80080a6:	4682      	mov	sl, r0
 80080a8:	9b03      	ldr	r3, [sp, #12]
 80080aa:	f8db 2000 	ldr.w	r2, [fp]
 80080ae:	4403      	add	r3, r0
 80080b0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80080b4:	9307      	str	r3, [sp, #28]
 80080b6:	1c93      	adds	r3, r2, #2
 80080b8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80080bc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80080c0:	32fe      	adds	r2, #254	; 0xfe
 80080c2:	18d1      	adds	r1, r2, r3
 80080c4:	461f      	mov	r7, r3
 80080c6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80080ca:	9101      	str	r1, [sp, #4]
 80080cc:	2830      	cmp	r0, #48	; 0x30
 80080ce:	d0f8      	beq.n	80080c2 <__gethex+0x36>
 80080d0:	f7ff ffc7 	bl	8008062 <__hexdig_fun>
 80080d4:	4604      	mov	r4, r0
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d13a      	bne.n	8008150 <__gethex+0xc4>
 80080da:	4652      	mov	r2, sl
 80080dc:	4638      	mov	r0, r7
 80080de:	9903      	ldr	r1, [sp, #12]
 80080e0:	f001 f9dc 	bl	800949c <strncmp>
 80080e4:	4605      	mov	r5, r0
 80080e6:	2800      	cmp	r0, #0
 80080e8:	d166      	bne.n	80081b8 <__gethex+0x12c>
 80080ea:	f817 000a 	ldrb.w	r0, [r7, sl]
 80080ee:	eb07 060a 	add.w	r6, r7, sl
 80080f2:	f7ff ffb6 	bl	8008062 <__hexdig_fun>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d060      	beq.n	80081bc <__gethex+0x130>
 80080fa:	4633      	mov	r3, r6
 80080fc:	7818      	ldrb	r0, [r3, #0]
 80080fe:	461f      	mov	r7, r3
 8008100:	2830      	cmp	r0, #48	; 0x30
 8008102:	f103 0301 	add.w	r3, r3, #1
 8008106:	d0f9      	beq.n	80080fc <__gethex+0x70>
 8008108:	f7ff ffab 	bl	8008062 <__hexdig_fun>
 800810c:	2301      	movs	r3, #1
 800810e:	fab0 f480 	clz	r4, r0
 8008112:	4635      	mov	r5, r6
 8008114:	0964      	lsrs	r4, r4, #5
 8008116:	9301      	str	r3, [sp, #4]
 8008118:	463a      	mov	r2, r7
 800811a:	4616      	mov	r6, r2
 800811c:	7830      	ldrb	r0, [r6, #0]
 800811e:	3201      	adds	r2, #1
 8008120:	f7ff ff9f 	bl	8008062 <__hexdig_fun>
 8008124:	2800      	cmp	r0, #0
 8008126:	d1f8      	bne.n	800811a <__gethex+0x8e>
 8008128:	4652      	mov	r2, sl
 800812a:	4630      	mov	r0, r6
 800812c:	9903      	ldr	r1, [sp, #12]
 800812e:	f001 f9b5 	bl	800949c <strncmp>
 8008132:	b980      	cbnz	r0, 8008156 <__gethex+0xca>
 8008134:	b94d      	cbnz	r5, 800814a <__gethex+0xbe>
 8008136:	eb06 050a 	add.w	r5, r6, sl
 800813a:	462a      	mov	r2, r5
 800813c:	4616      	mov	r6, r2
 800813e:	7830      	ldrb	r0, [r6, #0]
 8008140:	3201      	adds	r2, #1
 8008142:	f7ff ff8e 	bl	8008062 <__hexdig_fun>
 8008146:	2800      	cmp	r0, #0
 8008148:	d1f8      	bne.n	800813c <__gethex+0xb0>
 800814a:	1bad      	subs	r5, r5, r6
 800814c:	00ad      	lsls	r5, r5, #2
 800814e:	e004      	b.n	800815a <__gethex+0xce>
 8008150:	2400      	movs	r4, #0
 8008152:	4625      	mov	r5, r4
 8008154:	e7e0      	b.n	8008118 <__gethex+0x8c>
 8008156:	2d00      	cmp	r5, #0
 8008158:	d1f7      	bne.n	800814a <__gethex+0xbe>
 800815a:	7833      	ldrb	r3, [r6, #0]
 800815c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008160:	2b50      	cmp	r3, #80	; 0x50
 8008162:	d139      	bne.n	80081d8 <__gethex+0x14c>
 8008164:	7873      	ldrb	r3, [r6, #1]
 8008166:	2b2b      	cmp	r3, #43	; 0x2b
 8008168:	d02a      	beq.n	80081c0 <__gethex+0x134>
 800816a:	2b2d      	cmp	r3, #45	; 0x2d
 800816c:	d02c      	beq.n	80081c8 <__gethex+0x13c>
 800816e:	f04f 0900 	mov.w	r9, #0
 8008172:	1c71      	adds	r1, r6, #1
 8008174:	7808      	ldrb	r0, [r1, #0]
 8008176:	f7ff ff74 	bl	8008062 <__hexdig_fun>
 800817a:	1e43      	subs	r3, r0, #1
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b18      	cmp	r3, #24
 8008180:	d82a      	bhi.n	80081d8 <__gethex+0x14c>
 8008182:	f1a0 0210 	sub.w	r2, r0, #16
 8008186:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800818a:	f7ff ff6a 	bl	8008062 <__hexdig_fun>
 800818e:	1e43      	subs	r3, r0, #1
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b18      	cmp	r3, #24
 8008194:	d91b      	bls.n	80081ce <__gethex+0x142>
 8008196:	f1b9 0f00 	cmp.w	r9, #0
 800819a:	d000      	beq.n	800819e <__gethex+0x112>
 800819c:	4252      	negs	r2, r2
 800819e:	4415      	add	r5, r2
 80081a0:	f8cb 1000 	str.w	r1, [fp]
 80081a4:	b1d4      	cbz	r4, 80081dc <__gethex+0x150>
 80081a6:	9b01      	ldr	r3, [sp, #4]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	bf14      	ite	ne
 80081ac:	2700      	movne	r7, #0
 80081ae:	2706      	moveq	r7, #6
 80081b0:	4638      	mov	r0, r7
 80081b2:	b00b      	add	sp, #44	; 0x2c
 80081b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b8:	463e      	mov	r6, r7
 80081ba:	4625      	mov	r5, r4
 80081bc:	2401      	movs	r4, #1
 80081be:	e7cc      	b.n	800815a <__gethex+0xce>
 80081c0:	f04f 0900 	mov.w	r9, #0
 80081c4:	1cb1      	adds	r1, r6, #2
 80081c6:	e7d5      	b.n	8008174 <__gethex+0xe8>
 80081c8:	f04f 0901 	mov.w	r9, #1
 80081cc:	e7fa      	b.n	80081c4 <__gethex+0x138>
 80081ce:	230a      	movs	r3, #10
 80081d0:	fb03 0202 	mla	r2, r3, r2, r0
 80081d4:	3a10      	subs	r2, #16
 80081d6:	e7d6      	b.n	8008186 <__gethex+0xfa>
 80081d8:	4631      	mov	r1, r6
 80081da:	e7e1      	b.n	80081a0 <__gethex+0x114>
 80081dc:	4621      	mov	r1, r4
 80081de:	1bf3      	subs	r3, r6, r7
 80081e0:	3b01      	subs	r3, #1
 80081e2:	2b07      	cmp	r3, #7
 80081e4:	dc0a      	bgt.n	80081fc <__gethex+0x170>
 80081e6:	9802      	ldr	r0, [sp, #8]
 80081e8:	f000 fa7a 	bl	80086e0 <_Balloc>
 80081ec:	4604      	mov	r4, r0
 80081ee:	b940      	cbnz	r0, 8008202 <__gethex+0x176>
 80081f0:	4602      	mov	r2, r0
 80081f2:	21de      	movs	r1, #222	; 0xde
 80081f4:	4b62      	ldr	r3, [pc, #392]	; (8008380 <__gethex+0x2f4>)
 80081f6:	4863      	ldr	r0, [pc, #396]	; (8008384 <__gethex+0x2f8>)
 80081f8:	f001 f970 	bl	80094dc <__assert_func>
 80081fc:	3101      	adds	r1, #1
 80081fe:	105b      	asrs	r3, r3, #1
 8008200:	e7ef      	b.n	80081e2 <__gethex+0x156>
 8008202:	f04f 0b00 	mov.w	fp, #0
 8008206:	f100 0914 	add.w	r9, r0, #20
 800820a:	f1ca 0301 	rsb	r3, sl, #1
 800820e:	f8cd 9010 	str.w	r9, [sp, #16]
 8008212:	f8cd b004 	str.w	fp, [sp, #4]
 8008216:	9308      	str	r3, [sp, #32]
 8008218:	42b7      	cmp	r7, r6
 800821a:	d33f      	bcc.n	800829c <__gethex+0x210>
 800821c:	9f04      	ldr	r7, [sp, #16]
 800821e:	9b01      	ldr	r3, [sp, #4]
 8008220:	f847 3b04 	str.w	r3, [r7], #4
 8008224:	eba7 0709 	sub.w	r7, r7, r9
 8008228:	10bf      	asrs	r7, r7, #2
 800822a:	6127      	str	r7, [r4, #16]
 800822c:	4618      	mov	r0, r3
 800822e:	f000 fb4d 	bl	80088cc <__hi0bits>
 8008232:	017f      	lsls	r7, r7, #5
 8008234:	f8d8 6000 	ldr.w	r6, [r8]
 8008238:	1a3f      	subs	r7, r7, r0
 800823a:	42b7      	cmp	r7, r6
 800823c:	dd62      	ble.n	8008304 <__gethex+0x278>
 800823e:	1bbf      	subs	r7, r7, r6
 8008240:	4639      	mov	r1, r7
 8008242:	4620      	mov	r0, r4
 8008244:	f000 fee3 	bl	800900e <__any_on>
 8008248:	4682      	mov	sl, r0
 800824a:	b1a8      	cbz	r0, 8008278 <__gethex+0x1ec>
 800824c:	f04f 0a01 	mov.w	sl, #1
 8008250:	1e7b      	subs	r3, r7, #1
 8008252:	1159      	asrs	r1, r3, #5
 8008254:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008258:	f003 021f 	and.w	r2, r3, #31
 800825c:	fa0a f202 	lsl.w	r2, sl, r2
 8008260:	420a      	tst	r2, r1
 8008262:	d009      	beq.n	8008278 <__gethex+0x1ec>
 8008264:	4553      	cmp	r3, sl
 8008266:	dd05      	ble.n	8008274 <__gethex+0x1e8>
 8008268:	4620      	mov	r0, r4
 800826a:	1eb9      	subs	r1, r7, #2
 800826c:	f000 fecf 	bl	800900e <__any_on>
 8008270:	2800      	cmp	r0, #0
 8008272:	d144      	bne.n	80082fe <__gethex+0x272>
 8008274:	f04f 0a02 	mov.w	sl, #2
 8008278:	4639      	mov	r1, r7
 800827a:	4620      	mov	r0, r4
 800827c:	f7ff fe9e 	bl	8007fbc <rshift>
 8008280:	443d      	add	r5, r7
 8008282:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008286:	42ab      	cmp	r3, r5
 8008288:	da4a      	bge.n	8008320 <__gethex+0x294>
 800828a:	4621      	mov	r1, r4
 800828c:	9802      	ldr	r0, [sp, #8]
 800828e:	f000 fa67 	bl	8008760 <_Bfree>
 8008292:	2300      	movs	r3, #0
 8008294:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008296:	27a3      	movs	r7, #163	; 0xa3
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	e789      	b.n	80081b0 <__gethex+0x124>
 800829c:	1e73      	subs	r3, r6, #1
 800829e:	9a07      	ldr	r2, [sp, #28]
 80082a0:	9305      	str	r3, [sp, #20]
 80082a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d019      	beq.n	80082de <__gethex+0x252>
 80082aa:	f1bb 0f20 	cmp.w	fp, #32
 80082ae:	d107      	bne.n	80082c0 <__gethex+0x234>
 80082b0:	9b04      	ldr	r3, [sp, #16]
 80082b2:	9a01      	ldr	r2, [sp, #4]
 80082b4:	f843 2b04 	str.w	r2, [r3], #4
 80082b8:	9304      	str	r3, [sp, #16]
 80082ba:	2300      	movs	r3, #0
 80082bc:	469b      	mov	fp, r3
 80082be:	9301      	str	r3, [sp, #4]
 80082c0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80082c4:	f7ff fecd 	bl	8008062 <__hexdig_fun>
 80082c8:	9b01      	ldr	r3, [sp, #4]
 80082ca:	f000 000f 	and.w	r0, r0, #15
 80082ce:	fa00 f00b 	lsl.w	r0, r0, fp
 80082d2:	4303      	orrs	r3, r0
 80082d4:	9301      	str	r3, [sp, #4]
 80082d6:	f10b 0b04 	add.w	fp, fp, #4
 80082da:	9b05      	ldr	r3, [sp, #20]
 80082dc:	e00d      	b.n	80082fa <__gethex+0x26e>
 80082de:	9b05      	ldr	r3, [sp, #20]
 80082e0:	9a08      	ldr	r2, [sp, #32]
 80082e2:	4413      	add	r3, r2
 80082e4:	42bb      	cmp	r3, r7
 80082e6:	d3e0      	bcc.n	80082aa <__gethex+0x21e>
 80082e8:	4618      	mov	r0, r3
 80082ea:	4652      	mov	r2, sl
 80082ec:	9903      	ldr	r1, [sp, #12]
 80082ee:	9309      	str	r3, [sp, #36]	; 0x24
 80082f0:	f001 f8d4 	bl	800949c <strncmp>
 80082f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d1d7      	bne.n	80082aa <__gethex+0x21e>
 80082fa:	461e      	mov	r6, r3
 80082fc:	e78c      	b.n	8008218 <__gethex+0x18c>
 80082fe:	f04f 0a03 	mov.w	sl, #3
 8008302:	e7b9      	b.n	8008278 <__gethex+0x1ec>
 8008304:	da09      	bge.n	800831a <__gethex+0x28e>
 8008306:	1bf7      	subs	r7, r6, r7
 8008308:	4621      	mov	r1, r4
 800830a:	463a      	mov	r2, r7
 800830c:	9802      	ldr	r0, [sp, #8]
 800830e:	f000 fc3f 	bl	8008b90 <__lshift>
 8008312:	4604      	mov	r4, r0
 8008314:	1bed      	subs	r5, r5, r7
 8008316:	f100 0914 	add.w	r9, r0, #20
 800831a:	f04f 0a00 	mov.w	sl, #0
 800831e:	e7b0      	b.n	8008282 <__gethex+0x1f6>
 8008320:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008324:	42a8      	cmp	r0, r5
 8008326:	dd71      	ble.n	800840c <__gethex+0x380>
 8008328:	1b45      	subs	r5, r0, r5
 800832a:	42ae      	cmp	r6, r5
 800832c:	dc34      	bgt.n	8008398 <__gethex+0x30c>
 800832e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008332:	2b02      	cmp	r3, #2
 8008334:	d028      	beq.n	8008388 <__gethex+0x2fc>
 8008336:	2b03      	cmp	r3, #3
 8008338:	d02a      	beq.n	8008390 <__gethex+0x304>
 800833a:	2b01      	cmp	r3, #1
 800833c:	d115      	bne.n	800836a <__gethex+0x2de>
 800833e:	42ae      	cmp	r6, r5
 8008340:	d113      	bne.n	800836a <__gethex+0x2de>
 8008342:	2e01      	cmp	r6, #1
 8008344:	d10b      	bne.n	800835e <__gethex+0x2d2>
 8008346:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800834a:	9a06      	ldr	r2, [sp, #24]
 800834c:	2762      	movs	r7, #98	; 0x62
 800834e:	6013      	str	r3, [r2, #0]
 8008350:	2301      	movs	r3, #1
 8008352:	6123      	str	r3, [r4, #16]
 8008354:	f8c9 3000 	str.w	r3, [r9]
 8008358:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800835a:	601c      	str	r4, [r3, #0]
 800835c:	e728      	b.n	80081b0 <__gethex+0x124>
 800835e:	4620      	mov	r0, r4
 8008360:	1e71      	subs	r1, r6, #1
 8008362:	f000 fe54 	bl	800900e <__any_on>
 8008366:	2800      	cmp	r0, #0
 8008368:	d1ed      	bne.n	8008346 <__gethex+0x2ba>
 800836a:	4621      	mov	r1, r4
 800836c:	9802      	ldr	r0, [sp, #8]
 800836e:	f000 f9f7 	bl	8008760 <_Bfree>
 8008372:	2300      	movs	r3, #0
 8008374:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008376:	2750      	movs	r7, #80	; 0x50
 8008378:	6013      	str	r3, [r2, #0]
 800837a:	e719      	b.n	80081b0 <__gethex+0x124>
 800837c:	0800aa88 	.word	0x0800aa88
 8008380:	0800aa0c 	.word	0x0800aa0c
 8008384:	0800aa1d 	.word	0x0800aa1d
 8008388:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1ed      	bne.n	800836a <__gethex+0x2de>
 800838e:	e7da      	b.n	8008346 <__gethex+0x2ba>
 8008390:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1d7      	bne.n	8008346 <__gethex+0x2ba>
 8008396:	e7e8      	b.n	800836a <__gethex+0x2de>
 8008398:	1e6f      	subs	r7, r5, #1
 800839a:	f1ba 0f00 	cmp.w	sl, #0
 800839e:	d132      	bne.n	8008406 <__gethex+0x37a>
 80083a0:	b127      	cbz	r7, 80083ac <__gethex+0x320>
 80083a2:	4639      	mov	r1, r7
 80083a4:	4620      	mov	r0, r4
 80083a6:	f000 fe32 	bl	800900e <__any_on>
 80083aa:	4682      	mov	sl, r0
 80083ac:	2101      	movs	r1, #1
 80083ae:	117b      	asrs	r3, r7, #5
 80083b0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80083b4:	f007 071f 	and.w	r7, r7, #31
 80083b8:	fa01 f707 	lsl.w	r7, r1, r7
 80083bc:	421f      	tst	r7, r3
 80083be:	f04f 0702 	mov.w	r7, #2
 80083c2:	4629      	mov	r1, r5
 80083c4:	4620      	mov	r0, r4
 80083c6:	bf18      	it	ne
 80083c8:	f04a 0a02 	orrne.w	sl, sl, #2
 80083cc:	1b76      	subs	r6, r6, r5
 80083ce:	f7ff fdf5 	bl	8007fbc <rshift>
 80083d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80083d6:	f1ba 0f00 	cmp.w	sl, #0
 80083da:	d048      	beq.n	800846e <__gethex+0x3e2>
 80083dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d015      	beq.n	8008410 <__gethex+0x384>
 80083e4:	2b03      	cmp	r3, #3
 80083e6:	d017      	beq.n	8008418 <__gethex+0x38c>
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d109      	bne.n	8008400 <__gethex+0x374>
 80083ec:	f01a 0f02 	tst.w	sl, #2
 80083f0:	d006      	beq.n	8008400 <__gethex+0x374>
 80083f2:	f8d9 0000 	ldr.w	r0, [r9]
 80083f6:	ea4a 0a00 	orr.w	sl, sl, r0
 80083fa:	f01a 0f01 	tst.w	sl, #1
 80083fe:	d10e      	bne.n	800841e <__gethex+0x392>
 8008400:	f047 0710 	orr.w	r7, r7, #16
 8008404:	e033      	b.n	800846e <__gethex+0x3e2>
 8008406:	f04f 0a01 	mov.w	sl, #1
 800840a:	e7cf      	b.n	80083ac <__gethex+0x320>
 800840c:	2701      	movs	r7, #1
 800840e:	e7e2      	b.n	80083d6 <__gethex+0x34a>
 8008410:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008412:	f1c3 0301 	rsb	r3, r3, #1
 8008416:	9315      	str	r3, [sp, #84]	; 0x54
 8008418:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800841a:	2b00      	cmp	r3, #0
 800841c:	d0f0      	beq.n	8008400 <__gethex+0x374>
 800841e:	f04f 0c00 	mov.w	ip, #0
 8008422:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008426:	f104 0314 	add.w	r3, r4, #20
 800842a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800842e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008432:	4618      	mov	r0, r3
 8008434:	f853 2b04 	ldr.w	r2, [r3], #4
 8008438:	f1b2 3fff 	cmp.w	r2, #4294967295
 800843c:	d01c      	beq.n	8008478 <__gethex+0x3ec>
 800843e:	3201      	adds	r2, #1
 8008440:	6002      	str	r2, [r0, #0]
 8008442:	2f02      	cmp	r7, #2
 8008444:	f104 0314 	add.w	r3, r4, #20
 8008448:	d13d      	bne.n	80084c6 <__gethex+0x43a>
 800844a:	f8d8 2000 	ldr.w	r2, [r8]
 800844e:	3a01      	subs	r2, #1
 8008450:	42b2      	cmp	r2, r6
 8008452:	d10a      	bne.n	800846a <__gethex+0x3de>
 8008454:	2201      	movs	r2, #1
 8008456:	1171      	asrs	r1, r6, #5
 8008458:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800845c:	f006 061f 	and.w	r6, r6, #31
 8008460:	fa02 f606 	lsl.w	r6, r2, r6
 8008464:	421e      	tst	r6, r3
 8008466:	bf18      	it	ne
 8008468:	4617      	movne	r7, r2
 800846a:	f047 0720 	orr.w	r7, r7, #32
 800846e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008470:	601c      	str	r4, [r3, #0]
 8008472:	9b06      	ldr	r3, [sp, #24]
 8008474:	601d      	str	r5, [r3, #0]
 8008476:	e69b      	b.n	80081b0 <__gethex+0x124>
 8008478:	4299      	cmp	r1, r3
 800847a:	f843 cc04 	str.w	ip, [r3, #-4]
 800847e:	d8d8      	bhi.n	8008432 <__gethex+0x3a6>
 8008480:	68a3      	ldr	r3, [r4, #8]
 8008482:	459b      	cmp	fp, r3
 8008484:	db17      	blt.n	80084b6 <__gethex+0x42a>
 8008486:	6861      	ldr	r1, [r4, #4]
 8008488:	9802      	ldr	r0, [sp, #8]
 800848a:	3101      	adds	r1, #1
 800848c:	f000 f928 	bl	80086e0 <_Balloc>
 8008490:	4681      	mov	r9, r0
 8008492:	b918      	cbnz	r0, 800849c <__gethex+0x410>
 8008494:	4602      	mov	r2, r0
 8008496:	2184      	movs	r1, #132	; 0x84
 8008498:	4b19      	ldr	r3, [pc, #100]	; (8008500 <__gethex+0x474>)
 800849a:	e6ac      	b.n	80081f6 <__gethex+0x16a>
 800849c:	6922      	ldr	r2, [r4, #16]
 800849e:	f104 010c 	add.w	r1, r4, #12
 80084a2:	3202      	adds	r2, #2
 80084a4:	0092      	lsls	r2, r2, #2
 80084a6:	300c      	adds	r0, #12
 80084a8:	f7fd f9ba 	bl	8005820 <memcpy>
 80084ac:	4621      	mov	r1, r4
 80084ae:	9802      	ldr	r0, [sp, #8]
 80084b0:	f000 f956 	bl	8008760 <_Bfree>
 80084b4:	464c      	mov	r4, r9
 80084b6:	6923      	ldr	r3, [r4, #16]
 80084b8:	1c5a      	adds	r2, r3, #1
 80084ba:	6122      	str	r2, [r4, #16]
 80084bc:	2201      	movs	r2, #1
 80084be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80084c2:	615a      	str	r2, [r3, #20]
 80084c4:	e7bd      	b.n	8008442 <__gethex+0x3b6>
 80084c6:	6922      	ldr	r2, [r4, #16]
 80084c8:	455a      	cmp	r2, fp
 80084ca:	dd0b      	ble.n	80084e4 <__gethex+0x458>
 80084cc:	2101      	movs	r1, #1
 80084ce:	4620      	mov	r0, r4
 80084d0:	f7ff fd74 	bl	8007fbc <rshift>
 80084d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80084d8:	3501      	adds	r5, #1
 80084da:	42ab      	cmp	r3, r5
 80084dc:	f6ff aed5 	blt.w	800828a <__gethex+0x1fe>
 80084e0:	2701      	movs	r7, #1
 80084e2:	e7c2      	b.n	800846a <__gethex+0x3de>
 80084e4:	f016 061f 	ands.w	r6, r6, #31
 80084e8:	d0fa      	beq.n	80084e0 <__gethex+0x454>
 80084ea:	449a      	add	sl, r3
 80084ec:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80084f0:	f000 f9ec 	bl	80088cc <__hi0bits>
 80084f4:	f1c6 0620 	rsb	r6, r6, #32
 80084f8:	42b0      	cmp	r0, r6
 80084fa:	dbe7      	blt.n	80084cc <__gethex+0x440>
 80084fc:	e7f0      	b.n	80084e0 <__gethex+0x454>
 80084fe:	bf00      	nop
 8008500:	0800aa0c 	.word	0x0800aa0c

08008504 <L_shift>:
 8008504:	f1c2 0208 	rsb	r2, r2, #8
 8008508:	0092      	lsls	r2, r2, #2
 800850a:	b570      	push	{r4, r5, r6, lr}
 800850c:	f1c2 0620 	rsb	r6, r2, #32
 8008510:	6843      	ldr	r3, [r0, #4]
 8008512:	6804      	ldr	r4, [r0, #0]
 8008514:	fa03 f506 	lsl.w	r5, r3, r6
 8008518:	432c      	orrs	r4, r5
 800851a:	40d3      	lsrs	r3, r2
 800851c:	6004      	str	r4, [r0, #0]
 800851e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008522:	4288      	cmp	r0, r1
 8008524:	d3f4      	bcc.n	8008510 <L_shift+0xc>
 8008526:	bd70      	pop	{r4, r5, r6, pc}

08008528 <__match>:
 8008528:	b530      	push	{r4, r5, lr}
 800852a:	6803      	ldr	r3, [r0, #0]
 800852c:	3301      	adds	r3, #1
 800852e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008532:	b914      	cbnz	r4, 800853a <__match+0x12>
 8008534:	6003      	str	r3, [r0, #0]
 8008536:	2001      	movs	r0, #1
 8008538:	bd30      	pop	{r4, r5, pc}
 800853a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800853e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008542:	2d19      	cmp	r5, #25
 8008544:	bf98      	it	ls
 8008546:	3220      	addls	r2, #32
 8008548:	42a2      	cmp	r2, r4
 800854a:	d0f0      	beq.n	800852e <__match+0x6>
 800854c:	2000      	movs	r0, #0
 800854e:	e7f3      	b.n	8008538 <__match+0x10>

08008550 <__hexnan>:
 8008550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008554:	2500      	movs	r5, #0
 8008556:	680b      	ldr	r3, [r1, #0]
 8008558:	4682      	mov	sl, r0
 800855a:	115e      	asrs	r6, r3, #5
 800855c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008560:	f013 031f 	ands.w	r3, r3, #31
 8008564:	bf18      	it	ne
 8008566:	3604      	addne	r6, #4
 8008568:	1f37      	subs	r7, r6, #4
 800856a:	4690      	mov	r8, r2
 800856c:	46b9      	mov	r9, r7
 800856e:	463c      	mov	r4, r7
 8008570:	46ab      	mov	fp, r5
 8008572:	b087      	sub	sp, #28
 8008574:	6801      	ldr	r1, [r0, #0]
 8008576:	9301      	str	r3, [sp, #4]
 8008578:	f846 5c04 	str.w	r5, [r6, #-4]
 800857c:	9502      	str	r5, [sp, #8]
 800857e:	784a      	ldrb	r2, [r1, #1]
 8008580:	1c4b      	adds	r3, r1, #1
 8008582:	9303      	str	r3, [sp, #12]
 8008584:	b342      	cbz	r2, 80085d8 <__hexnan+0x88>
 8008586:	4610      	mov	r0, r2
 8008588:	9105      	str	r1, [sp, #20]
 800858a:	9204      	str	r2, [sp, #16]
 800858c:	f7ff fd69 	bl	8008062 <__hexdig_fun>
 8008590:	2800      	cmp	r0, #0
 8008592:	d14f      	bne.n	8008634 <__hexnan+0xe4>
 8008594:	9a04      	ldr	r2, [sp, #16]
 8008596:	9905      	ldr	r1, [sp, #20]
 8008598:	2a20      	cmp	r2, #32
 800859a:	d818      	bhi.n	80085ce <__hexnan+0x7e>
 800859c:	9b02      	ldr	r3, [sp, #8]
 800859e:	459b      	cmp	fp, r3
 80085a0:	dd13      	ble.n	80085ca <__hexnan+0x7a>
 80085a2:	454c      	cmp	r4, r9
 80085a4:	d206      	bcs.n	80085b4 <__hexnan+0x64>
 80085a6:	2d07      	cmp	r5, #7
 80085a8:	dc04      	bgt.n	80085b4 <__hexnan+0x64>
 80085aa:	462a      	mov	r2, r5
 80085ac:	4649      	mov	r1, r9
 80085ae:	4620      	mov	r0, r4
 80085b0:	f7ff ffa8 	bl	8008504 <L_shift>
 80085b4:	4544      	cmp	r4, r8
 80085b6:	d950      	bls.n	800865a <__hexnan+0x10a>
 80085b8:	2300      	movs	r3, #0
 80085ba:	f1a4 0904 	sub.w	r9, r4, #4
 80085be:	f844 3c04 	str.w	r3, [r4, #-4]
 80085c2:	461d      	mov	r5, r3
 80085c4:	464c      	mov	r4, r9
 80085c6:	f8cd b008 	str.w	fp, [sp, #8]
 80085ca:	9903      	ldr	r1, [sp, #12]
 80085cc:	e7d7      	b.n	800857e <__hexnan+0x2e>
 80085ce:	2a29      	cmp	r2, #41	; 0x29
 80085d0:	d156      	bne.n	8008680 <__hexnan+0x130>
 80085d2:	3102      	adds	r1, #2
 80085d4:	f8ca 1000 	str.w	r1, [sl]
 80085d8:	f1bb 0f00 	cmp.w	fp, #0
 80085dc:	d050      	beq.n	8008680 <__hexnan+0x130>
 80085de:	454c      	cmp	r4, r9
 80085e0:	d206      	bcs.n	80085f0 <__hexnan+0xa0>
 80085e2:	2d07      	cmp	r5, #7
 80085e4:	dc04      	bgt.n	80085f0 <__hexnan+0xa0>
 80085e6:	462a      	mov	r2, r5
 80085e8:	4649      	mov	r1, r9
 80085ea:	4620      	mov	r0, r4
 80085ec:	f7ff ff8a 	bl	8008504 <L_shift>
 80085f0:	4544      	cmp	r4, r8
 80085f2:	d934      	bls.n	800865e <__hexnan+0x10e>
 80085f4:	4623      	mov	r3, r4
 80085f6:	f1a8 0204 	sub.w	r2, r8, #4
 80085fa:	f853 1b04 	ldr.w	r1, [r3], #4
 80085fe:	429f      	cmp	r7, r3
 8008600:	f842 1f04 	str.w	r1, [r2, #4]!
 8008604:	d2f9      	bcs.n	80085fa <__hexnan+0xaa>
 8008606:	1b3b      	subs	r3, r7, r4
 8008608:	f023 0303 	bic.w	r3, r3, #3
 800860c:	3304      	adds	r3, #4
 800860e:	3401      	adds	r4, #1
 8008610:	3e03      	subs	r6, #3
 8008612:	42b4      	cmp	r4, r6
 8008614:	bf88      	it	hi
 8008616:	2304      	movhi	r3, #4
 8008618:	2200      	movs	r2, #0
 800861a:	4443      	add	r3, r8
 800861c:	f843 2b04 	str.w	r2, [r3], #4
 8008620:	429f      	cmp	r7, r3
 8008622:	d2fb      	bcs.n	800861c <__hexnan+0xcc>
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	b91b      	cbnz	r3, 8008630 <__hexnan+0xe0>
 8008628:	4547      	cmp	r7, r8
 800862a:	d127      	bne.n	800867c <__hexnan+0x12c>
 800862c:	2301      	movs	r3, #1
 800862e:	603b      	str	r3, [r7, #0]
 8008630:	2005      	movs	r0, #5
 8008632:	e026      	b.n	8008682 <__hexnan+0x132>
 8008634:	3501      	adds	r5, #1
 8008636:	2d08      	cmp	r5, #8
 8008638:	f10b 0b01 	add.w	fp, fp, #1
 800863c:	dd06      	ble.n	800864c <__hexnan+0xfc>
 800863e:	4544      	cmp	r4, r8
 8008640:	d9c3      	bls.n	80085ca <__hexnan+0x7a>
 8008642:	2300      	movs	r3, #0
 8008644:	2501      	movs	r5, #1
 8008646:	f844 3c04 	str.w	r3, [r4, #-4]
 800864a:	3c04      	subs	r4, #4
 800864c:	6822      	ldr	r2, [r4, #0]
 800864e:	f000 000f 	and.w	r0, r0, #15
 8008652:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008656:	6022      	str	r2, [r4, #0]
 8008658:	e7b7      	b.n	80085ca <__hexnan+0x7a>
 800865a:	2508      	movs	r5, #8
 800865c:	e7b5      	b.n	80085ca <__hexnan+0x7a>
 800865e:	9b01      	ldr	r3, [sp, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d0df      	beq.n	8008624 <__hexnan+0xd4>
 8008664:	f04f 32ff 	mov.w	r2, #4294967295
 8008668:	f1c3 0320 	rsb	r3, r3, #32
 800866c:	fa22 f303 	lsr.w	r3, r2, r3
 8008670:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008674:	401a      	ands	r2, r3
 8008676:	f846 2c04 	str.w	r2, [r6, #-4]
 800867a:	e7d3      	b.n	8008624 <__hexnan+0xd4>
 800867c:	3f04      	subs	r7, #4
 800867e:	e7d1      	b.n	8008624 <__hexnan+0xd4>
 8008680:	2004      	movs	r0, #4
 8008682:	b007      	add	sp, #28
 8008684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008688 <_localeconv_r>:
 8008688:	4800      	ldr	r0, [pc, #0]	; (800868c <_localeconv_r+0x4>)
 800868a:	4770      	bx	lr
 800868c:	20000170 	.word	0x20000170

08008690 <malloc>:
 8008690:	4b02      	ldr	r3, [pc, #8]	; (800869c <malloc+0xc>)
 8008692:	4601      	mov	r1, r0
 8008694:	6818      	ldr	r0, [r3, #0]
 8008696:	f000 bd35 	b.w	8009104 <_malloc_r>
 800869a:	bf00      	nop
 800869c:	20000018 	.word	0x20000018

080086a0 <__ascii_mbtowc>:
 80086a0:	b082      	sub	sp, #8
 80086a2:	b901      	cbnz	r1, 80086a6 <__ascii_mbtowc+0x6>
 80086a4:	a901      	add	r1, sp, #4
 80086a6:	b142      	cbz	r2, 80086ba <__ascii_mbtowc+0x1a>
 80086a8:	b14b      	cbz	r3, 80086be <__ascii_mbtowc+0x1e>
 80086aa:	7813      	ldrb	r3, [r2, #0]
 80086ac:	600b      	str	r3, [r1, #0]
 80086ae:	7812      	ldrb	r2, [r2, #0]
 80086b0:	1e10      	subs	r0, r2, #0
 80086b2:	bf18      	it	ne
 80086b4:	2001      	movne	r0, #1
 80086b6:	b002      	add	sp, #8
 80086b8:	4770      	bx	lr
 80086ba:	4610      	mov	r0, r2
 80086bc:	e7fb      	b.n	80086b6 <__ascii_mbtowc+0x16>
 80086be:	f06f 0001 	mvn.w	r0, #1
 80086c2:	e7f8      	b.n	80086b6 <__ascii_mbtowc+0x16>

080086c4 <memchr>:
 80086c4:	4603      	mov	r3, r0
 80086c6:	b510      	push	{r4, lr}
 80086c8:	b2c9      	uxtb	r1, r1
 80086ca:	4402      	add	r2, r0
 80086cc:	4293      	cmp	r3, r2
 80086ce:	4618      	mov	r0, r3
 80086d0:	d101      	bne.n	80086d6 <memchr+0x12>
 80086d2:	2000      	movs	r0, #0
 80086d4:	e003      	b.n	80086de <memchr+0x1a>
 80086d6:	7804      	ldrb	r4, [r0, #0]
 80086d8:	3301      	adds	r3, #1
 80086da:	428c      	cmp	r4, r1
 80086dc:	d1f6      	bne.n	80086cc <memchr+0x8>
 80086de:	bd10      	pop	{r4, pc}

080086e0 <_Balloc>:
 80086e0:	b570      	push	{r4, r5, r6, lr}
 80086e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80086e4:	4604      	mov	r4, r0
 80086e6:	460d      	mov	r5, r1
 80086e8:	b976      	cbnz	r6, 8008708 <_Balloc+0x28>
 80086ea:	2010      	movs	r0, #16
 80086ec:	f7ff ffd0 	bl	8008690 <malloc>
 80086f0:	4602      	mov	r2, r0
 80086f2:	6260      	str	r0, [r4, #36]	; 0x24
 80086f4:	b920      	cbnz	r0, 8008700 <_Balloc+0x20>
 80086f6:	2166      	movs	r1, #102	; 0x66
 80086f8:	4b17      	ldr	r3, [pc, #92]	; (8008758 <_Balloc+0x78>)
 80086fa:	4818      	ldr	r0, [pc, #96]	; (800875c <_Balloc+0x7c>)
 80086fc:	f000 feee 	bl	80094dc <__assert_func>
 8008700:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008704:	6006      	str	r6, [r0, #0]
 8008706:	60c6      	str	r6, [r0, #12]
 8008708:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800870a:	68f3      	ldr	r3, [r6, #12]
 800870c:	b183      	cbz	r3, 8008730 <_Balloc+0x50>
 800870e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008716:	b9b8      	cbnz	r0, 8008748 <_Balloc+0x68>
 8008718:	2101      	movs	r1, #1
 800871a:	fa01 f605 	lsl.w	r6, r1, r5
 800871e:	1d72      	adds	r2, r6, #5
 8008720:	4620      	mov	r0, r4
 8008722:	0092      	lsls	r2, r2, #2
 8008724:	f000 fc94 	bl	8009050 <_calloc_r>
 8008728:	b160      	cbz	r0, 8008744 <_Balloc+0x64>
 800872a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800872e:	e00e      	b.n	800874e <_Balloc+0x6e>
 8008730:	2221      	movs	r2, #33	; 0x21
 8008732:	2104      	movs	r1, #4
 8008734:	4620      	mov	r0, r4
 8008736:	f000 fc8b 	bl	8009050 <_calloc_r>
 800873a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800873c:	60f0      	str	r0, [r6, #12]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1e4      	bne.n	800870e <_Balloc+0x2e>
 8008744:	2000      	movs	r0, #0
 8008746:	bd70      	pop	{r4, r5, r6, pc}
 8008748:	6802      	ldr	r2, [r0, #0]
 800874a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800874e:	2300      	movs	r3, #0
 8008750:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008754:	e7f7      	b.n	8008746 <_Balloc+0x66>
 8008756:	bf00      	nop
 8008758:	0800a996 	.word	0x0800a996
 800875c:	0800aa9c 	.word	0x0800aa9c

08008760 <_Bfree>:
 8008760:	b570      	push	{r4, r5, r6, lr}
 8008762:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008764:	4605      	mov	r5, r0
 8008766:	460c      	mov	r4, r1
 8008768:	b976      	cbnz	r6, 8008788 <_Bfree+0x28>
 800876a:	2010      	movs	r0, #16
 800876c:	f7ff ff90 	bl	8008690 <malloc>
 8008770:	4602      	mov	r2, r0
 8008772:	6268      	str	r0, [r5, #36]	; 0x24
 8008774:	b920      	cbnz	r0, 8008780 <_Bfree+0x20>
 8008776:	218a      	movs	r1, #138	; 0x8a
 8008778:	4b08      	ldr	r3, [pc, #32]	; (800879c <_Bfree+0x3c>)
 800877a:	4809      	ldr	r0, [pc, #36]	; (80087a0 <_Bfree+0x40>)
 800877c:	f000 feae 	bl	80094dc <__assert_func>
 8008780:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008784:	6006      	str	r6, [r0, #0]
 8008786:	60c6      	str	r6, [r0, #12]
 8008788:	b13c      	cbz	r4, 800879a <_Bfree+0x3a>
 800878a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800878c:	6862      	ldr	r2, [r4, #4]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008794:	6021      	str	r1, [r4, #0]
 8008796:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800879a:	bd70      	pop	{r4, r5, r6, pc}
 800879c:	0800a996 	.word	0x0800a996
 80087a0:	0800aa9c 	.word	0x0800aa9c

080087a4 <__multadd>:
 80087a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087a8:	4698      	mov	r8, r3
 80087aa:	460c      	mov	r4, r1
 80087ac:	2300      	movs	r3, #0
 80087ae:	690e      	ldr	r6, [r1, #16]
 80087b0:	4607      	mov	r7, r0
 80087b2:	f101 0014 	add.w	r0, r1, #20
 80087b6:	6805      	ldr	r5, [r0, #0]
 80087b8:	3301      	adds	r3, #1
 80087ba:	b2a9      	uxth	r1, r5
 80087bc:	fb02 8101 	mla	r1, r2, r1, r8
 80087c0:	0c2d      	lsrs	r5, r5, #16
 80087c2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80087c6:	fb02 c505 	mla	r5, r2, r5, ip
 80087ca:	b289      	uxth	r1, r1
 80087cc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80087d0:	429e      	cmp	r6, r3
 80087d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80087d6:	f840 1b04 	str.w	r1, [r0], #4
 80087da:	dcec      	bgt.n	80087b6 <__multadd+0x12>
 80087dc:	f1b8 0f00 	cmp.w	r8, #0
 80087e0:	d022      	beq.n	8008828 <__multadd+0x84>
 80087e2:	68a3      	ldr	r3, [r4, #8]
 80087e4:	42b3      	cmp	r3, r6
 80087e6:	dc19      	bgt.n	800881c <__multadd+0x78>
 80087e8:	6861      	ldr	r1, [r4, #4]
 80087ea:	4638      	mov	r0, r7
 80087ec:	3101      	adds	r1, #1
 80087ee:	f7ff ff77 	bl	80086e0 <_Balloc>
 80087f2:	4605      	mov	r5, r0
 80087f4:	b928      	cbnz	r0, 8008802 <__multadd+0x5e>
 80087f6:	4602      	mov	r2, r0
 80087f8:	21b5      	movs	r1, #181	; 0xb5
 80087fa:	4b0d      	ldr	r3, [pc, #52]	; (8008830 <__multadd+0x8c>)
 80087fc:	480d      	ldr	r0, [pc, #52]	; (8008834 <__multadd+0x90>)
 80087fe:	f000 fe6d 	bl	80094dc <__assert_func>
 8008802:	6922      	ldr	r2, [r4, #16]
 8008804:	f104 010c 	add.w	r1, r4, #12
 8008808:	3202      	adds	r2, #2
 800880a:	0092      	lsls	r2, r2, #2
 800880c:	300c      	adds	r0, #12
 800880e:	f7fd f807 	bl	8005820 <memcpy>
 8008812:	4621      	mov	r1, r4
 8008814:	4638      	mov	r0, r7
 8008816:	f7ff ffa3 	bl	8008760 <_Bfree>
 800881a:	462c      	mov	r4, r5
 800881c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008820:	3601      	adds	r6, #1
 8008822:	f8c3 8014 	str.w	r8, [r3, #20]
 8008826:	6126      	str	r6, [r4, #16]
 8008828:	4620      	mov	r0, r4
 800882a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800882e:	bf00      	nop
 8008830:	0800aa0c 	.word	0x0800aa0c
 8008834:	0800aa9c 	.word	0x0800aa9c

08008838 <__s2b>:
 8008838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800883c:	4615      	mov	r5, r2
 800883e:	2209      	movs	r2, #9
 8008840:	461f      	mov	r7, r3
 8008842:	3308      	adds	r3, #8
 8008844:	460c      	mov	r4, r1
 8008846:	fb93 f3f2 	sdiv	r3, r3, r2
 800884a:	4606      	mov	r6, r0
 800884c:	2201      	movs	r2, #1
 800884e:	2100      	movs	r1, #0
 8008850:	429a      	cmp	r2, r3
 8008852:	db09      	blt.n	8008868 <__s2b+0x30>
 8008854:	4630      	mov	r0, r6
 8008856:	f7ff ff43 	bl	80086e0 <_Balloc>
 800885a:	b940      	cbnz	r0, 800886e <__s2b+0x36>
 800885c:	4602      	mov	r2, r0
 800885e:	21ce      	movs	r1, #206	; 0xce
 8008860:	4b18      	ldr	r3, [pc, #96]	; (80088c4 <__s2b+0x8c>)
 8008862:	4819      	ldr	r0, [pc, #100]	; (80088c8 <__s2b+0x90>)
 8008864:	f000 fe3a 	bl	80094dc <__assert_func>
 8008868:	0052      	lsls	r2, r2, #1
 800886a:	3101      	adds	r1, #1
 800886c:	e7f0      	b.n	8008850 <__s2b+0x18>
 800886e:	9b08      	ldr	r3, [sp, #32]
 8008870:	2d09      	cmp	r5, #9
 8008872:	6143      	str	r3, [r0, #20]
 8008874:	f04f 0301 	mov.w	r3, #1
 8008878:	6103      	str	r3, [r0, #16]
 800887a:	dd16      	ble.n	80088aa <__s2b+0x72>
 800887c:	f104 0909 	add.w	r9, r4, #9
 8008880:	46c8      	mov	r8, r9
 8008882:	442c      	add	r4, r5
 8008884:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008888:	4601      	mov	r1, r0
 800888a:	220a      	movs	r2, #10
 800888c:	4630      	mov	r0, r6
 800888e:	3b30      	subs	r3, #48	; 0x30
 8008890:	f7ff ff88 	bl	80087a4 <__multadd>
 8008894:	45a0      	cmp	r8, r4
 8008896:	d1f5      	bne.n	8008884 <__s2b+0x4c>
 8008898:	f1a5 0408 	sub.w	r4, r5, #8
 800889c:	444c      	add	r4, r9
 800889e:	1b2d      	subs	r5, r5, r4
 80088a0:	1963      	adds	r3, r4, r5
 80088a2:	42bb      	cmp	r3, r7
 80088a4:	db04      	blt.n	80088b0 <__s2b+0x78>
 80088a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088aa:	2509      	movs	r5, #9
 80088ac:	340a      	adds	r4, #10
 80088ae:	e7f6      	b.n	800889e <__s2b+0x66>
 80088b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80088b4:	4601      	mov	r1, r0
 80088b6:	220a      	movs	r2, #10
 80088b8:	4630      	mov	r0, r6
 80088ba:	3b30      	subs	r3, #48	; 0x30
 80088bc:	f7ff ff72 	bl	80087a4 <__multadd>
 80088c0:	e7ee      	b.n	80088a0 <__s2b+0x68>
 80088c2:	bf00      	nop
 80088c4:	0800aa0c 	.word	0x0800aa0c
 80088c8:	0800aa9c 	.word	0x0800aa9c

080088cc <__hi0bits>:
 80088cc:	0c02      	lsrs	r2, r0, #16
 80088ce:	0412      	lsls	r2, r2, #16
 80088d0:	4603      	mov	r3, r0
 80088d2:	b9ca      	cbnz	r2, 8008908 <__hi0bits+0x3c>
 80088d4:	0403      	lsls	r3, r0, #16
 80088d6:	2010      	movs	r0, #16
 80088d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80088dc:	bf04      	itt	eq
 80088de:	021b      	lsleq	r3, r3, #8
 80088e0:	3008      	addeq	r0, #8
 80088e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80088e6:	bf04      	itt	eq
 80088e8:	011b      	lsleq	r3, r3, #4
 80088ea:	3004      	addeq	r0, #4
 80088ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80088f0:	bf04      	itt	eq
 80088f2:	009b      	lsleq	r3, r3, #2
 80088f4:	3002      	addeq	r0, #2
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	db05      	blt.n	8008906 <__hi0bits+0x3a>
 80088fa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80088fe:	f100 0001 	add.w	r0, r0, #1
 8008902:	bf08      	it	eq
 8008904:	2020      	moveq	r0, #32
 8008906:	4770      	bx	lr
 8008908:	2000      	movs	r0, #0
 800890a:	e7e5      	b.n	80088d8 <__hi0bits+0xc>

0800890c <__lo0bits>:
 800890c:	6803      	ldr	r3, [r0, #0]
 800890e:	4602      	mov	r2, r0
 8008910:	f013 0007 	ands.w	r0, r3, #7
 8008914:	d00b      	beq.n	800892e <__lo0bits+0x22>
 8008916:	07d9      	lsls	r1, r3, #31
 8008918:	d422      	bmi.n	8008960 <__lo0bits+0x54>
 800891a:	0798      	lsls	r0, r3, #30
 800891c:	bf49      	itett	mi
 800891e:	085b      	lsrmi	r3, r3, #1
 8008920:	089b      	lsrpl	r3, r3, #2
 8008922:	2001      	movmi	r0, #1
 8008924:	6013      	strmi	r3, [r2, #0]
 8008926:	bf5c      	itt	pl
 8008928:	2002      	movpl	r0, #2
 800892a:	6013      	strpl	r3, [r2, #0]
 800892c:	4770      	bx	lr
 800892e:	b299      	uxth	r1, r3
 8008930:	b909      	cbnz	r1, 8008936 <__lo0bits+0x2a>
 8008932:	2010      	movs	r0, #16
 8008934:	0c1b      	lsrs	r3, r3, #16
 8008936:	f013 0fff 	tst.w	r3, #255	; 0xff
 800893a:	bf04      	itt	eq
 800893c:	0a1b      	lsreq	r3, r3, #8
 800893e:	3008      	addeq	r0, #8
 8008940:	0719      	lsls	r1, r3, #28
 8008942:	bf04      	itt	eq
 8008944:	091b      	lsreq	r3, r3, #4
 8008946:	3004      	addeq	r0, #4
 8008948:	0799      	lsls	r1, r3, #30
 800894a:	bf04      	itt	eq
 800894c:	089b      	lsreq	r3, r3, #2
 800894e:	3002      	addeq	r0, #2
 8008950:	07d9      	lsls	r1, r3, #31
 8008952:	d403      	bmi.n	800895c <__lo0bits+0x50>
 8008954:	085b      	lsrs	r3, r3, #1
 8008956:	f100 0001 	add.w	r0, r0, #1
 800895a:	d003      	beq.n	8008964 <__lo0bits+0x58>
 800895c:	6013      	str	r3, [r2, #0]
 800895e:	4770      	bx	lr
 8008960:	2000      	movs	r0, #0
 8008962:	4770      	bx	lr
 8008964:	2020      	movs	r0, #32
 8008966:	4770      	bx	lr

08008968 <__i2b>:
 8008968:	b510      	push	{r4, lr}
 800896a:	460c      	mov	r4, r1
 800896c:	2101      	movs	r1, #1
 800896e:	f7ff feb7 	bl	80086e0 <_Balloc>
 8008972:	4602      	mov	r2, r0
 8008974:	b928      	cbnz	r0, 8008982 <__i2b+0x1a>
 8008976:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800897a:	4b04      	ldr	r3, [pc, #16]	; (800898c <__i2b+0x24>)
 800897c:	4804      	ldr	r0, [pc, #16]	; (8008990 <__i2b+0x28>)
 800897e:	f000 fdad 	bl	80094dc <__assert_func>
 8008982:	2301      	movs	r3, #1
 8008984:	6144      	str	r4, [r0, #20]
 8008986:	6103      	str	r3, [r0, #16]
 8008988:	bd10      	pop	{r4, pc}
 800898a:	bf00      	nop
 800898c:	0800aa0c 	.word	0x0800aa0c
 8008990:	0800aa9c 	.word	0x0800aa9c

08008994 <__multiply>:
 8008994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008998:	4614      	mov	r4, r2
 800899a:	690a      	ldr	r2, [r1, #16]
 800899c:	6923      	ldr	r3, [r4, #16]
 800899e:	460d      	mov	r5, r1
 80089a0:	429a      	cmp	r2, r3
 80089a2:	bfbe      	ittt	lt
 80089a4:	460b      	movlt	r3, r1
 80089a6:	4625      	movlt	r5, r4
 80089a8:	461c      	movlt	r4, r3
 80089aa:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80089ae:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80089b2:	68ab      	ldr	r3, [r5, #8]
 80089b4:	6869      	ldr	r1, [r5, #4]
 80089b6:	eb0a 0709 	add.w	r7, sl, r9
 80089ba:	42bb      	cmp	r3, r7
 80089bc:	b085      	sub	sp, #20
 80089be:	bfb8      	it	lt
 80089c0:	3101      	addlt	r1, #1
 80089c2:	f7ff fe8d 	bl	80086e0 <_Balloc>
 80089c6:	b930      	cbnz	r0, 80089d6 <__multiply+0x42>
 80089c8:	4602      	mov	r2, r0
 80089ca:	f240 115d 	movw	r1, #349	; 0x15d
 80089ce:	4b41      	ldr	r3, [pc, #260]	; (8008ad4 <__multiply+0x140>)
 80089d0:	4841      	ldr	r0, [pc, #260]	; (8008ad8 <__multiply+0x144>)
 80089d2:	f000 fd83 	bl	80094dc <__assert_func>
 80089d6:	f100 0614 	add.w	r6, r0, #20
 80089da:	4633      	mov	r3, r6
 80089dc:	2200      	movs	r2, #0
 80089de:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80089e2:	4543      	cmp	r3, r8
 80089e4:	d31e      	bcc.n	8008a24 <__multiply+0x90>
 80089e6:	f105 0c14 	add.w	ip, r5, #20
 80089ea:	f104 0314 	add.w	r3, r4, #20
 80089ee:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80089f2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80089f6:	9202      	str	r2, [sp, #8]
 80089f8:	ebac 0205 	sub.w	r2, ip, r5
 80089fc:	3a15      	subs	r2, #21
 80089fe:	f022 0203 	bic.w	r2, r2, #3
 8008a02:	3204      	adds	r2, #4
 8008a04:	f105 0115 	add.w	r1, r5, #21
 8008a08:	458c      	cmp	ip, r1
 8008a0a:	bf38      	it	cc
 8008a0c:	2204      	movcc	r2, #4
 8008a0e:	9201      	str	r2, [sp, #4]
 8008a10:	9a02      	ldr	r2, [sp, #8]
 8008a12:	9303      	str	r3, [sp, #12]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d808      	bhi.n	8008a2a <__multiply+0x96>
 8008a18:	2f00      	cmp	r7, #0
 8008a1a:	dc55      	bgt.n	8008ac8 <__multiply+0x134>
 8008a1c:	6107      	str	r7, [r0, #16]
 8008a1e:	b005      	add	sp, #20
 8008a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a24:	f843 2b04 	str.w	r2, [r3], #4
 8008a28:	e7db      	b.n	80089e2 <__multiply+0x4e>
 8008a2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a2e:	f1ba 0f00 	cmp.w	sl, #0
 8008a32:	d020      	beq.n	8008a76 <__multiply+0xe2>
 8008a34:	46b1      	mov	r9, r6
 8008a36:	2200      	movs	r2, #0
 8008a38:	f105 0e14 	add.w	lr, r5, #20
 8008a3c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008a40:	f8d9 b000 	ldr.w	fp, [r9]
 8008a44:	b2a1      	uxth	r1, r4
 8008a46:	fa1f fb8b 	uxth.w	fp, fp
 8008a4a:	fb0a b101 	mla	r1, sl, r1, fp
 8008a4e:	4411      	add	r1, r2
 8008a50:	f8d9 2000 	ldr.w	r2, [r9]
 8008a54:	0c24      	lsrs	r4, r4, #16
 8008a56:	0c12      	lsrs	r2, r2, #16
 8008a58:	fb0a 2404 	mla	r4, sl, r4, r2
 8008a5c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008a60:	b289      	uxth	r1, r1
 8008a62:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008a66:	45f4      	cmp	ip, lr
 8008a68:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008a6c:	f849 1b04 	str.w	r1, [r9], #4
 8008a70:	d8e4      	bhi.n	8008a3c <__multiply+0xa8>
 8008a72:	9901      	ldr	r1, [sp, #4]
 8008a74:	5072      	str	r2, [r6, r1]
 8008a76:	9a03      	ldr	r2, [sp, #12]
 8008a78:	3304      	adds	r3, #4
 8008a7a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a7e:	f1b9 0f00 	cmp.w	r9, #0
 8008a82:	d01f      	beq.n	8008ac4 <__multiply+0x130>
 8008a84:	46b6      	mov	lr, r6
 8008a86:	f04f 0a00 	mov.w	sl, #0
 8008a8a:	6834      	ldr	r4, [r6, #0]
 8008a8c:	f105 0114 	add.w	r1, r5, #20
 8008a90:	880a      	ldrh	r2, [r1, #0]
 8008a92:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008a96:	b2a4      	uxth	r4, r4
 8008a98:	fb09 b202 	mla	r2, r9, r2, fp
 8008a9c:	4492      	add	sl, r2
 8008a9e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008aa2:	f84e 4b04 	str.w	r4, [lr], #4
 8008aa6:	f851 4b04 	ldr.w	r4, [r1], #4
 8008aaa:	f8be 2000 	ldrh.w	r2, [lr]
 8008aae:	0c24      	lsrs	r4, r4, #16
 8008ab0:	fb09 2404 	mla	r4, r9, r4, r2
 8008ab4:	458c      	cmp	ip, r1
 8008ab6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008aba:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008abe:	d8e7      	bhi.n	8008a90 <__multiply+0xfc>
 8008ac0:	9a01      	ldr	r2, [sp, #4]
 8008ac2:	50b4      	str	r4, [r6, r2]
 8008ac4:	3604      	adds	r6, #4
 8008ac6:	e7a3      	b.n	8008a10 <__multiply+0x7c>
 8008ac8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1a5      	bne.n	8008a1c <__multiply+0x88>
 8008ad0:	3f01      	subs	r7, #1
 8008ad2:	e7a1      	b.n	8008a18 <__multiply+0x84>
 8008ad4:	0800aa0c 	.word	0x0800aa0c
 8008ad8:	0800aa9c 	.word	0x0800aa9c

08008adc <__pow5mult>:
 8008adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ae0:	4615      	mov	r5, r2
 8008ae2:	f012 0203 	ands.w	r2, r2, #3
 8008ae6:	4606      	mov	r6, r0
 8008ae8:	460f      	mov	r7, r1
 8008aea:	d007      	beq.n	8008afc <__pow5mult+0x20>
 8008aec:	4c25      	ldr	r4, [pc, #148]	; (8008b84 <__pow5mult+0xa8>)
 8008aee:	3a01      	subs	r2, #1
 8008af0:	2300      	movs	r3, #0
 8008af2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008af6:	f7ff fe55 	bl	80087a4 <__multadd>
 8008afa:	4607      	mov	r7, r0
 8008afc:	10ad      	asrs	r5, r5, #2
 8008afe:	d03d      	beq.n	8008b7c <__pow5mult+0xa0>
 8008b00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008b02:	b97c      	cbnz	r4, 8008b24 <__pow5mult+0x48>
 8008b04:	2010      	movs	r0, #16
 8008b06:	f7ff fdc3 	bl	8008690 <malloc>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	6270      	str	r0, [r6, #36]	; 0x24
 8008b0e:	b928      	cbnz	r0, 8008b1c <__pow5mult+0x40>
 8008b10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008b14:	4b1c      	ldr	r3, [pc, #112]	; (8008b88 <__pow5mult+0xac>)
 8008b16:	481d      	ldr	r0, [pc, #116]	; (8008b8c <__pow5mult+0xb0>)
 8008b18:	f000 fce0 	bl	80094dc <__assert_func>
 8008b1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b20:	6004      	str	r4, [r0, #0]
 8008b22:	60c4      	str	r4, [r0, #12]
 8008b24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008b28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b2c:	b94c      	cbnz	r4, 8008b42 <__pow5mult+0x66>
 8008b2e:	f240 2171 	movw	r1, #625	; 0x271
 8008b32:	4630      	mov	r0, r6
 8008b34:	f7ff ff18 	bl	8008968 <__i2b>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b40:	6003      	str	r3, [r0, #0]
 8008b42:	f04f 0900 	mov.w	r9, #0
 8008b46:	07eb      	lsls	r3, r5, #31
 8008b48:	d50a      	bpl.n	8008b60 <__pow5mult+0x84>
 8008b4a:	4639      	mov	r1, r7
 8008b4c:	4622      	mov	r2, r4
 8008b4e:	4630      	mov	r0, r6
 8008b50:	f7ff ff20 	bl	8008994 <__multiply>
 8008b54:	4680      	mov	r8, r0
 8008b56:	4639      	mov	r1, r7
 8008b58:	4630      	mov	r0, r6
 8008b5a:	f7ff fe01 	bl	8008760 <_Bfree>
 8008b5e:	4647      	mov	r7, r8
 8008b60:	106d      	asrs	r5, r5, #1
 8008b62:	d00b      	beq.n	8008b7c <__pow5mult+0xa0>
 8008b64:	6820      	ldr	r0, [r4, #0]
 8008b66:	b938      	cbnz	r0, 8008b78 <__pow5mult+0x9c>
 8008b68:	4622      	mov	r2, r4
 8008b6a:	4621      	mov	r1, r4
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	f7ff ff11 	bl	8008994 <__multiply>
 8008b72:	6020      	str	r0, [r4, #0]
 8008b74:	f8c0 9000 	str.w	r9, [r0]
 8008b78:	4604      	mov	r4, r0
 8008b7a:	e7e4      	b.n	8008b46 <__pow5mult+0x6a>
 8008b7c:	4638      	mov	r0, r7
 8008b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b82:	bf00      	nop
 8008b84:	0800abf0 	.word	0x0800abf0
 8008b88:	0800a996 	.word	0x0800a996
 8008b8c:	0800aa9c 	.word	0x0800aa9c

08008b90 <__lshift>:
 8008b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b94:	460c      	mov	r4, r1
 8008b96:	4607      	mov	r7, r0
 8008b98:	4691      	mov	r9, r2
 8008b9a:	6923      	ldr	r3, [r4, #16]
 8008b9c:	6849      	ldr	r1, [r1, #4]
 8008b9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ba2:	68a3      	ldr	r3, [r4, #8]
 8008ba4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ba8:	f108 0601 	add.w	r6, r8, #1
 8008bac:	42b3      	cmp	r3, r6
 8008bae:	db0b      	blt.n	8008bc8 <__lshift+0x38>
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	f7ff fd95 	bl	80086e0 <_Balloc>
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	b948      	cbnz	r0, 8008bce <__lshift+0x3e>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008bc0:	4b27      	ldr	r3, [pc, #156]	; (8008c60 <__lshift+0xd0>)
 8008bc2:	4828      	ldr	r0, [pc, #160]	; (8008c64 <__lshift+0xd4>)
 8008bc4:	f000 fc8a 	bl	80094dc <__assert_func>
 8008bc8:	3101      	adds	r1, #1
 8008bca:	005b      	lsls	r3, r3, #1
 8008bcc:	e7ee      	b.n	8008bac <__lshift+0x1c>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f100 0114 	add.w	r1, r0, #20
 8008bd4:	f100 0210 	add.w	r2, r0, #16
 8008bd8:	4618      	mov	r0, r3
 8008bda:	4553      	cmp	r3, sl
 8008bdc:	db33      	blt.n	8008c46 <__lshift+0xb6>
 8008bde:	6920      	ldr	r0, [r4, #16]
 8008be0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008be4:	f104 0314 	add.w	r3, r4, #20
 8008be8:	f019 091f 	ands.w	r9, r9, #31
 8008bec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008bf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008bf4:	d02b      	beq.n	8008c4e <__lshift+0xbe>
 8008bf6:	468a      	mov	sl, r1
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f1c9 0e20 	rsb	lr, r9, #32
 8008bfe:	6818      	ldr	r0, [r3, #0]
 8008c00:	fa00 f009 	lsl.w	r0, r0, r9
 8008c04:	4302      	orrs	r2, r0
 8008c06:	f84a 2b04 	str.w	r2, [sl], #4
 8008c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c0e:	459c      	cmp	ip, r3
 8008c10:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c14:	d8f3      	bhi.n	8008bfe <__lshift+0x6e>
 8008c16:	ebac 0304 	sub.w	r3, ip, r4
 8008c1a:	3b15      	subs	r3, #21
 8008c1c:	f023 0303 	bic.w	r3, r3, #3
 8008c20:	3304      	adds	r3, #4
 8008c22:	f104 0015 	add.w	r0, r4, #21
 8008c26:	4584      	cmp	ip, r0
 8008c28:	bf38      	it	cc
 8008c2a:	2304      	movcc	r3, #4
 8008c2c:	50ca      	str	r2, [r1, r3]
 8008c2e:	b10a      	cbz	r2, 8008c34 <__lshift+0xa4>
 8008c30:	f108 0602 	add.w	r6, r8, #2
 8008c34:	3e01      	subs	r6, #1
 8008c36:	4638      	mov	r0, r7
 8008c38:	4621      	mov	r1, r4
 8008c3a:	612e      	str	r6, [r5, #16]
 8008c3c:	f7ff fd90 	bl	8008760 <_Bfree>
 8008c40:	4628      	mov	r0, r5
 8008c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c46:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	e7c5      	b.n	8008bda <__lshift+0x4a>
 8008c4e:	3904      	subs	r1, #4
 8008c50:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c54:	459c      	cmp	ip, r3
 8008c56:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c5a:	d8f9      	bhi.n	8008c50 <__lshift+0xc0>
 8008c5c:	e7ea      	b.n	8008c34 <__lshift+0xa4>
 8008c5e:	bf00      	nop
 8008c60:	0800aa0c 	.word	0x0800aa0c
 8008c64:	0800aa9c 	.word	0x0800aa9c

08008c68 <__mcmp>:
 8008c68:	4603      	mov	r3, r0
 8008c6a:	690a      	ldr	r2, [r1, #16]
 8008c6c:	6900      	ldr	r0, [r0, #16]
 8008c6e:	b530      	push	{r4, r5, lr}
 8008c70:	1a80      	subs	r0, r0, r2
 8008c72:	d10d      	bne.n	8008c90 <__mcmp+0x28>
 8008c74:	3314      	adds	r3, #20
 8008c76:	3114      	adds	r1, #20
 8008c78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008c7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008c80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c88:	4295      	cmp	r5, r2
 8008c8a:	d002      	beq.n	8008c92 <__mcmp+0x2a>
 8008c8c:	d304      	bcc.n	8008c98 <__mcmp+0x30>
 8008c8e:	2001      	movs	r0, #1
 8008c90:	bd30      	pop	{r4, r5, pc}
 8008c92:	42a3      	cmp	r3, r4
 8008c94:	d3f4      	bcc.n	8008c80 <__mcmp+0x18>
 8008c96:	e7fb      	b.n	8008c90 <__mcmp+0x28>
 8008c98:	f04f 30ff 	mov.w	r0, #4294967295
 8008c9c:	e7f8      	b.n	8008c90 <__mcmp+0x28>
	...

08008ca0 <__mdiff>:
 8008ca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca4:	460c      	mov	r4, r1
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	4611      	mov	r1, r2
 8008caa:	4620      	mov	r0, r4
 8008cac:	4692      	mov	sl, r2
 8008cae:	f7ff ffdb 	bl	8008c68 <__mcmp>
 8008cb2:	1e05      	subs	r5, r0, #0
 8008cb4:	d111      	bne.n	8008cda <__mdiff+0x3a>
 8008cb6:	4629      	mov	r1, r5
 8008cb8:	4630      	mov	r0, r6
 8008cba:	f7ff fd11 	bl	80086e0 <_Balloc>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	b928      	cbnz	r0, 8008cce <__mdiff+0x2e>
 8008cc2:	f240 2132 	movw	r1, #562	; 0x232
 8008cc6:	4b3c      	ldr	r3, [pc, #240]	; (8008db8 <__mdiff+0x118>)
 8008cc8:	483c      	ldr	r0, [pc, #240]	; (8008dbc <__mdiff+0x11c>)
 8008cca:	f000 fc07 	bl	80094dc <__assert_func>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008cd4:	4610      	mov	r0, r2
 8008cd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cda:	bfa4      	itt	ge
 8008cdc:	4653      	movge	r3, sl
 8008cde:	46a2      	movge	sl, r4
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008ce6:	bfa6      	itte	ge
 8008ce8:	461c      	movge	r4, r3
 8008cea:	2500      	movge	r5, #0
 8008cec:	2501      	movlt	r5, #1
 8008cee:	f7ff fcf7 	bl	80086e0 <_Balloc>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	b918      	cbnz	r0, 8008cfe <__mdiff+0x5e>
 8008cf6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008cfa:	4b2f      	ldr	r3, [pc, #188]	; (8008db8 <__mdiff+0x118>)
 8008cfc:	e7e4      	b.n	8008cc8 <__mdiff+0x28>
 8008cfe:	f100 0814 	add.w	r8, r0, #20
 8008d02:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008d06:	60c5      	str	r5, [r0, #12]
 8008d08:	f04f 0c00 	mov.w	ip, #0
 8008d0c:	f10a 0514 	add.w	r5, sl, #20
 8008d10:	f10a 0010 	add.w	r0, sl, #16
 8008d14:	46c2      	mov	sl, r8
 8008d16:	6926      	ldr	r6, [r4, #16]
 8008d18:	f104 0914 	add.w	r9, r4, #20
 8008d1c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008d20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008d24:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008d28:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d2c:	fa1f f18b 	uxth.w	r1, fp
 8008d30:	4461      	add	r1, ip
 8008d32:	fa1f fc83 	uxth.w	ip, r3
 8008d36:	0c1b      	lsrs	r3, r3, #16
 8008d38:	eba1 010c 	sub.w	r1, r1, ip
 8008d3c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d40:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008d44:	b289      	uxth	r1, r1
 8008d46:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008d4a:	454e      	cmp	r6, r9
 8008d4c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008d50:	f84a 3b04 	str.w	r3, [sl], #4
 8008d54:	d8e6      	bhi.n	8008d24 <__mdiff+0x84>
 8008d56:	1b33      	subs	r3, r6, r4
 8008d58:	3b15      	subs	r3, #21
 8008d5a:	f023 0303 	bic.w	r3, r3, #3
 8008d5e:	3415      	adds	r4, #21
 8008d60:	3304      	adds	r3, #4
 8008d62:	42a6      	cmp	r6, r4
 8008d64:	bf38      	it	cc
 8008d66:	2304      	movcc	r3, #4
 8008d68:	441d      	add	r5, r3
 8008d6a:	4443      	add	r3, r8
 8008d6c:	461e      	mov	r6, r3
 8008d6e:	462c      	mov	r4, r5
 8008d70:	4574      	cmp	r4, lr
 8008d72:	d30e      	bcc.n	8008d92 <__mdiff+0xf2>
 8008d74:	f10e 0103 	add.w	r1, lr, #3
 8008d78:	1b49      	subs	r1, r1, r5
 8008d7a:	f021 0103 	bic.w	r1, r1, #3
 8008d7e:	3d03      	subs	r5, #3
 8008d80:	45ae      	cmp	lr, r5
 8008d82:	bf38      	it	cc
 8008d84:	2100      	movcc	r1, #0
 8008d86:	4419      	add	r1, r3
 8008d88:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008d8c:	b18b      	cbz	r3, 8008db2 <__mdiff+0x112>
 8008d8e:	6117      	str	r7, [r2, #16]
 8008d90:	e7a0      	b.n	8008cd4 <__mdiff+0x34>
 8008d92:	f854 8b04 	ldr.w	r8, [r4], #4
 8008d96:	fa1f f188 	uxth.w	r1, r8
 8008d9a:	4461      	add	r1, ip
 8008d9c:	1408      	asrs	r0, r1, #16
 8008d9e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008da2:	b289      	uxth	r1, r1
 8008da4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008da8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008dac:	f846 1b04 	str.w	r1, [r6], #4
 8008db0:	e7de      	b.n	8008d70 <__mdiff+0xd0>
 8008db2:	3f01      	subs	r7, #1
 8008db4:	e7e8      	b.n	8008d88 <__mdiff+0xe8>
 8008db6:	bf00      	nop
 8008db8:	0800aa0c 	.word	0x0800aa0c
 8008dbc:	0800aa9c 	.word	0x0800aa9c

08008dc0 <__ulp>:
 8008dc0:	4b11      	ldr	r3, [pc, #68]	; (8008e08 <__ulp+0x48>)
 8008dc2:	400b      	ands	r3, r1
 8008dc4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	dd02      	ble.n	8008dd2 <__ulp+0x12>
 8008dcc:	2000      	movs	r0, #0
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4770      	bx	lr
 8008dd2:	425b      	negs	r3, r3
 8008dd4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008dd8:	f04f 0000 	mov.w	r0, #0
 8008ddc:	f04f 0100 	mov.w	r1, #0
 8008de0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008de4:	da04      	bge.n	8008df0 <__ulp+0x30>
 8008de6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008dea:	fa43 f102 	asr.w	r1, r3, r2
 8008dee:	4770      	bx	lr
 8008df0:	f1a2 0314 	sub.w	r3, r2, #20
 8008df4:	2b1e      	cmp	r3, #30
 8008df6:	bfd6      	itet	le
 8008df8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008dfc:	2301      	movgt	r3, #1
 8008dfe:	fa22 f303 	lsrle.w	r3, r2, r3
 8008e02:	4618      	mov	r0, r3
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	7ff00000 	.word	0x7ff00000

08008e0c <__b2d>:
 8008e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e10:	6907      	ldr	r7, [r0, #16]
 8008e12:	f100 0914 	add.w	r9, r0, #20
 8008e16:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008e1a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008e1e:	f1a7 0804 	sub.w	r8, r7, #4
 8008e22:	4630      	mov	r0, r6
 8008e24:	f7ff fd52 	bl	80088cc <__hi0bits>
 8008e28:	f1c0 0320 	rsb	r3, r0, #32
 8008e2c:	280a      	cmp	r0, #10
 8008e2e:	600b      	str	r3, [r1, #0]
 8008e30:	491f      	ldr	r1, [pc, #124]	; (8008eb0 <__b2d+0xa4>)
 8008e32:	dc17      	bgt.n	8008e64 <__b2d+0x58>
 8008e34:	45c1      	cmp	r9, r8
 8008e36:	bf28      	it	cs
 8008e38:	2200      	movcs	r2, #0
 8008e3a:	f1c0 0c0b 	rsb	ip, r0, #11
 8008e3e:	fa26 f30c 	lsr.w	r3, r6, ip
 8008e42:	bf38      	it	cc
 8008e44:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008e48:	ea43 0501 	orr.w	r5, r3, r1
 8008e4c:	f100 0315 	add.w	r3, r0, #21
 8008e50:	fa06 f303 	lsl.w	r3, r6, r3
 8008e54:	fa22 f20c 	lsr.w	r2, r2, ip
 8008e58:	ea43 0402 	orr.w	r4, r3, r2
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	4629      	mov	r1, r5
 8008e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e64:	45c1      	cmp	r9, r8
 8008e66:	bf2e      	itee	cs
 8008e68:	2200      	movcs	r2, #0
 8008e6a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008e6e:	f1a7 0808 	subcc.w	r8, r7, #8
 8008e72:	f1b0 030b 	subs.w	r3, r0, #11
 8008e76:	d016      	beq.n	8008ea6 <__b2d+0x9a>
 8008e78:	f1c3 0720 	rsb	r7, r3, #32
 8008e7c:	fa22 f107 	lsr.w	r1, r2, r7
 8008e80:	45c8      	cmp	r8, r9
 8008e82:	fa06 f603 	lsl.w	r6, r6, r3
 8008e86:	ea46 0601 	orr.w	r6, r6, r1
 8008e8a:	bf94      	ite	ls
 8008e8c:	2100      	movls	r1, #0
 8008e8e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008e92:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008e96:	fa02 f003 	lsl.w	r0, r2, r3
 8008e9a:	40f9      	lsrs	r1, r7
 8008e9c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008ea0:	ea40 0401 	orr.w	r4, r0, r1
 8008ea4:	e7da      	b.n	8008e5c <__b2d+0x50>
 8008ea6:	4614      	mov	r4, r2
 8008ea8:	ea46 0501 	orr.w	r5, r6, r1
 8008eac:	e7d6      	b.n	8008e5c <__b2d+0x50>
 8008eae:	bf00      	nop
 8008eb0:	3ff00000 	.word	0x3ff00000

08008eb4 <__d2b>:
 8008eb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008eb8:	2101      	movs	r1, #1
 8008eba:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008ebe:	4690      	mov	r8, r2
 8008ec0:	461d      	mov	r5, r3
 8008ec2:	f7ff fc0d 	bl	80086e0 <_Balloc>
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	b930      	cbnz	r0, 8008ed8 <__d2b+0x24>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	f240 310a 	movw	r1, #778	; 0x30a
 8008ed0:	4b24      	ldr	r3, [pc, #144]	; (8008f64 <__d2b+0xb0>)
 8008ed2:	4825      	ldr	r0, [pc, #148]	; (8008f68 <__d2b+0xb4>)
 8008ed4:	f000 fb02 	bl	80094dc <__assert_func>
 8008ed8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008edc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008ee0:	bb2d      	cbnz	r5, 8008f2e <__d2b+0x7a>
 8008ee2:	9301      	str	r3, [sp, #4]
 8008ee4:	f1b8 0300 	subs.w	r3, r8, #0
 8008ee8:	d026      	beq.n	8008f38 <__d2b+0x84>
 8008eea:	4668      	mov	r0, sp
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	f7ff fd0d 	bl	800890c <__lo0bits>
 8008ef2:	9900      	ldr	r1, [sp, #0]
 8008ef4:	b1f0      	cbz	r0, 8008f34 <__d2b+0x80>
 8008ef6:	9a01      	ldr	r2, [sp, #4]
 8008ef8:	f1c0 0320 	rsb	r3, r0, #32
 8008efc:	fa02 f303 	lsl.w	r3, r2, r3
 8008f00:	430b      	orrs	r3, r1
 8008f02:	40c2      	lsrs	r2, r0
 8008f04:	6163      	str	r3, [r4, #20]
 8008f06:	9201      	str	r2, [sp, #4]
 8008f08:	9b01      	ldr	r3, [sp, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	bf14      	ite	ne
 8008f0e:	2102      	movne	r1, #2
 8008f10:	2101      	moveq	r1, #1
 8008f12:	61a3      	str	r3, [r4, #24]
 8008f14:	6121      	str	r1, [r4, #16]
 8008f16:	b1c5      	cbz	r5, 8008f4a <__d2b+0x96>
 8008f18:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f1c:	4405      	add	r5, r0
 8008f1e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f22:	603d      	str	r5, [r7, #0]
 8008f24:	6030      	str	r0, [r6, #0]
 8008f26:	4620      	mov	r0, r4
 8008f28:	b002      	add	sp, #8
 8008f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f32:	e7d6      	b.n	8008ee2 <__d2b+0x2e>
 8008f34:	6161      	str	r1, [r4, #20]
 8008f36:	e7e7      	b.n	8008f08 <__d2b+0x54>
 8008f38:	a801      	add	r0, sp, #4
 8008f3a:	f7ff fce7 	bl	800890c <__lo0bits>
 8008f3e:	2101      	movs	r1, #1
 8008f40:	9b01      	ldr	r3, [sp, #4]
 8008f42:	6121      	str	r1, [r4, #16]
 8008f44:	6163      	str	r3, [r4, #20]
 8008f46:	3020      	adds	r0, #32
 8008f48:	e7e5      	b.n	8008f16 <__d2b+0x62>
 8008f4a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008f4e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f52:	6038      	str	r0, [r7, #0]
 8008f54:	6918      	ldr	r0, [r3, #16]
 8008f56:	f7ff fcb9 	bl	80088cc <__hi0bits>
 8008f5a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008f5e:	6031      	str	r1, [r6, #0]
 8008f60:	e7e1      	b.n	8008f26 <__d2b+0x72>
 8008f62:	bf00      	nop
 8008f64:	0800aa0c 	.word	0x0800aa0c
 8008f68:	0800aa9c 	.word	0x0800aa9c

08008f6c <__ratio>:
 8008f6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f70:	4688      	mov	r8, r1
 8008f72:	4669      	mov	r1, sp
 8008f74:	4681      	mov	r9, r0
 8008f76:	f7ff ff49 	bl	8008e0c <__b2d>
 8008f7a:	460f      	mov	r7, r1
 8008f7c:	4604      	mov	r4, r0
 8008f7e:	460d      	mov	r5, r1
 8008f80:	4640      	mov	r0, r8
 8008f82:	a901      	add	r1, sp, #4
 8008f84:	f7ff ff42 	bl	8008e0c <__b2d>
 8008f88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f8c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008f90:	468b      	mov	fp, r1
 8008f92:	eba3 0c02 	sub.w	ip, r3, r2
 8008f96:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008f9a:	1a9b      	subs	r3, r3, r2
 8008f9c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	bfd5      	itete	le
 8008fa4:	460a      	movle	r2, r1
 8008fa6:	462a      	movgt	r2, r5
 8008fa8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008fac:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008fb0:	bfd8      	it	le
 8008fb2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008fb6:	465b      	mov	r3, fp
 8008fb8:	4602      	mov	r2, r0
 8008fba:	4639      	mov	r1, r7
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	f7f7 fbb5 	bl	800072c <__aeabi_ddiv>
 8008fc2:	b003      	add	sp, #12
 8008fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008fc8 <__copybits>:
 8008fc8:	3901      	subs	r1, #1
 8008fca:	b570      	push	{r4, r5, r6, lr}
 8008fcc:	1149      	asrs	r1, r1, #5
 8008fce:	6914      	ldr	r4, [r2, #16]
 8008fd0:	3101      	adds	r1, #1
 8008fd2:	f102 0314 	add.w	r3, r2, #20
 8008fd6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008fda:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008fde:	1f05      	subs	r5, r0, #4
 8008fe0:	42a3      	cmp	r3, r4
 8008fe2:	d30c      	bcc.n	8008ffe <__copybits+0x36>
 8008fe4:	1aa3      	subs	r3, r4, r2
 8008fe6:	3b11      	subs	r3, #17
 8008fe8:	f023 0303 	bic.w	r3, r3, #3
 8008fec:	3211      	adds	r2, #17
 8008fee:	42a2      	cmp	r2, r4
 8008ff0:	bf88      	it	hi
 8008ff2:	2300      	movhi	r3, #0
 8008ff4:	4418      	add	r0, r3
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	4288      	cmp	r0, r1
 8008ffa:	d305      	bcc.n	8009008 <__copybits+0x40>
 8008ffc:	bd70      	pop	{r4, r5, r6, pc}
 8008ffe:	f853 6b04 	ldr.w	r6, [r3], #4
 8009002:	f845 6f04 	str.w	r6, [r5, #4]!
 8009006:	e7eb      	b.n	8008fe0 <__copybits+0x18>
 8009008:	f840 3b04 	str.w	r3, [r0], #4
 800900c:	e7f4      	b.n	8008ff8 <__copybits+0x30>

0800900e <__any_on>:
 800900e:	f100 0214 	add.w	r2, r0, #20
 8009012:	6900      	ldr	r0, [r0, #16]
 8009014:	114b      	asrs	r3, r1, #5
 8009016:	4298      	cmp	r0, r3
 8009018:	b510      	push	{r4, lr}
 800901a:	db11      	blt.n	8009040 <__any_on+0x32>
 800901c:	dd0a      	ble.n	8009034 <__any_on+0x26>
 800901e:	f011 011f 	ands.w	r1, r1, #31
 8009022:	d007      	beq.n	8009034 <__any_on+0x26>
 8009024:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009028:	fa24 f001 	lsr.w	r0, r4, r1
 800902c:	fa00 f101 	lsl.w	r1, r0, r1
 8009030:	428c      	cmp	r4, r1
 8009032:	d10b      	bne.n	800904c <__any_on+0x3e>
 8009034:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009038:	4293      	cmp	r3, r2
 800903a:	d803      	bhi.n	8009044 <__any_on+0x36>
 800903c:	2000      	movs	r0, #0
 800903e:	bd10      	pop	{r4, pc}
 8009040:	4603      	mov	r3, r0
 8009042:	e7f7      	b.n	8009034 <__any_on+0x26>
 8009044:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009048:	2900      	cmp	r1, #0
 800904a:	d0f5      	beq.n	8009038 <__any_on+0x2a>
 800904c:	2001      	movs	r0, #1
 800904e:	e7f6      	b.n	800903e <__any_on+0x30>

08009050 <_calloc_r>:
 8009050:	b538      	push	{r3, r4, r5, lr}
 8009052:	fb02 f501 	mul.w	r5, r2, r1
 8009056:	4629      	mov	r1, r5
 8009058:	f000 f854 	bl	8009104 <_malloc_r>
 800905c:	4604      	mov	r4, r0
 800905e:	b118      	cbz	r0, 8009068 <_calloc_r+0x18>
 8009060:	462a      	mov	r2, r5
 8009062:	2100      	movs	r1, #0
 8009064:	f7fc fbea 	bl	800583c <memset>
 8009068:	4620      	mov	r0, r4
 800906a:	bd38      	pop	{r3, r4, r5, pc}

0800906c <_free_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	4605      	mov	r5, r0
 8009070:	2900      	cmp	r1, #0
 8009072:	d043      	beq.n	80090fc <_free_r+0x90>
 8009074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009078:	1f0c      	subs	r4, r1, #4
 800907a:	2b00      	cmp	r3, #0
 800907c:	bfb8      	it	lt
 800907e:	18e4      	addlt	r4, r4, r3
 8009080:	f000 fa76 	bl	8009570 <__malloc_lock>
 8009084:	4a1e      	ldr	r2, [pc, #120]	; (8009100 <_free_r+0x94>)
 8009086:	6813      	ldr	r3, [r2, #0]
 8009088:	4610      	mov	r0, r2
 800908a:	b933      	cbnz	r3, 800909a <_free_r+0x2e>
 800908c:	6063      	str	r3, [r4, #4]
 800908e:	6014      	str	r4, [r2, #0]
 8009090:	4628      	mov	r0, r5
 8009092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009096:	f000 ba71 	b.w	800957c <__malloc_unlock>
 800909a:	42a3      	cmp	r3, r4
 800909c:	d90a      	bls.n	80090b4 <_free_r+0x48>
 800909e:	6821      	ldr	r1, [r4, #0]
 80090a0:	1862      	adds	r2, r4, r1
 80090a2:	4293      	cmp	r3, r2
 80090a4:	bf01      	itttt	eq
 80090a6:	681a      	ldreq	r2, [r3, #0]
 80090a8:	685b      	ldreq	r3, [r3, #4]
 80090aa:	1852      	addeq	r2, r2, r1
 80090ac:	6022      	streq	r2, [r4, #0]
 80090ae:	6063      	str	r3, [r4, #4]
 80090b0:	6004      	str	r4, [r0, #0]
 80090b2:	e7ed      	b.n	8009090 <_free_r+0x24>
 80090b4:	461a      	mov	r2, r3
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	b10b      	cbz	r3, 80090be <_free_r+0x52>
 80090ba:	42a3      	cmp	r3, r4
 80090bc:	d9fa      	bls.n	80090b4 <_free_r+0x48>
 80090be:	6811      	ldr	r1, [r2, #0]
 80090c0:	1850      	adds	r0, r2, r1
 80090c2:	42a0      	cmp	r0, r4
 80090c4:	d10b      	bne.n	80090de <_free_r+0x72>
 80090c6:	6820      	ldr	r0, [r4, #0]
 80090c8:	4401      	add	r1, r0
 80090ca:	1850      	adds	r0, r2, r1
 80090cc:	4283      	cmp	r3, r0
 80090ce:	6011      	str	r1, [r2, #0]
 80090d0:	d1de      	bne.n	8009090 <_free_r+0x24>
 80090d2:	6818      	ldr	r0, [r3, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	4401      	add	r1, r0
 80090d8:	6011      	str	r1, [r2, #0]
 80090da:	6053      	str	r3, [r2, #4]
 80090dc:	e7d8      	b.n	8009090 <_free_r+0x24>
 80090de:	d902      	bls.n	80090e6 <_free_r+0x7a>
 80090e0:	230c      	movs	r3, #12
 80090e2:	602b      	str	r3, [r5, #0]
 80090e4:	e7d4      	b.n	8009090 <_free_r+0x24>
 80090e6:	6820      	ldr	r0, [r4, #0]
 80090e8:	1821      	adds	r1, r4, r0
 80090ea:	428b      	cmp	r3, r1
 80090ec:	bf01      	itttt	eq
 80090ee:	6819      	ldreq	r1, [r3, #0]
 80090f0:	685b      	ldreq	r3, [r3, #4]
 80090f2:	1809      	addeq	r1, r1, r0
 80090f4:	6021      	streq	r1, [r4, #0]
 80090f6:	6063      	str	r3, [r4, #4]
 80090f8:	6054      	str	r4, [r2, #4]
 80090fa:	e7c9      	b.n	8009090 <_free_r+0x24>
 80090fc:	bd38      	pop	{r3, r4, r5, pc}
 80090fe:	bf00      	nop
 8009100:	20000f48 	.word	0x20000f48

08009104 <_malloc_r>:
 8009104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009106:	1ccd      	adds	r5, r1, #3
 8009108:	f025 0503 	bic.w	r5, r5, #3
 800910c:	3508      	adds	r5, #8
 800910e:	2d0c      	cmp	r5, #12
 8009110:	bf38      	it	cc
 8009112:	250c      	movcc	r5, #12
 8009114:	2d00      	cmp	r5, #0
 8009116:	4606      	mov	r6, r0
 8009118:	db01      	blt.n	800911e <_malloc_r+0x1a>
 800911a:	42a9      	cmp	r1, r5
 800911c:	d903      	bls.n	8009126 <_malloc_r+0x22>
 800911e:	230c      	movs	r3, #12
 8009120:	6033      	str	r3, [r6, #0]
 8009122:	2000      	movs	r0, #0
 8009124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009126:	f000 fa23 	bl	8009570 <__malloc_lock>
 800912a:	4921      	ldr	r1, [pc, #132]	; (80091b0 <_malloc_r+0xac>)
 800912c:	680a      	ldr	r2, [r1, #0]
 800912e:	4614      	mov	r4, r2
 8009130:	b99c      	cbnz	r4, 800915a <_malloc_r+0x56>
 8009132:	4f20      	ldr	r7, [pc, #128]	; (80091b4 <_malloc_r+0xb0>)
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	b923      	cbnz	r3, 8009142 <_malloc_r+0x3e>
 8009138:	4621      	mov	r1, r4
 800913a:	4630      	mov	r0, r6
 800913c:	f000 f99e 	bl	800947c <_sbrk_r>
 8009140:	6038      	str	r0, [r7, #0]
 8009142:	4629      	mov	r1, r5
 8009144:	4630      	mov	r0, r6
 8009146:	f000 f999 	bl	800947c <_sbrk_r>
 800914a:	1c43      	adds	r3, r0, #1
 800914c:	d123      	bne.n	8009196 <_malloc_r+0x92>
 800914e:	230c      	movs	r3, #12
 8009150:	4630      	mov	r0, r6
 8009152:	6033      	str	r3, [r6, #0]
 8009154:	f000 fa12 	bl	800957c <__malloc_unlock>
 8009158:	e7e3      	b.n	8009122 <_malloc_r+0x1e>
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	1b5b      	subs	r3, r3, r5
 800915e:	d417      	bmi.n	8009190 <_malloc_r+0x8c>
 8009160:	2b0b      	cmp	r3, #11
 8009162:	d903      	bls.n	800916c <_malloc_r+0x68>
 8009164:	6023      	str	r3, [r4, #0]
 8009166:	441c      	add	r4, r3
 8009168:	6025      	str	r5, [r4, #0]
 800916a:	e004      	b.n	8009176 <_malloc_r+0x72>
 800916c:	6863      	ldr	r3, [r4, #4]
 800916e:	42a2      	cmp	r2, r4
 8009170:	bf0c      	ite	eq
 8009172:	600b      	streq	r3, [r1, #0]
 8009174:	6053      	strne	r3, [r2, #4]
 8009176:	4630      	mov	r0, r6
 8009178:	f000 fa00 	bl	800957c <__malloc_unlock>
 800917c:	f104 000b 	add.w	r0, r4, #11
 8009180:	1d23      	adds	r3, r4, #4
 8009182:	f020 0007 	bic.w	r0, r0, #7
 8009186:	1ac2      	subs	r2, r0, r3
 8009188:	d0cc      	beq.n	8009124 <_malloc_r+0x20>
 800918a:	1a1b      	subs	r3, r3, r0
 800918c:	50a3      	str	r3, [r4, r2]
 800918e:	e7c9      	b.n	8009124 <_malloc_r+0x20>
 8009190:	4622      	mov	r2, r4
 8009192:	6864      	ldr	r4, [r4, #4]
 8009194:	e7cc      	b.n	8009130 <_malloc_r+0x2c>
 8009196:	1cc4      	adds	r4, r0, #3
 8009198:	f024 0403 	bic.w	r4, r4, #3
 800919c:	42a0      	cmp	r0, r4
 800919e:	d0e3      	beq.n	8009168 <_malloc_r+0x64>
 80091a0:	1a21      	subs	r1, r4, r0
 80091a2:	4630      	mov	r0, r6
 80091a4:	f000 f96a 	bl	800947c <_sbrk_r>
 80091a8:	3001      	adds	r0, #1
 80091aa:	d1dd      	bne.n	8009168 <_malloc_r+0x64>
 80091ac:	e7cf      	b.n	800914e <_malloc_r+0x4a>
 80091ae:	bf00      	nop
 80091b0:	20000f48 	.word	0x20000f48
 80091b4:	20000f4c 	.word	0x20000f4c

080091b8 <__ssputs_r>:
 80091b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091bc:	688e      	ldr	r6, [r1, #8]
 80091be:	4682      	mov	sl, r0
 80091c0:	429e      	cmp	r6, r3
 80091c2:	460c      	mov	r4, r1
 80091c4:	4690      	mov	r8, r2
 80091c6:	461f      	mov	r7, r3
 80091c8:	d838      	bhi.n	800923c <__ssputs_r+0x84>
 80091ca:	898a      	ldrh	r2, [r1, #12]
 80091cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80091d0:	d032      	beq.n	8009238 <__ssputs_r+0x80>
 80091d2:	6825      	ldr	r5, [r4, #0]
 80091d4:	6909      	ldr	r1, [r1, #16]
 80091d6:	3301      	adds	r3, #1
 80091d8:	eba5 0901 	sub.w	r9, r5, r1
 80091dc:	6965      	ldr	r5, [r4, #20]
 80091de:	444b      	add	r3, r9
 80091e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091e8:	106d      	asrs	r5, r5, #1
 80091ea:	429d      	cmp	r5, r3
 80091ec:	bf38      	it	cc
 80091ee:	461d      	movcc	r5, r3
 80091f0:	0553      	lsls	r3, r2, #21
 80091f2:	d531      	bpl.n	8009258 <__ssputs_r+0xa0>
 80091f4:	4629      	mov	r1, r5
 80091f6:	f7ff ff85 	bl	8009104 <_malloc_r>
 80091fa:	4606      	mov	r6, r0
 80091fc:	b950      	cbnz	r0, 8009214 <__ssputs_r+0x5c>
 80091fe:	230c      	movs	r3, #12
 8009200:	f04f 30ff 	mov.w	r0, #4294967295
 8009204:	f8ca 3000 	str.w	r3, [sl]
 8009208:	89a3      	ldrh	r3, [r4, #12]
 800920a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800920e:	81a3      	strh	r3, [r4, #12]
 8009210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009214:	464a      	mov	r2, r9
 8009216:	6921      	ldr	r1, [r4, #16]
 8009218:	f7fc fb02 	bl	8005820 <memcpy>
 800921c:	89a3      	ldrh	r3, [r4, #12]
 800921e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009226:	81a3      	strh	r3, [r4, #12]
 8009228:	6126      	str	r6, [r4, #16]
 800922a:	444e      	add	r6, r9
 800922c:	6026      	str	r6, [r4, #0]
 800922e:	463e      	mov	r6, r7
 8009230:	6165      	str	r5, [r4, #20]
 8009232:	eba5 0509 	sub.w	r5, r5, r9
 8009236:	60a5      	str	r5, [r4, #8]
 8009238:	42be      	cmp	r6, r7
 800923a:	d900      	bls.n	800923e <__ssputs_r+0x86>
 800923c:	463e      	mov	r6, r7
 800923e:	4632      	mov	r2, r6
 8009240:	4641      	mov	r1, r8
 8009242:	6820      	ldr	r0, [r4, #0]
 8009244:	f000 f97a 	bl	800953c <memmove>
 8009248:	68a3      	ldr	r3, [r4, #8]
 800924a:	6822      	ldr	r2, [r4, #0]
 800924c:	1b9b      	subs	r3, r3, r6
 800924e:	4432      	add	r2, r6
 8009250:	2000      	movs	r0, #0
 8009252:	60a3      	str	r3, [r4, #8]
 8009254:	6022      	str	r2, [r4, #0]
 8009256:	e7db      	b.n	8009210 <__ssputs_r+0x58>
 8009258:	462a      	mov	r2, r5
 800925a:	f000 f995 	bl	8009588 <_realloc_r>
 800925e:	4606      	mov	r6, r0
 8009260:	2800      	cmp	r0, #0
 8009262:	d1e1      	bne.n	8009228 <__ssputs_r+0x70>
 8009264:	4650      	mov	r0, sl
 8009266:	6921      	ldr	r1, [r4, #16]
 8009268:	f7ff ff00 	bl	800906c <_free_r>
 800926c:	e7c7      	b.n	80091fe <__ssputs_r+0x46>
	...

08009270 <_svfiprintf_r>:
 8009270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009274:	4698      	mov	r8, r3
 8009276:	898b      	ldrh	r3, [r1, #12]
 8009278:	4607      	mov	r7, r0
 800927a:	061b      	lsls	r3, r3, #24
 800927c:	460d      	mov	r5, r1
 800927e:	4614      	mov	r4, r2
 8009280:	b09d      	sub	sp, #116	; 0x74
 8009282:	d50e      	bpl.n	80092a2 <_svfiprintf_r+0x32>
 8009284:	690b      	ldr	r3, [r1, #16]
 8009286:	b963      	cbnz	r3, 80092a2 <_svfiprintf_r+0x32>
 8009288:	2140      	movs	r1, #64	; 0x40
 800928a:	f7ff ff3b 	bl	8009104 <_malloc_r>
 800928e:	6028      	str	r0, [r5, #0]
 8009290:	6128      	str	r0, [r5, #16]
 8009292:	b920      	cbnz	r0, 800929e <_svfiprintf_r+0x2e>
 8009294:	230c      	movs	r3, #12
 8009296:	603b      	str	r3, [r7, #0]
 8009298:	f04f 30ff 	mov.w	r0, #4294967295
 800929c:	e0d1      	b.n	8009442 <_svfiprintf_r+0x1d2>
 800929e:	2340      	movs	r3, #64	; 0x40
 80092a0:	616b      	str	r3, [r5, #20]
 80092a2:	2300      	movs	r3, #0
 80092a4:	9309      	str	r3, [sp, #36]	; 0x24
 80092a6:	2320      	movs	r3, #32
 80092a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092ac:	2330      	movs	r3, #48	; 0x30
 80092ae:	f04f 0901 	mov.w	r9, #1
 80092b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80092b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800945c <_svfiprintf_r+0x1ec>
 80092ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092be:	4623      	mov	r3, r4
 80092c0:	469a      	mov	sl, r3
 80092c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092c6:	b10a      	cbz	r2, 80092cc <_svfiprintf_r+0x5c>
 80092c8:	2a25      	cmp	r2, #37	; 0x25
 80092ca:	d1f9      	bne.n	80092c0 <_svfiprintf_r+0x50>
 80092cc:	ebba 0b04 	subs.w	fp, sl, r4
 80092d0:	d00b      	beq.n	80092ea <_svfiprintf_r+0x7a>
 80092d2:	465b      	mov	r3, fp
 80092d4:	4622      	mov	r2, r4
 80092d6:	4629      	mov	r1, r5
 80092d8:	4638      	mov	r0, r7
 80092da:	f7ff ff6d 	bl	80091b8 <__ssputs_r>
 80092de:	3001      	adds	r0, #1
 80092e0:	f000 80aa 	beq.w	8009438 <_svfiprintf_r+0x1c8>
 80092e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092e6:	445a      	add	r2, fp
 80092e8:	9209      	str	r2, [sp, #36]	; 0x24
 80092ea:	f89a 3000 	ldrb.w	r3, [sl]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f000 80a2 	beq.w	8009438 <_svfiprintf_r+0x1c8>
 80092f4:	2300      	movs	r3, #0
 80092f6:	f04f 32ff 	mov.w	r2, #4294967295
 80092fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092fe:	f10a 0a01 	add.w	sl, sl, #1
 8009302:	9304      	str	r3, [sp, #16]
 8009304:	9307      	str	r3, [sp, #28]
 8009306:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800930a:	931a      	str	r3, [sp, #104]	; 0x68
 800930c:	4654      	mov	r4, sl
 800930e:	2205      	movs	r2, #5
 8009310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009314:	4851      	ldr	r0, [pc, #324]	; (800945c <_svfiprintf_r+0x1ec>)
 8009316:	f7ff f9d5 	bl	80086c4 <memchr>
 800931a:	9a04      	ldr	r2, [sp, #16]
 800931c:	b9d8      	cbnz	r0, 8009356 <_svfiprintf_r+0xe6>
 800931e:	06d0      	lsls	r0, r2, #27
 8009320:	bf44      	itt	mi
 8009322:	2320      	movmi	r3, #32
 8009324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009328:	0711      	lsls	r1, r2, #28
 800932a:	bf44      	itt	mi
 800932c:	232b      	movmi	r3, #43	; 0x2b
 800932e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009332:	f89a 3000 	ldrb.w	r3, [sl]
 8009336:	2b2a      	cmp	r3, #42	; 0x2a
 8009338:	d015      	beq.n	8009366 <_svfiprintf_r+0xf6>
 800933a:	4654      	mov	r4, sl
 800933c:	2000      	movs	r0, #0
 800933e:	f04f 0c0a 	mov.w	ip, #10
 8009342:	9a07      	ldr	r2, [sp, #28]
 8009344:	4621      	mov	r1, r4
 8009346:	f811 3b01 	ldrb.w	r3, [r1], #1
 800934a:	3b30      	subs	r3, #48	; 0x30
 800934c:	2b09      	cmp	r3, #9
 800934e:	d94e      	bls.n	80093ee <_svfiprintf_r+0x17e>
 8009350:	b1b0      	cbz	r0, 8009380 <_svfiprintf_r+0x110>
 8009352:	9207      	str	r2, [sp, #28]
 8009354:	e014      	b.n	8009380 <_svfiprintf_r+0x110>
 8009356:	eba0 0308 	sub.w	r3, r0, r8
 800935a:	fa09 f303 	lsl.w	r3, r9, r3
 800935e:	4313      	orrs	r3, r2
 8009360:	46a2      	mov	sl, r4
 8009362:	9304      	str	r3, [sp, #16]
 8009364:	e7d2      	b.n	800930c <_svfiprintf_r+0x9c>
 8009366:	9b03      	ldr	r3, [sp, #12]
 8009368:	1d19      	adds	r1, r3, #4
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	9103      	str	r1, [sp, #12]
 800936e:	2b00      	cmp	r3, #0
 8009370:	bfbb      	ittet	lt
 8009372:	425b      	neglt	r3, r3
 8009374:	f042 0202 	orrlt.w	r2, r2, #2
 8009378:	9307      	strge	r3, [sp, #28]
 800937a:	9307      	strlt	r3, [sp, #28]
 800937c:	bfb8      	it	lt
 800937e:	9204      	strlt	r2, [sp, #16]
 8009380:	7823      	ldrb	r3, [r4, #0]
 8009382:	2b2e      	cmp	r3, #46	; 0x2e
 8009384:	d10c      	bne.n	80093a0 <_svfiprintf_r+0x130>
 8009386:	7863      	ldrb	r3, [r4, #1]
 8009388:	2b2a      	cmp	r3, #42	; 0x2a
 800938a:	d135      	bne.n	80093f8 <_svfiprintf_r+0x188>
 800938c:	9b03      	ldr	r3, [sp, #12]
 800938e:	3402      	adds	r4, #2
 8009390:	1d1a      	adds	r2, r3, #4
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	9203      	str	r2, [sp, #12]
 8009396:	2b00      	cmp	r3, #0
 8009398:	bfb8      	it	lt
 800939a:	f04f 33ff 	movlt.w	r3, #4294967295
 800939e:	9305      	str	r3, [sp, #20]
 80093a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800946c <_svfiprintf_r+0x1fc>
 80093a4:	2203      	movs	r2, #3
 80093a6:	4650      	mov	r0, sl
 80093a8:	7821      	ldrb	r1, [r4, #0]
 80093aa:	f7ff f98b 	bl	80086c4 <memchr>
 80093ae:	b140      	cbz	r0, 80093c2 <_svfiprintf_r+0x152>
 80093b0:	2340      	movs	r3, #64	; 0x40
 80093b2:	eba0 000a 	sub.w	r0, r0, sl
 80093b6:	fa03 f000 	lsl.w	r0, r3, r0
 80093ba:	9b04      	ldr	r3, [sp, #16]
 80093bc:	3401      	adds	r4, #1
 80093be:	4303      	orrs	r3, r0
 80093c0:	9304      	str	r3, [sp, #16]
 80093c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093c6:	2206      	movs	r2, #6
 80093c8:	4825      	ldr	r0, [pc, #148]	; (8009460 <_svfiprintf_r+0x1f0>)
 80093ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093ce:	f7ff f979 	bl	80086c4 <memchr>
 80093d2:	2800      	cmp	r0, #0
 80093d4:	d038      	beq.n	8009448 <_svfiprintf_r+0x1d8>
 80093d6:	4b23      	ldr	r3, [pc, #140]	; (8009464 <_svfiprintf_r+0x1f4>)
 80093d8:	bb1b      	cbnz	r3, 8009422 <_svfiprintf_r+0x1b2>
 80093da:	9b03      	ldr	r3, [sp, #12]
 80093dc:	3307      	adds	r3, #7
 80093de:	f023 0307 	bic.w	r3, r3, #7
 80093e2:	3308      	adds	r3, #8
 80093e4:	9303      	str	r3, [sp, #12]
 80093e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e8:	4433      	add	r3, r6
 80093ea:	9309      	str	r3, [sp, #36]	; 0x24
 80093ec:	e767      	b.n	80092be <_svfiprintf_r+0x4e>
 80093ee:	460c      	mov	r4, r1
 80093f0:	2001      	movs	r0, #1
 80093f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80093f6:	e7a5      	b.n	8009344 <_svfiprintf_r+0xd4>
 80093f8:	2300      	movs	r3, #0
 80093fa:	f04f 0c0a 	mov.w	ip, #10
 80093fe:	4619      	mov	r1, r3
 8009400:	3401      	adds	r4, #1
 8009402:	9305      	str	r3, [sp, #20]
 8009404:	4620      	mov	r0, r4
 8009406:	f810 2b01 	ldrb.w	r2, [r0], #1
 800940a:	3a30      	subs	r2, #48	; 0x30
 800940c:	2a09      	cmp	r2, #9
 800940e:	d903      	bls.n	8009418 <_svfiprintf_r+0x1a8>
 8009410:	2b00      	cmp	r3, #0
 8009412:	d0c5      	beq.n	80093a0 <_svfiprintf_r+0x130>
 8009414:	9105      	str	r1, [sp, #20]
 8009416:	e7c3      	b.n	80093a0 <_svfiprintf_r+0x130>
 8009418:	4604      	mov	r4, r0
 800941a:	2301      	movs	r3, #1
 800941c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009420:	e7f0      	b.n	8009404 <_svfiprintf_r+0x194>
 8009422:	ab03      	add	r3, sp, #12
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	462a      	mov	r2, r5
 8009428:	4638      	mov	r0, r7
 800942a:	4b0f      	ldr	r3, [pc, #60]	; (8009468 <_svfiprintf_r+0x1f8>)
 800942c:	a904      	add	r1, sp, #16
 800942e:	f7fc faab 	bl	8005988 <_printf_float>
 8009432:	1c42      	adds	r2, r0, #1
 8009434:	4606      	mov	r6, r0
 8009436:	d1d6      	bne.n	80093e6 <_svfiprintf_r+0x176>
 8009438:	89ab      	ldrh	r3, [r5, #12]
 800943a:	065b      	lsls	r3, r3, #25
 800943c:	f53f af2c 	bmi.w	8009298 <_svfiprintf_r+0x28>
 8009440:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009442:	b01d      	add	sp, #116	; 0x74
 8009444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009448:	ab03      	add	r3, sp, #12
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	462a      	mov	r2, r5
 800944e:	4638      	mov	r0, r7
 8009450:	4b05      	ldr	r3, [pc, #20]	; (8009468 <_svfiprintf_r+0x1f8>)
 8009452:	a904      	add	r1, sp, #16
 8009454:	f7fc fd34 	bl	8005ec0 <_printf_i>
 8009458:	e7eb      	b.n	8009432 <_svfiprintf_r+0x1c2>
 800945a:	bf00      	nop
 800945c:	0800abfc 	.word	0x0800abfc
 8009460:	0800ac06 	.word	0x0800ac06
 8009464:	08005989 	.word	0x08005989
 8009468:	080091b9 	.word	0x080091b9
 800946c:	0800ac02 	.word	0x0800ac02

08009470 <nan>:
 8009470:	2000      	movs	r0, #0
 8009472:	4901      	ldr	r1, [pc, #4]	; (8009478 <nan+0x8>)
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	7ff80000 	.word	0x7ff80000

0800947c <_sbrk_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	2300      	movs	r3, #0
 8009480:	4d05      	ldr	r5, [pc, #20]	; (8009498 <_sbrk_r+0x1c>)
 8009482:	4604      	mov	r4, r0
 8009484:	4608      	mov	r0, r1
 8009486:	602b      	str	r3, [r5, #0]
 8009488:	f7f8 f91c 	bl	80016c4 <_sbrk>
 800948c:	1c43      	adds	r3, r0, #1
 800948e:	d102      	bne.n	8009496 <_sbrk_r+0x1a>
 8009490:	682b      	ldr	r3, [r5, #0]
 8009492:	b103      	cbz	r3, 8009496 <_sbrk_r+0x1a>
 8009494:	6023      	str	r3, [r4, #0]
 8009496:	bd38      	pop	{r3, r4, r5, pc}
 8009498:	20001564 	.word	0x20001564

0800949c <strncmp>:
 800949c:	b510      	push	{r4, lr}
 800949e:	b16a      	cbz	r2, 80094bc <strncmp+0x20>
 80094a0:	3901      	subs	r1, #1
 80094a2:	1884      	adds	r4, r0, r2
 80094a4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80094a8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d103      	bne.n	80094b8 <strncmp+0x1c>
 80094b0:	42a0      	cmp	r0, r4
 80094b2:	d001      	beq.n	80094b8 <strncmp+0x1c>
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d1f5      	bne.n	80094a4 <strncmp+0x8>
 80094b8:	1a98      	subs	r0, r3, r2
 80094ba:	bd10      	pop	{r4, pc}
 80094bc:	4610      	mov	r0, r2
 80094be:	e7fc      	b.n	80094ba <strncmp+0x1e>

080094c0 <__ascii_wctomb>:
 80094c0:	4603      	mov	r3, r0
 80094c2:	4608      	mov	r0, r1
 80094c4:	b141      	cbz	r1, 80094d8 <__ascii_wctomb+0x18>
 80094c6:	2aff      	cmp	r2, #255	; 0xff
 80094c8:	d904      	bls.n	80094d4 <__ascii_wctomb+0x14>
 80094ca:	228a      	movs	r2, #138	; 0x8a
 80094cc:	f04f 30ff 	mov.w	r0, #4294967295
 80094d0:	601a      	str	r2, [r3, #0]
 80094d2:	4770      	bx	lr
 80094d4:	2001      	movs	r0, #1
 80094d6:	700a      	strb	r2, [r1, #0]
 80094d8:	4770      	bx	lr
	...

080094dc <__assert_func>:
 80094dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094de:	4614      	mov	r4, r2
 80094e0:	461a      	mov	r2, r3
 80094e2:	4b09      	ldr	r3, [pc, #36]	; (8009508 <__assert_func+0x2c>)
 80094e4:	4605      	mov	r5, r0
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68d8      	ldr	r0, [r3, #12]
 80094ea:	b14c      	cbz	r4, 8009500 <__assert_func+0x24>
 80094ec:	4b07      	ldr	r3, [pc, #28]	; (800950c <__assert_func+0x30>)
 80094ee:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094f2:	9100      	str	r1, [sp, #0]
 80094f4:	462b      	mov	r3, r5
 80094f6:	4906      	ldr	r1, [pc, #24]	; (8009510 <__assert_func+0x34>)
 80094f8:	f000 f80e 	bl	8009518 <fiprintf>
 80094fc:	f000 fa82 	bl	8009a04 <abort>
 8009500:	4b04      	ldr	r3, [pc, #16]	; (8009514 <__assert_func+0x38>)
 8009502:	461c      	mov	r4, r3
 8009504:	e7f3      	b.n	80094ee <__assert_func+0x12>
 8009506:	bf00      	nop
 8009508:	20000018 	.word	0x20000018
 800950c:	0800ac0d 	.word	0x0800ac0d
 8009510:	0800ac1a 	.word	0x0800ac1a
 8009514:	0800ac48 	.word	0x0800ac48

08009518 <fiprintf>:
 8009518:	b40e      	push	{r1, r2, r3}
 800951a:	b503      	push	{r0, r1, lr}
 800951c:	4601      	mov	r1, r0
 800951e:	ab03      	add	r3, sp, #12
 8009520:	4805      	ldr	r0, [pc, #20]	; (8009538 <fiprintf+0x20>)
 8009522:	f853 2b04 	ldr.w	r2, [r3], #4
 8009526:	6800      	ldr	r0, [r0, #0]
 8009528:	9301      	str	r3, [sp, #4]
 800952a:	f000 f87b 	bl	8009624 <_vfiprintf_r>
 800952e:	b002      	add	sp, #8
 8009530:	f85d eb04 	ldr.w	lr, [sp], #4
 8009534:	b003      	add	sp, #12
 8009536:	4770      	bx	lr
 8009538:	20000018 	.word	0x20000018

0800953c <memmove>:
 800953c:	4288      	cmp	r0, r1
 800953e:	b510      	push	{r4, lr}
 8009540:	eb01 0402 	add.w	r4, r1, r2
 8009544:	d902      	bls.n	800954c <memmove+0x10>
 8009546:	4284      	cmp	r4, r0
 8009548:	4623      	mov	r3, r4
 800954a:	d807      	bhi.n	800955c <memmove+0x20>
 800954c:	1e43      	subs	r3, r0, #1
 800954e:	42a1      	cmp	r1, r4
 8009550:	d008      	beq.n	8009564 <memmove+0x28>
 8009552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009556:	f803 2f01 	strb.w	r2, [r3, #1]!
 800955a:	e7f8      	b.n	800954e <memmove+0x12>
 800955c:	4601      	mov	r1, r0
 800955e:	4402      	add	r2, r0
 8009560:	428a      	cmp	r2, r1
 8009562:	d100      	bne.n	8009566 <memmove+0x2a>
 8009564:	bd10      	pop	{r4, pc}
 8009566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800956a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800956e:	e7f7      	b.n	8009560 <memmove+0x24>

08009570 <__malloc_lock>:
 8009570:	4801      	ldr	r0, [pc, #4]	; (8009578 <__malloc_lock+0x8>)
 8009572:	f000 bc07 	b.w	8009d84 <__retarget_lock_acquire_recursive>
 8009576:	bf00      	nop
 8009578:	2000156c 	.word	0x2000156c

0800957c <__malloc_unlock>:
 800957c:	4801      	ldr	r0, [pc, #4]	; (8009584 <__malloc_unlock+0x8>)
 800957e:	f000 bc02 	b.w	8009d86 <__retarget_lock_release_recursive>
 8009582:	bf00      	nop
 8009584:	2000156c 	.word	0x2000156c

08009588 <_realloc_r>:
 8009588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958a:	4607      	mov	r7, r0
 800958c:	4614      	mov	r4, r2
 800958e:	460e      	mov	r6, r1
 8009590:	b921      	cbnz	r1, 800959c <_realloc_r+0x14>
 8009592:	4611      	mov	r1, r2
 8009594:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009598:	f7ff bdb4 	b.w	8009104 <_malloc_r>
 800959c:	b922      	cbnz	r2, 80095a8 <_realloc_r+0x20>
 800959e:	f7ff fd65 	bl	800906c <_free_r>
 80095a2:	4625      	mov	r5, r4
 80095a4:	4628      	mov	r0, r5
 80095a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095a8:	f000 fc52 	bl	8009e50 <_malloc_usable_size_r>
 80095ac:	42a0      	cmp	r0, r4
 80095ae:	d20f      	bcs.n	80095d0 <_realloc_r+0x48>
 80095b0:	4621      	mov	r1, r4
 80095b2:	4638      	mov	r0, r7
 80095b4:	f7ff fda6 	bl	8009104 <_malloc_r>
 80095b8:	4605      	mov	r5, r0
 80095ba:	2800      	cmp	r0, #0
 80095bc:	d0f2      	beq.n	80095a4 <_realloc_r+0x1c>
 80095be:	4631      	mov	r1, r6
 80095c0:	4622      	mov	r2, r4
 80095c2:	f7fc f92d 	bl	8005820 <memcpy>
 80095c6:	4631      	mov	r1, r6
 80095c8:	4638      	mov	r0, r7
 80095ca:	f7ff fd4f 	bl	800906c <_free_r>
 80095ce:	e7e9      	b.n	80095a4 <_realloc_r+0x1c>
 80095d0:	4635      	mov	r5, r6
 80095d2:	e7e7      	b.n	80095a4 <_realloc_r+0x1c>

080095d4 <__sfputc_r>:
 80095d4:	6893      	ldr	r3, [r2, #8]
 80095d6:	b410      	push	{r4}
 80095d8:	3b01      	subs	r3, #1
 80095da:	2b00      	cmp	r3, #0
 80095dc:	6093      	str	r3, [r2, #8]
 80095de:	da07      	bge.n	80095f0 <__sfputc_r+0x1c>
 80095e0:	6994      	ldr	r4, [r2, #24]
 80095e2:	42a3      	cmp	r3, r4
 80095e4:	db01      	blt.n	80095ea <__sfputc_r+0x16>
 80095e6:	290a      	cmp	r1, #10
 80095e8:	d102      	bne.n	80095f0 <__sfputc_r+0x1c>
 80095ea:	bc10      	pop	{r4}
 80095ec:	f000 b94a 	b.w	8009884 <__swbuf_r>
 80095f0:	6813      	ldr	r3, [r2, #0]
 80095f2:	1c58      	adds	r0, r3, #1
 80095f4:	6010      	str	r0, [r2, #0]
 80095f6:	7019      	strb	r1, [r3, #0]
 80095f8:	4608      	mov	r0, r1
 80095fa:	bc10      	pop	{r4}
 80095fc:	4770      	bx	lr

080095fe <__sfputs_r>:
 80095fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009600:	4606      	mov	r6, r0
 8009602:	460f      	mov	r7, r1
 8009604:	4614      	mov	r4, r2
 8009606:	18d5      	adds	r5, r2, r3
 8009608:	42ac      	cmp	r4, r5
 800960a:	d101      	bne.n	8009610 <__sfputs_r+0x12>
 800960c:	2000      	movs	r0, #0
 800960e:	e007      	b.n	8009620 <__sfputs_r+0x22>
 8009610:	463a      	mov	r2, r7
 8009612:	4630      	mov	r0, r6
 8009614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009618:	f7ff ffdc 	bl	80095d4 <__sfputc_r>
 800961c:	1c43      	adds	r3, r0, #1
 800961e:	d1f3      	bne.n	8009608 <__sfputs_r+0xa>
 8009620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009624 <_vfiprintf_r>:
 8009624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009628:	460d      	mov	r5, r1
 800962a:	4614      	mov	r4, r2
 800962c:	4698      	mov	r8, r3
 800962e:	4606      	mov	r6, r0
 8009630:	b09d      	sub	sp, #116	; 0x74
 8009632:	b118      	cbz	r0, 800963c <_vfiprintf_r+0x18>
 8009634:	6983      	ldr	r3, [r0, #24]
 8009636:	b90b      	cbnz	r3, 800963c <_vfiprintf_r+0x18>
 8009638:	f000 fb06 	bl	8009c48 <__sinit>
 800963c:	4b89      	ldr	r3, [pc, #548]	; (8009864 <_vfiprintf_r+0x240>)
 800963e:	429d      	cmp	r5, r3
 8009640:	d11b      	bne.n	800967a <_vfiprintf_r+0x56>
 8009642:	6875      	ldr	r5, [r6, #4]
 8009644:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009646:	07d9      	lsls	r1, r3, #31
 8009648:	d405      	bmi.n	8009656 <_vfiprintf_r+0x32>
 800964a:	89ab      	ldrh	r3, [r5, #12]
 800964c:	059a      	lsls	r2, r3, #22
 800964e:	d402      	bmi.n	8009656 <_vfiprintf_r+0x32>
 8009650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009652:	f000 fb97 	bl	8009d84 <__retarget_lock_acquire_recursive>
 8009656:	89ab      	ldrh	r3, [r5, #12]
 8009658:	071b      	lsls	r3, r3, #28
 800965a:	d501      	bpl.n	8009660 <_vfiprintf_r+0x3c>
 800965c:	692b      	ldr	r3, [r5, #16]
 800965e:	b9eb      	cbnz	r3, 800969c <_vfiprintf_r+0x78>
 8009660:	4629      	mov	r1, r5
 8009662:	4630      	mov	r0, r6
 8009664:	f000 f960 	bl	8009928 <__swsetup_r>
 8009668:	b1c0      	cbz	r0, 800969c <_vfiprintf_r+0x78>
 800966a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800966c:	07dc      	lsls	r4, r3, #31
 800966e:	d50e      	bpl.n	800968e <_vfiprintf_r+0x6a>
 8009670:	f04f 30ff 	mov.w	r0, #4294967295
 8009674:	b01d      	add	sp, #116	; 0x74
 8009676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800967a:	4b7b      	ldr	r3, [pc, #492]	; (8009868 <_vfiprintf_r+0x244>)
 800967c:	429d      	cmp	r5, r3
 800967e:	d101      	bne.n	8009684 <_vfiprintf_r+0x60>
 8009680:	68b5      	ldr	r5, [r6, #8]
 8009682:	e7df      	b.n	8009644 <_vfiprintf_r+0x20>
 8009684:	4b79      	ldr	r3, [pc, #484]	; (800986c <_vfiprintf_r+0x248>)
 8009686:	429d      	cmp	r5, r3
 8009688:	bf08      	it	eq
 800968a:	68f5      	ldreq	r5, [r6, #12]
 800968c:	e7da      	b.n	8009644 <_vfiprintf_r+0x20>
 800968e:	89ab      	ldrh	r3, [r5, #12]
 8009690:	0598      	lsls	r0, r3, #22
 8009692:	d4ed      	bmi.n	8009670 <_vfiprintf_r+0x4c>
 8009694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009696:	f000 fb76 	bl	8009d86 <__retarget_lock_release_recursive>
 800969a:	e7e9      	b.n	8009670 <_vfiprintf_r+0x4c>
 800969c:	2300      	movs	r3, #0
 800969e:	9309      	str	r3, [sp, #36]	; 0x24
 80096a0:	2320      	movs	r3, #32
 80096a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096a6:	2330      	movs	r3, #48	; 0x30
 80096a8:	f04f 0901 	mov.w	r9, #1
 80096ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80096b0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009870 <_vfiprintf_r+0x24c>
 80096b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096b8:	4623      	mov	r3, r4
 80096ba:	469a      	mov	sl, r3
 80096bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096c0:	b10a      	cbz	r2, 80096c6 <_vfiprintf_r+0xa2>
 80096c2:	2a25      	cmp	r2, #37	; 0x25
 80096c4:	d1f9      	bne.n	80096ba <_vfiprintf_r+0x96>
 80096c6:	ebba 0b04 	subs.w	fp, sl, r4
 80096ca:	d00b      	beq.n	80096e4 <_vfiprintf_r+0xc0>
 80096cc:	465b      	mov	r3, fp
 80096ce:	4622      	mov	r2, r4
 80096d0:	4629      	mov	r1, r5
 80096d2:	4630      	mov	r0, r6
 80096d4:	f7ff ff93 	bl	80095fe <__sfputs_r>
 80096d8:	3001      	adds	r0, #1
 80096da:	f000 80aa 	beq.w	8009832 <_vfiprintf_r+0x20e>
 80096de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096e0:	445a      	add	r2, fp
 80096e2:	9209      	str	r2, [sp, #36]	; 0x24
 80096e4:	f89a 3000 	ldrb.w	r3, [sl]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f000 80a2 	beq.w	8009832 <_vfiprintf_r+0x20e>
 80096ee:	2300      	movs	r3, #0
 80096f0:	f04f 32ff 	mov.w	r2, #4294967295
 80096f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096f8:	f10a 0a01 	add.w	sl, sl, #1
 80096fc:	9304      	str	r3, [sp, #16]
 80096fe:	9307      	str	r3, [sp, #28]
 8009700:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009704:	931a      	str	r3, [sp, #104]	; 0x68
 8009706:	4654      	mov	r4, sl
 8009708:	2205      	movs	r2, #5
 800970a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800970e:	4858      	ldr	r0, [pc, #352]	; (8009870 <_vfiprintf_r+0x24c>)
 8009710:	f7fe ffd8 	bl	80086c4 <memchr>
 8009714:	9a04      	ldr	r2, [sp, #16]
 8009716:	b9d8      	cbnz	r0, 8009750 <_vfiprintf_r+0x12c>
 8009718:	06d1      	lsls	r1, r2, #27
 800971a:	bf44      	itt	mi
 800971c:	2320      	movmi	r3, #32
 800971e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009722:	0713      	lsls	r3, r2, #28
 8009724:	bf44      	itt	mi
 8009726:	232b      	movmi	r3, #43	; 0x2b
 8009728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800972c:	f89a 3000 	ldrb.w	r3, [sl]
 8009730:	2b2a      	cmp	r3, #42	; 0x2a
 8009732:	d015      	beq.n	8009760 <_vfiprintf_r+0x13c>
 8009734:	4654      	mov	r4, sl
 8009736:	2000      	movs	r0, #0
 8009738:	f04f 0c0a 	mov.w	ip, #10
 800973c:	9a07      	ldr	r2, [sp, #28]
 800973e:	4621      	mov	r1, r4
 8009740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009744:	3b30      	subs	r3, #48	; 0x30
 8009746:	2b09      	cmp	r3, #9
 8009748:	d94e      	bls.n	80097e8 <_vfiprintf_r+0x1c4>
 800974a:	b1b0      	cbz	r0, 800977a <_vfiprintf_r+0x156>
 800974c:	9207      	str	r2, [sp, #28]
 800974e:	e014      	b.n	800977a <_vfiprintf_r+0x156>
 8009750:	eba0 0308 	sub.w	r3, r0, r8
 8009754:	fa09 f303 	lsl.w	r3, r9, r3
 8009758:	4313      	orrs	r3, r2
 800975a:	46a2      	mov	sl, r4
 800975c:	9304      	str	r3, [sp, #16]
 800975e:	e7d2      	b.n	8009706 <_vfiprintf_r+0xe2>
 8009760:	9b03      	ldr	r3, [sp, #12]
 8009762:	1d19      	adds	r1, r3, #4
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	9103      	str	r1, [sp, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	bfbb      	ittet	lt
 800976c:	425b      	neglt	r3, r3
 800976e:	f042 0202 	orrlt.w	r2, r2, #2
 8009772:	9307      	strge	r3, [sp, #28]
 8009774:	9307      	strlt	r3, [sp, #28]
 8009776:	bfb8      	it	lt
 8009778:	9204      	strlt	r2, [sp, #16]
 800977a:	7823      	ldrb	r3, [r4, #0]
 800977c:	2b2e      	cmp	r3, #46	; 0x2e
 800977e:	d10c      	bne.n	800979a <_vfiprintf_r+0x176>
 8009780:	7863      	ldrb	r3, [r4, #1]
 8009782:	2b2a      	cmp	r3, #42	; 0x2a
 8009784:	d135      	bne.n	80097f2 <_vfiprintf_r+0x1ce>
 8009786:	9b03      	ldr	r3, [sp, #12]
 8009788:	3402      	adds	r4, #2
 800978a:	1d1a      	adds	r2, r3, #4
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	9203      	str	r2, [sp, #12]
 8009790:	2b00      	cmp	r3, #0
 8009792:	bfb8      	it	lt
 8009794:	f04f 33ff 	movlt.w	r3, #4294967295
 8009798:	9305      	str	r3, [sp, #20]
 800979a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009880 <_vfiprintf_r+0x25c>
 800979e:	2203      	movs	r2, #3
 80097a0:	4650      	mov	r0, sl
 80097a2:	7821      	ldrb	r1, [r4, #0]
 80097a4:	f7fe ff8e 	bl	80086c4 <memchr>
 80097a8:	b140      	cbz	r0, 80097bc <_vfiprintf_r+0x198>
 80097aa:	2340      	movs	r3, #64	; 0x40
 80097ac:	eba0 000a 	sub.w	r0, r0, sl
 80097b0:	fa03 f000 	lsl.w	r0, r3, r0
 80097b4:	9b04      	ldr	r3, [sp, #16]
 80097b6:	3401      	adds	r4, #1
 80097b8:	4303      	orrs	r3, r0
 80097ba:	9304      	str	r3, [sp, #16]
 80097bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c0:	2206      	movs	r2, #6
 80097c2:	482c      	ldr	r0, [pc, #176]	; (8009874 <_vfiprintf_r+0x250>)
 80097c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097c8:	f7fe ff7c 	bl	80086c4 <memchr>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	d03f      	beq.n	8009850 <_vfiprintf_r+0x22c>
 80097d0:	4b29      	ldr	r3, [pc, #164]	; (8009878 <_vfiprintf_r+0x254>)
 80097d2:	bb1b      	cbnz	r3, 800981c <_vfiprintf_r+0x1f8>
 80097d4:	9b03      	ldr	r3, [sp, #12]
 80097d6:	3307      	adds	r3, #7
 80097d8:	f023 0307 	bic.w	r3, r3, #7
 80097dc:	3308      	adds	r3, #8
 80097de:	9303      	str	r3, [sp, #12]
 80097e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e2:	443b      	add	r3, r7
 80097e4:	9309      	str	r3, [sp, #36]	; 0x24
 80097e6:	e767      	b.n	80096b8 <_vfiprintf_r+0x94>
 80097e8:	460c      	mov	r4, r1
 80097ea:	2001      	movs	r0, #1
 80097ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80097f0:	e7a5      	b.n	800973e <_vfiprintf_r+0x11a>
 80097f2:	2300      	movs	r3, #0
 80097f4:	f04f 0c0a 	mov.w	ip, #10
 80097f8:	4619      	mov	r1, r3
 80097fa:	3401      	adds	r4, #1
 80097fc:	9305      	str	r3, [sp, #20]
 80097fe:	4620      	mov	r0, r4
 8009800:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009804:	3a30      	subs	r2, #48	; 0x30
 8009806:	2a09      	cmp	r2, #9
 8009808:	d903      	bls.n	8009812 <_vfiprintf_r+0x1ee>
 800980a:	2b00      	cmp	r3, #0
 800980c:	d0c5      	beq.n	800979a <_vfiprintf_r+0x176>
 800980e:	9105      	str	r1, [sp, #20]
 8009810:	e7c3      	b.n	800979a <_vfiprintf_r+0x176>
 8009812:	4604      	mov	r4, r0
 8009814:	2301      	movs	r3, #1
 8009816:	fb0c 2101 	mla	r1, ip, r1, r2
 800981a:	e7f0      	b.n	80097fe <_vfiprintf_r+0x1da>
 800981c:	ab03      	add	r3, sp, #12
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	462a      	mov	r2, r5
 8009822:	4630      	mov	r0, r6
 8009824:	4b15      	ldr	r3, [pc, #84]	; (800987c <_vfiprintf_r+0x258>)
 8009826:	a904      	add	r1, sp, #16
 8009828:	f7fc f8ae 	bl	8005988 <_printf_float>
 800982c:	4607      	mov	r7, r0
 800982e:	1c78      	adds	r0, r7, #1
 8009830:	d1d6      	bne.n	80097e0 <_vfiprintf_r+0x1bc>
 8009832:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009834:	07d9      	lsls	r1, r3, #31
 8009836:	d405      	bmi.n	8009844 <_vfiprintf_r+0x220>
 8009838:	89ab      	ldrh	r3, [r5, #12]
 800983a:	059a      	lsls	r2, r3, #22
 800983c:	d402      	bmi.n	8009844 <_vfiprintf_r+0x220>
 800983e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009840:	f000 faa1 	bl	8009d86 <__retarget_lock_release_recursive>
 8009844:	89ab      	ldrh	r3, [r5, #12]
 8009846:	065b      	lsls	r3, r3, #25
 8009848:	f53f af12 	bmi.w	8009670 <_vfiprintf_r+0x4c>
 800984c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800984e:	e711      	b.n	8009674 <_vfiprintf_r+0x50>
 8009850:	ab03      	add	r3, sp, #12
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	462a      	mov	r2, r5
 8009856:	4630      	mov	r0, r6
 8009858:	4b08      	ldr	r3, [pc, #32]	; (800987c <_vfiprintf_r+0x258>)
 800985a:	a904      	add	r1, sp, #16
 800985c:	f7fc fb30 	bl	8005ec0 <_printf_i>
 8009860:	e7e4      	b.n	800982c <_vfiprintf_r+0x208>
 8009862:	bf00      	nop
 8009864:	0800ac6c 	.word	0x0800ac6c
 8009868:	0800ac8c 	.word	0x0800ac8c
 800986c:	0800ac4c 	.word	0x0800ac4c
 8009870:	0800abfc 	.word	0x0800abfc
 8009874:	0800ac06 	.word	0x0800ac06
 8009878:	08005989 	.word	0x08005989
 800987c:	080095ff 	.word	0x080095ff
 8009880:	0800ac02 	.word	0x0800ac02

08009884 <__swbuf_r>:
 8009884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009886:	460e      	mov	r6, r1
 8009888:	4614      	mov	r4, r2
 800988a:	4605      	mov	r5, r0
 800988c:	b118      	cbz	r0, 8009896 <__swbuf_r+0x12>
 800988e:	6983      	ldr	r3, [r0, #24]
 8009890:	b90b      	cbnz	r3, 8009896 <__swbuf_r+0x12>
 8009892:	f000 f9d9 	bl	8009c48 <__sinit>
 8009896:	4b21      	ldr	r3, [pc, #132]	; (800991c <__swbuf_r+0x98>)
 8009898:	429c      	cmp	r4, r3
 800989a:	d12b      	bne.n	80098f4 <__swbuf_r+0x70>
 800989c:	686c      	ldr	r4, [r5, #4]
 800989e:	69a3      	ldr	r3, [r4, #24]
 80098a0:	60a3      	str	r3, [r4, #8]
 80098a2:	89a3      	ldrh	r3, [r4, #12]
 80098a4:	071a      	lsls	r2, r3, #28
 80098a6:	d52f      	bpl.n	8009908 <__swbuf_r+0x84>
 80098a8:	6923      	ldr	r3, [r4, #16]
 80098aa:	b36b      	cbz	r3, 8009908 <__swbuf_r+0x84>
 80098ac:	6923      	ldr	r3, [r4, #16]
 80098ae:	6820      	ldr	r0, [r4, #0]
 80098b0:	b2f6      	uxtb	r6, r6
 80098b2:	1ac0      	subs	r0, r0, r3
 80098b4:	6963      	ldr	r3, [r4, #20]
 80098b6:	4637      	mov	r7, r6
 80098b8:	4283      	cmp	r3, r0
 80098ba:	dc04      	bgt.n	80098c6 <__swbuf_r+0x42>
 80098bc:	4621      	mov	r1, r4
 80098be:	4628      	mov	r0, r5
 80098c0:	f000 f92e 	bl	8009b20 <_fflush_r>
 80098c4:	bb30      	cbnz	r0, 8009914 <__swbuf_r+0x90>
 80098c6:	68a3      	ldr	r3, [r4, #8]
 80098c8:	3001      	adds	r0, #1
 80098ca:	3b01      	subs	r3, #1
 80098cc:	60a3      	str	r3, [r4, #8]
 80098ce:	6823      	ldr	r3, [r4, #0]
 80098d0:	1c5a      	adds	r2, r3, #1
 80098d2:	6022      	str	r2, [r4, #0]
 80098d4:	701e      	strb	r6, [r3, #0]
 80098d6:	6963      	ldr	r3, [r4, #20]
 80098d8:	4283      	cmp	r3, r0
 80098da:	d004      	beq.n	80098e6 <__swbuf_r+0x62>
 80098dc:	89a3      	ldrh	r3, [r4, #12]
 80098de:	07db      	lsls	r3, r3, #31
 80098e0:	d506      	bpl.n	80098f0 <__swbuf_r+0x6c>
 80098e2:	2e0a      	cmp	r6, #10
 80098e4:	d104      	bne.n	80098f0 <__swbuf_r+0x6c>
 80098e6:	4621      	mov	r1, r4
 80098e8:	4628      	mov	r0, r5
 80098ea:	f000 f919 	bl	8009b20 <_fflush_r>
 80098ee:	b988      	cbnz	r0, 8009914 <__swbuf_r+0x90>
 80098f0:	4638      	mov	r0, r7
 80098f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098f4:	4b0a      	ldr	r3, [pc, #40]	; (8009920 <__swbuf_r+0x9c>)
 80098f6:	429c      	cmp	r4, r3
 80098f8:	d101      	bne.n	80098fe <__swbuf_r+0x7a>
 80098fa:	68ac      	ldr	r4, [r5, #8]
 80098fc:	e7cf      	b.n	800989e <__swbuf_r+0x1a>
 80098fe:	4b09      	ldr	r3, [pc, #36]	; (8009924 <__swbuf_r+0xa0>)
 8009900:	429c      	cmp	r4, r3
 8009902:	bf08      	it	eq
 8009904:	68ec      	ldreq	r4, [r5, #12]
 8009906:	e7ca      	b.n	800989e <__swbuf_r+0x1a>
 8009908:	4621      	mov	r1, r4
 800990a:	4628      	mov	r0, r5
 800990c:	f000 f80c 	bl	8009928 <__swsetup_r>
 8009910:	2800      	cmp	r0, #0
 8009912:	d0cb      	beq.n	80098ac <__swbuf_r+0x28>
 8009914:	f04f 37ff 	mov.w	r7, #4294967295
 8009918:	e7ea      	b.n	80098f0 <__swbuf_r+0x6c>
 800991a:	bf00      	nop
 800991c:	0800ac6c 	.word	0x0800ac6c
 8009920:	0800ac8c 	.word	0x0800ac8c
 8009924:	0800ac4c 	.word	0x0800ac4c

08009928 <__swsetup_r>:
 8009928:	4b32      	ldr	r3, [pc, #200]	; (80099f4 <__swsetup_r+0xcc>)
 800992a:	b570      	push	{r4, r5, r6, lr}
 800992c:	681d      	ldr	r5, [r3, #0]
 800992e:	4606      	mov	r6, r0
 8009930:	460c      	mov	r4, r1
 8009932:	b125      	cbz	r5, 800993e <__swsetup_r+0x16>
 8009934:	69ab      	ldr	r3, [r5, #24]
 8009936:	b913      	cbnz	r3, 800993e <__swsetup_r+0x16>
 8009938:	4628      	mov	r0, r5
 800993a:	f000 f985 	bl	8009c48 <__sinit>
 800993e:	4b2e      	ldr	r3, [pc, #184]	; (80099f8 <__swsetup_r+0xd0>)
 8009940:	429c      	cmp	r4, r3
 8009942:	d10f      	bne.n	8009964 <__swsetup_r+0x3c>
 8009944:	686c      	ldr	r4, [r5, #4]
 8009946:	89a3      	ldrh	r3, [r4, #12]
 8009948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800994c:	0719      	lsls	r1, r3, #28
 800994e:	d42c      	bmi.n	80099aa <__swsetup_r+0x82>
 8009950:	06dd      	lsls	r5, r3, #27
 8009952:	d411      	bmi.n	8009978 <__swsetup_r+0x50>
 8009954:	2309      	movs	r3, #9
 8009956:	6033      	str	r3, [r6, #0]
 8009958:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800995c:	f04f 30ff 	mov.w	r0, #4294967295
 8009960:	81a3      	strh	r3, [r4, #12]
 8009962:	e03e      	b.n	80099e2 <__swsetup_r+0xba>
 8009964:	4b25      	ldr	r3, [pc, #148]	; (80099fc <__swsetup_r+0xd4>)
 8009966:	429c      	cmp	r4, r3
 8009968:	d101      	bne.n	800996e <__swsetup_r+0x46>
 800996a:	68ac      	ldr	r4, [r5, #8]
 800996c:	e7eb      	b.n	8009946 <__swsetup_r+0x1e>
 800996e:	4b24      	ldr	r3, [pc, #144]	; (8009a00 <__swsetup_r+0xd8>)
 8009970:	429c      	cmp	r4, r3
 8009972:	bf08      	it	eq
 8009974:	68ec      	ldreq	r4, [r5, #12]
 8009976:	e7e6      	b.n	8009946 <__swsetup_r+0x1e>
 8009978:	0758      	lsls	r0, r3, #29
 800997a:	d512      	bpl.n	80099a2 <__swsetup_r+0x7a>
 800997c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800997e:	b141      	cbz	r1, 8009992 <__swsetup_r+0x6a>
 8009980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009984:	4299      	cmp	r1, r3
 8009986:	d002      	beq.n	800998e <__swsetup_r+0x66>
 8009988:	4630      	mov	r0, r6
 800998a:	f7ff fb6f 	bl	800906c <_free_r>
 800998e:	2300      	movs	r3, #0
 8009990:	6363      	str	r3, [r4, #52]	; 0x34
 8009992:	89a3      	ldrh	r3, [r4, #12]
 8009994:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009998:	81a3      	strh	r3, [r4, #12]
 800999a:	2300      	movs	r3, #0
 800999c:	6063      	str	r3, [r4, #4]
 800999e:	6923      	ldr	r3, [r4, #16]
 80099a0:	6023      	str	r3, [r4, #0]
 80099a2:	89a3      	ldrh	r3, [r4, #12]
 80099a4:	f043 0308 	orr.w	r3, r3, #8
 80099a8:	81a3      	strh	r3, [r4, #12]
 80099aa:	6923      	ldr	r3, [r4, #16]
 80099ac:	b94b      	cbnz	r3, 80099c2 <__swsetup_r+0x9a>
 80099ae:	89a3      	ldrh	r3, [r4, #12]
 80099b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099b8:	d003      	beq.n	80099c2 <__swsetup_r+0x9a>
 80099ba:	4621      	mov	r1, r4
 80099bc:	4630      	mov	r0, r6
 80099be:	f000 fa07 	bl	8009dd0 <__smakebuf_r>
 80099c2:	89a0      	ldrh	r0, [r4, #12]
 80099c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099c8:	f010 0301 	ands.w	r3, r0, #1
 80099cc:	d00a      	beq.n	80099e4 <__swsetup_r+0xbc>
 80099ce:	2300      	movs	r3, #0
 80099d0:	60a3      	str	r3, [r4, #8]
 80099d2:	6963      	ldr	r3, [r4, #20]
 80099d4:	425b      	negs	r3, r3
 80099d6:	61a3      	str	r3, [r4, #24]
 80099d8:	6923      	ldr	r3, [r4, #16]
 80099da:	b943      	cbnz	r3, 80099ee <__swsetup_r+0xc6>
 80099dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099e0:	d1ba      	bne.n	8009958 <__swsetup_r+0x30>
 80099e2:	bd70      	pop	{r4, r5, r6, pc}
 80099e4:	0781      	lsls	r1, r0, #30
 80099e6:	bf58      	it	pl
 80099e8:	6963      	ldrpl	r3, [r4, #20]
 80099ea:	60a3      	str	r3, [r4, #8]
 80099ec:	e7f4      	b.n	80099d8 <__swsetup_r+0xb0>
 80099ee:	2000      	movs	r0, #0
 80099f0:	e7f7      	b.n	80099e2 <__swsetup_r+0xba>
 80099f2:	bf00      	nop
 80099f4:	20000018 	.word	0x20000018
 80099f8:	0800ac6c 	.word	0x0800ac6c
 80099fc:	0800ac8c 	.word	0x0800ac8c
 8009a00:	0800ac4c 	.word	0x0800ac4c

08009a04 <abort>:
 8009a04:	2006      	movs	r0, #6
 8009a06:	b508      	push	{r3, lr}
 8009a08:	f000 fa52 	bl	8009eb0 <raise>
 8009a0c:	2001      	movs	r0, #1
 8009a0e:	f7f7 fde6 	bl	80015de <_exit>
	...

08009a14 <__sflush_r>:
 8009a14:	898a      	ldrh	r2, [r1, #12]
 8009a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a1a:	4605      	mov	r5, r0
 8009a1c:	0710      	lsls	r0, r2, #28
 8009a1e:	460c      	mov	r4, r1
 8009a20:	d458      	bmi.n	8009ad4 <__sflush_r+0xc0>
 8009a22:	684b      	ldr	r3, [r1, #4]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	dc05      	bgt.n	8009a34 <__sflush_r+0x20>
 8009a28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	dc02      	bgt.n	8009a34 <__sflush_r+0x20>
 8009a2e:	2000      	movs	r0, #0
 8009a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a36:	2e00      	cmp	r6, #0
 8009a38:	d0f9      	beq.n	8009a2e <__sflush_r+0x1a>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a40:	682f      	ldr	r7, [r5, #0]
 8009a42:	602b      	str	r3, [r5, #0]
 8009a44:	d032      	beq.n	8009aac <__sflush_r+0x98>
 8009a46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a48:	89a3      	ldrh	r3, [r4, #12]
 8009a4a:	075a      	lsls	r2, r3, #29
 8009a4c:	d505      	bpl.n	8009a5a <__sflush_r+0x46>
 8009a4e:	6863      	ldr	r3, [r4, #4]
 8009a50:	1ac0      	subs	r0, r0, r3
 8009a52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a54:	b10b      	cbz	r3, 8009a5a <__sflush_r+0x46>
 8009a56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a58:	1ac0      	subs	r0, r0, r3
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a60:	4628      	mov	r0, r5
 8009a62:	6a21      	ldr	r1, [r4, #32]
 8009a64:	47b0      	blx	r6
 8009a66:	1c43      	adds	r3, r0, #1
 8009a68:	89a3      	ldrh	r3, [r4, #12]
 8009a6a:	d106      	bne.n	8009a7a <__sflush_r+0x66>
 8009a6c:	6829      	ldr	r1, [r5, #0]
 8009a6e:	291d      	cmp	r1, #29
 8009a70:	d82c      	bhi.n	8009acc <__sflush_r+0xb8>
 8009a72:	4a2a      	ldr	r2, [pc, #168]	; (8009b1c <__sflush_r+0x108>)
 8009a74:	40ca      	lsrs	r2, r1
 8009a76:	07d6      	lsls	r6, r2, #31
 8009a78:	d528      	bpl.n	8009acc <__sflush_r+0xb8>
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	6062      	str	r2, [r4, #4]
 8009a7e:	6922      	ldr	r2, [r4, #16]
 8009a80:	04d9      	lsls	r1, r3, #19
 8009a82:	6022      	str	r2, [r4, #0]
 8009a84:	d504      	bpl.n	8009a90 <__sflush_r+0x7c>
 8009a86:	1c42      	adds	r2, r0, #1
 8009a88:	d101      	bne.n	8009a8e <__sflush_r+0x7a>
 8009a8a:	682b      	ldr	r3, [r5, #0]
 8009a8c:	b903      	cbnz	r3, 8009a90 <__sflush_r+0x7c>
 8009a8e:	6560      	str	r0, [r4, #84]	; 0x54
 8009a90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a92:	602f      	str	r7, [r5, #0]
 8009a94:	2900      	cmp	r1, #0
 8009a96:	d0ca      	beq.n	8009a2e <__sflush_r+0x1a>
 8009a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a9c:	4299      	cmp	r1, r3
 8009a9e:	d002      	beq.n	8009aa6 <__sflush_r+0x92>
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	f7ff fae3 	bl	800906c <_free_r>
 8009aa6:	2000      	movs	r0, #0
 8009aa8:	6360      	str	r0, [r4, #52]	; 0x34
 8009aaa:	e7c1      	b.n	8009a30 <__sflush_r+0x1c>
 8009aac:	6a21      	ldr	r1, [r4, #32]
 8009aae:	2301      	movs	r3, #1
 8009ab0:	4628      	mov	r0, r5
 8009ab2:	47b0      	blx	r6
 8009ab4:	1c41      	adds	r1, r0, #1
 8009ab6:	d1c7      	bne.n	8009a48 <__sflush_r+0x34>
 8009ab8:	682b      	ldr	r3, [r5, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d0c4      	beq.n	8009a48 <__sflush_r+0x34>
 8009abe:	2b1d      	cmp	r3, #29
 8009ac0:	d001      	beq.n	8009ac6 <__sflush_r+0xb2>
 8009ac2:	2b16      	cmp	r3, #22
 8009ac4:	d101      	bne.n	8009aca <__sflush_r+0xb6>
 8009ac6:	602f      	str	r7, [r5, #0]
 8009ac8:	e7b1      	b.n	8009a2e <__sflush_r+0x1a>
 8009aca:	89a3      	ldrh	r3, [r4, #12]
 8009acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ad0:	81a3      	strh	r3, [r4, #12]
 8009ad2:	e7ad      	b.n	8009a30 <__sflush_r+0x1c>
 8009ad4:	690f      	ldr	r7, [r1, #16]
 8009ad6:	2f00      	cmp	r7, #0
 8009ad8:	d0a9      	beq.n	8009a2e <__sflush_r+0x1a>
 8009ada:	0793      	lsls	r3, r2, #30
 8009adc:	bf18      	it	ne
 8009ade:	2300      	movne	r3, #0
 8009ae0:	680e      	ldr	r6, [r1, #0]
 8009ae2:	bf08      	it	eq
 8009ae4:	694b      	ldreq	r3, [r1, #20]
 8009ae6:	eba6 0807 	sub.w	r8, r6, r7
 8009aea:	600f      	str	r7, [r1, #0]
 8009aec:	608b      	str	r3, [r1, #8]
 8009aee:	f1b8 0f00 	cmp.w	r8, #0
 8009af2:	dd9c      	ble.n	8009a2e <__sflush_r+0x1a>
 8009af4:	4643      	mov	r3, r8
 8009af6:	463a      	mov	r2, r7
 8009af8:	4628      	mov	r0, r5
 8009afa:	6a21      	ldr	r1, [r4, #32]
 8009afc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009afe:	47b0      	blx	r6
 8009b00:	2800      	cmp	r0, #0
 8009b02:	dc06      	bgt.n	8009b12 <__sflush_r+0xfe>
 8009b04:	89a3      	ldrh	r3, [r4, #12]
 8009b06:	f04f 30ff 	mov.w	r0, #4294967295
 8009b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b0e:	81a3      	strh	r3, [r4, #12]
 8009b10:	e78e      	b.n	8009a30 <__sflush_r+0x1c>
 8009b12:	4407      	add	r7, r0
 8009b14:	eba8 0800 	sub.w	r8, r8, r0
 8009b18:	e7e9      	b.n	8009aee <__sflush_r+0xda>
 8009b1a:	bf00      	nop
 8009b1c:	20400001 	.word	0x20400001

08009b20 <_fflush_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	690b      	ldr	r3, [r1, #16]
 8009b24:	4605      	mov	r5, r0
 8009b26:	460c      	mov	r4, r1
 8009b28:	b913      	cbnz	r3, 8009b30 <_fflush_r+0x10>
 8009b2a:	2500      	movs	r5, #0
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	bd38      	pop	{r3, r4, r5, pc}
 8009b30:	b118      	cbz	r0, 8009b3a <_fflush_r+0x1a>
 8009b32:	6983      	ldr	r3, [r0, #24]
 8009b34:	b90b      	cbnz	r3, 8009b3a <_fflush_r+0x1a>
 8009b36:	f000 f887 	bl	8009c48 <__sinit>
 8009b3a:	4b14      	ldr	r3, [pc, #80]	; (8009b8c <_fflush_r+0x6c>)
 8009b3c:	429c      	cmp	r4, r3
 8009b3e:	d11b      	bne.n	8009b78 <_fflush_r+0x58>
 8009b40:	686c      	ldr	r4, [r5, #4]
 8009b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d0ef      	beq.n	8009b2a <_fflush_r+0xa>
 8009b4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b4c:	07d0      	lsls	r0, r2, #31
 8009b4e:	d404      	bmi.n	8009b5a <_fflush_r+0x3a>
 8009b50:	0599      	lsls	r1, r3, #22
 8009b52:	d402      	bmi.n	8009b5a <_fflush_r+0x3a>
 8009b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b56:	f000 f915 	bl	8009d84 <__retarget_lock_acquire_recursive>
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	f7ff ff59 	bl	8009a14 <__sflush_r>
 8009b62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b64:	4605      	mov	r5, r0
 8009b66:	07da      	lsls	r2, r3, #31
 8009b68:	d4e0      	bmi.n	8009b2c <_fflush_r+0xc>
 8009b6a:	89a3      	ldrh	r3, [r4, #12]
 8009b6c:	059b      	lsls	r3, r3, #22
 8009b6e:	d4dd      	bmi.n	8009b2c <_fflush_r+0xc>
 8009b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b72:	f000 f908 	bl	8009d86 <__retarget_lock_release_recursive>
 8009b76:	e7d9      	b.n	8009b2c <_fflush_r+0xc>
 8009b78:	4b05      	ldr	r3, [pc, #20]	; (8009b90 <_fflush_r+0x70>)
 8009b7a:	429c      	cmp	r4, r3
 8009b7c:	d101      	bne.n	8009b82 <_fflush_r+0x62>
 8009b7e:	68ac      	ldr	r4, [r5, #8]
 8009b80:	e7df      	b.n	8009b42 <_fflush_r+0x22>
 8009b82:	4b04      	ldr	r3, [pc, #16]	; (8009b94 <_fflush_r+0x74>)
 8009b84:	429c      	cmp	r4, r3
 8009b86:	bf08      	it	eq
 8009b88:	68ec      	ldreq	r4, [r5, #12]
 8009b8a:	e7da      	b.n	8009b42 <_fflush_r+0x22>
 8009b8c:	0800ac6c 	.word	0x0800ac6c
 8009b90:	0800ac8c 	.word	0x0800ac8c
 8009b94:	0800ac4c 	.word	0x0800ac4c

08009b98 <std>:
 8009b98:	2300      	movs	r3, #0
 8009b9a:	b510      	push	{r4, lr}
 8009b9c:	4604      	mov	r4, r0
 8009b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8009ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ba6:	6083      	str	r3, [r0, #8]
 8009ba8:	8181      	strh	r1, [r0, #12]
 8009baa:	6643      	str	r3, [r0, #100]	; 0x64
 8009bac:	81c2      	strh	r2, [r0, #14]
 8009bae:	6183      	str	r3, [r0, #24]
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	2208      	movs	r2, #8
 8009bb4:	305c      	adds	r0, #92	; 0x5c
 8009bb6:	f7fb fe41 	bl	800583c <memset>
 8009bba:	4b05      	ldr	r3, [pc, #20]	; (8009bd0 <std+0x38>)
 8009bbc:	6224      	str	r4, [r4, #32]
 8009bbe:	6263      	str	r3, [r4, #36]	; 0x24
 8009bc0:	4b04      	ldr	r3, [pc, #16]	; (8009bd4 <std+0x3c>)
 8009bc2:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bc4:	4b04      	ldr	r3, [pc, #16]	; (8009bd8 <std+0x40>)
 8009bc6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009bc8:	4b04      	ldr	r3, [pc, #16]	; (8009bdc <std+0x44>)
 8009bca:	6323      	str	r3, [r4, #48]	; 0x30
 8009bcc:	bd10      	pop	{r4, pc}
 8009bce:	bf00      	nop
 8009bd0:	08009ee9 	.word	0x08009ee9
 8009bd4:	08009f0b 	.word	0x08009f0b
 8009bd8:	08009f43 	.word	0x08009f43
 8009bdc:	08009f67 	.word	0x08009f67

08009be0 <_cleanup_r>:
 8009be0:	4901      	ldr	r1, [pc, #4]	; (8009be8 <_cleanup_r+0x8>)
 8009be2:	f000 b8af 	b.w	8009d44 <_fwalk_reent>
 8009be6:	bf00      	nop
 8009be8:	08009b21 	.word	0x08009b21

08009bec <__sfmoreglue>:
 8009bec:	b570      	push	{r4, r5, r6, lr}
 8009bee:	2568      	movs	r5, #104	; 0x68
 8009bf0:	1e4a      	subs	r2, r1, #1
 8009bf2:	4355      	muls	r5, r2
 8009bf4:	460e      	mov	r6, r1
 8009bf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009bfa:	f7ff fa83 	bl	8009104 <_malloc_r>
 8009bfe:	4604      	mov	r4, r0
 8009c00:	b140      	cbz	r0, 8009c14 <__sfmoreglue+0x28>
 8009c02:	2100      	movs	r1, #0
 8009c04:	e9c0 1600 	strd	r1, r6, [r0]
 8009c08:	300c      	adds	r0, #12
 8009c0a:	60a0      	str	r0, [r4, #8]
 8009c0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c10:	f7fb fe14 	bl	800583c <memset>
 8009c14:	4620      	mov	r0, r4
 8009c16:	bd70      	pop	{r4, r5, r6, pc}

08009c18 <__sfp_lock_acquire>:
 8009c18:	4801      	ldr	r0, [pc, #4]	; (8009c20 <__sfp_lock_acquire+0x8>)
 8009c1a:	f000 b8b3 	b.w	8009d84 <__retarget_lock_acquire_recursive>
 8009c1e:	bf00      	nop
 8009c20:	20001570 	.word	0x20001570

08009c24 <__sfp_lock_release>:
 8009c24:	4801      	ldr	r0, [pc, #4]	; (8009c2c <__sfp_lock_release+0x8>)
 8009c26:	f000 b8ae 	b.w	8009d86 <__retarget_lock_release_recursive>
 8009c2a:	bf00      	nop
 8009c2c:	20001570 	.word	0x20001570

08009c30 <__sinit_lock_acquire>:
 8009c30:	4801      	ldr	r0, [pc, #4]	; (8009c38 <__sinit_lock_acquire+0x8>)
 8009c32:	f000 b8a7 	b.w	8009d84 <__retarget_lock_acquire_recursive>
 8009c36:	bf00      	nop
 8009c38:	2000156b 	.word	0x2000156b

08009c3c <__sinit_lock_release>:
 8009c3c:	4801      	ldr	r0, [pc, #4]	; (8009c44 <__sinit_lock_release+0x8>)
 8009c3e:	f000 b8a2 	b.w	8009d86 <__retarget_lock_release_recursive>
 8009c42:	bf00      	nop
 8009c44:	2000156b 	.word	0x2000156b

08009c48 <__sinit>:
 8009c48:	b510      	push	{r4, lr}
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	f7ff fff0 	bl	8009c30 <__sinit_lock_acquire>
 8009c50:	69a3      	ldr	r3, [r4, #24]
 8009c52:	b11b      	cbz	r3, 8009c5c <__sinit+0x14>
 8009c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c58:	f7ff bff0 	b.w	8009c3c <__sinit_lock_release>
 8009c5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c60:	6523      	str	r3, [r4, #80]	; 0x50
 8009c62:	4b13      	ldr	r3, [pc, #76]	; (8009cb0 <__sinit+0x68>)
 8009c64:	4a13      	ldr	r2, [pc, #76]	; (8009cb4 <__sinit+0x6c>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c6a:	42a3      	cmp	r3, r4
 8009c6c:	bf08      	it	eq
 8009c6e:	2301      	moveq	r3, #1
 8009c70:	4620      	mov	r0, r4
 8009c72:	bf08      	it	eq
 8009c74:	61a3      	streq	r3, [r4, #24]
 8009c76:	f000 f81f 	bl	8009cb8 <__sfp>
 8009c7a:	6060      	str	r0, [r4, #4]
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	f000 f81b 	bl	8009cb8 <__sfp>
 8009c82:	60a0      	str	r0, [r4, #8]
 8009c84:	4620      	mov	r0, r4
 8009c86:	f000 f817 	bl	8009cb8 <__sfp>
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	2104      	movs	r1, #4
 8009c8e:	60e0      	str	r0, [r4, #12]
 8009c90:	6860      	ldr	r0, [r4, #4]
 8009c92:	f7ff ff81 	bl	8009b98 <std>
 8009c96:	2201      	movs	r2, #1
 8009c98:	2109      	movs	r1, #9
 8009c9a:	68a0      	ldr	r0, [r4, #8]
 8009c9c:	f7ff ff7c 	bl	8009b98 <std>
 8009ca0:	2202      	movs	r2, #2
 8009ca2:	2112      	movs	r1, #18
 8009ca4:	68e0      	ldr	r0, [r4, #12]
 8009ca6:	f7ff ff77 	bl	8009b98 <std>
 8009caa:	2301      	movs	r3, #1
 8009cac:	61a3      	str	r3, [r4, #24]
 8009cae:	e7d1      	b.n	8009c54 <__sinit+0xc>
 8009cb0:	0800a7f4 	.word	0x0800a7f4
 8009cb4:	08009be1 	.word	0x08009be1

08009cb8 <__sfp>:
 8009cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cba:	4607      	mov	r7, r0
 8009cbc:	f7ff ffac 	bl	8009c18 <__sfp_lock_acquire>
 8009cc0:	4b1e      	ldr	r3, [pc, #120]	; (8009d3c <__sfp+0x84>)
 8009cc2:	681e      	ldr	r6, [r3, #0]
 8009cc4:	69b3      	ldr	r3, [r6, #24]
 8009cc6:	b913      	cbnz	r3, 8009cce <__sfp+0x16>
 8009cc8:	4630      	mov	r0, r6
 8009cca:	f7ff ffbd 	bl	8009c48 <__sinit>
 8009cce:	3648      	adds	r6, #72	; 0x48
 8009cd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	d503      	bpl.n	8009ce0 <__sfp+0x28>
 8009cd8:	6833      	ldr	r3, [r6, #0]
 8009cda:	b30b      	cbz	r3, 8009d20 <__sfp+0x68>
 8009cdc:	6836      	ldr	r6, [r6, #0]
 8009cde:	e7f7      	b.n	8009cd0 <__sfp+0x18>
 8009ce0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ce4:	b9d5      	cbnz	r5, 8009d1c <__sfp+0x64>
 8009ce6:	4b16      	ldr	r3, [pc, #88]	; (8009d40 <__sfp+0x88>)
 8009ce8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009cec:	60e3      	str	r3, [r4, #12]
 8009cee:	6665      	str	r5, [r4, #100]	; 0x64
 8009cf0:	f000 f847 	bl	8009d82 <__retarget_lock_init_recursive>
 8009cf4:	f7ff ff96 	bl	8009c24 <__sfp_lock_release>
 8009cf8:	2208      	movs	r2, #8
 8009cfa:	4629      	mov	r1, r5
 8009cfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d04:	6025      	str	r5, [r4, #0]
 8009d06:	61a5      	str	r5, [r4, #24]
 8009d08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d0c:	f7fb fd96 	bl	800583c <memset>
 8009d10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d18:	4620      	mov	r0, r4
 8009d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d1c:	3468      	adds	r4, #104	; 0x68
 8009d1e:	e7d9      	b.n	8009cd4 <__sfp+0x1c>
 8009d20:	2104      	movs	r1, #4
 8009d22:	4638      	mov	r0, r7
 8009d24:	f7ff ff62 	bl	8009bec <__sfmoreglue>
 8009d28:	4604      	mov	r4, r0
 8009d2a:	6030      	str	r0, [r6, #0]
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	d1d5      	bne.n	8009cdc <__sfp+0x24>
 8009d30:	f7ff ff78 	bl	8009c24 <__sfp_lock_release>
 8009d34:	230c      	movs	r3, #12
 8009d36:	603b      	str	r3, [r7, #0]
 8009d38:	e7ee      	b.n	8009d18 <__sfp+0x60>
 8009d3a:	bf00      	nop
 8009d3c:	0800a7f4 	.word	0x0800a7f4
 8009d40:	ffff0001 	.word	0xffff0001

08009d44 <_fwalk_reent>:
 8009d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d48:	4606      	mov	r6, r0
 8009d4a:	4688      	mov	r8, r1
 8009d4c:	2700      	movs	r7, #0
 8009d4e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d56:	f1b9 0901 	subs.w	r9, r9, #1
 8009d5a:	d505      	bpl.n	8009d68 <_fwalk_reent+0x24>
 8009d5c:	6824      	ldr	r4, [r4, #0]
 8009d5e:	2c00      	cmp	r4, #0
 8009d60:	d1f7      	bne.n	8009d52 <_fwalk_reent+0xe>
 8009d62:	4638      	mov	r0, r7
 8009d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d68:	89ab      	ldrh	r3, [r5, #12]
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d907      	bls.n	8009d7e <_fwalk_reent+0x3a>
 8009d6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d72:	3301      	adds	r3, #1
 8009d74:	d003      	beq.n	8009d7e <_fwalk_reent+0x3a>
 8009d76:	4629      	mov	r1, r5
 8009d78:	4630      	mov	r0, r6
 8009d7a:	47c0      	blx	r8
 8009d7c:	4307      	orrs	r7, r0
 8009d7e:	3568      	adds	r5, #104	; 0x68
 8009d80:	e7e9      	b.n	8009d56 <_fwalk_reent+0x12>

08009d82 <__retarget_lock_init_recursive>:
 8009d82:	4770      	bx	lr

08009d84 <__retarget_lock_acquire_recursive>:
 8009d84:	4770      	bx	lr

08009d86 <__retarget_lock_release_recursive>:
 8009d86:	4770      	bx	lr

08009d88 <__swhatbuf_r>:
 8009d88:	b570      	push	{r4, r5, r6, lr}
 8009d8a:	460e      	mov	r6, r1
 8009d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d90:	4614      	mov	r4, r2
 8009d92:	2900      	cmp	r1, #0
 8009d94:	461d      	mov	r5, r3
 8009d96:	b096      	sub	sp, #88	; 0x58
 8009d98:	da07      	bge.n	8009daa <__swhatbuf_r+0x22>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	602b      	str	r3, [r5, #0]
 8009d9e:	89b3      	ldrh	r3, [r6, #12]
 8009da0:	061a      	lsls	r2, r3, #24
 8009da2:	d410      	bmi.n	8009dc6 <__swhatbuf_r+0x3e>
 8009da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009da8:	e00e      	b.n	8009dc8 <__swhatbuf_r+0x40>
 8009daa:	466a      	mov	r2, sp
 8009dac:	f000 f902 	bl	8009fb4 <_fstat_r>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	dbf2      	blt.n	8009d9a <__swhatbuf_r+0x12>
 8009db4:	9a01      	ldr	r2, [sp, #4]
 8009db6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009dba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009dbe:	425a      	negs	r2, r3
 8009dc0:	415a      	adcs	r2, r3
 8009dc2:	602a      	str	r2, [r5, #0]
 8009dc4:	e7ee      	b.n	8009da4 <__swhatbuf_r+0x1c>
 8009dc6:	2340      	movs	r3, #64	; 0x40
 8009dc8:	2000      	movs	r0, #0
 8009dca:	6023      	str	r3, [r4, #0]
 8009dcc:	b016      	add	sp, #88	; 0x58
 8009dce:	bd70      	pop	{r4, r5, r6, pc}

08009dd0 <__smakebuf_r>:
 8009dd0:	898b      	ldrh	r3, [r1, #12]
 8009dd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009dd4:	079d      	lsls	r5, r3, #30
 8009dd6:	4606      	mov	r6, r0
 8009dd8:	460c      	mov	r4, r1
 8009dda:	d507      	bpl.n	8009dec <__smakebuf_r+0x1c>
 8009ddc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009de0:	6023      	str	r3, [r4, #0]
 8009de2:	6123      	str	r3, [r4, #16]
 8009de4:	2301      	movs	r3, #1
 8009de6:	6163      	str	r3, [r4, #20]
 8009de8:	b002      	add	sp, #8
 8009dea:	bd70      	pop	{r4, r5, r6, pc}
 8009dec:	466a      	mov	r2, sp
 8009dee:	ab01      	add	r3, sp, #4
 8009df0:	f7ff ffca 	bl	8009d88 <__swhatbuf_r>
 8009df4:	9900      	ldr	r1, [sp, #0]
 8009df6:	4605      	mov	r5, r0
 8009df8:	4630      	mov	r0, r6
 8009dfa:	f7ff f983 	bl	8009104 <_malloc_r>
 8009dfe:	b948      	cbnz	r0, 8009e14 <__smakebuf_r+0x44>
 8009e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e04:	059a      	lsls	r2, r3, #22
 8009e06:	d4ef      	bmi.n	8009de8 <__smakebuf_r+0x18>
 8009e08:	f023 0303 	bic.w	r3, r3, #3
 8009e0c:	f043 0302 	orr.w	r3, r3, #2
 8009e10:	81a3      	strh	r3, [r4, #12]
 8009e12:	e7e3      	b.n	8009ddc <__smakebuf_r+0xc>
 8009e14:	4b0d      	ldr	r3, [pc, #52]	; (8009e4c <__smakebuf_r+0x7c>)
 8009e16:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e18:	89a3      	ldrh	r3, [r4, #12]
 8009e1a:	6020      	str	r0, [r4, #0]
 8009e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e20:	81a3      	strh	r3, [r4, #12]
 8009e22:	9b00      	ldr	r3, [sp, #0]
 8009e24:	6120      	str	r0, [r4, #16]
 8009e26:	6163      	str	r3, [r4, #20]
 8009e28:	9b01      	ldr	r3, [sp, #4]
 8009e2a:	b15b      	cbz	r3, 8009e44 <__smakebuf_r+0x74>
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e32:	f000 f8d1 	bl	8009fd8 <_isatty_r>
 8009e36:	b128      	cbz	r0, 8009e44 <__smakebuf_r+0x74>
 8009e38:	89a3      	ldrh	r3, [r4, #12]
 8009e3a:	f023 0303 	bic.w	r3, r3, #3
 8009e3e:	f043 0301 	orr.w	r3, r3, #1
 8009e42:	81a3      	strh	r3, [r4, #12]
 8009e44:	89a0      	ldrh	r0, [r4, #12]
 8009e46:	4305      	orrs	r5, r0
 8009e48:	81a5      	strh	r5, [r4, #12]
 8009e4a:	e7cd      	b.n	8009de8 <__smakebuf_r+0x18>
 8009e4c:	08009be1 	.word	0x08009be1

08009e50 <_malloc_usable_size_r>:
 8009e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e54:	1f18      	subs	r0, r3, #4
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	bfbc      	itt	lt
 8009e5a:	580b      	ldrlt	r3, [r1, r0]
 8009e5c:	18c0      	addlt	r0, r0, r3
 8009e5e:	4770      	bx	lr

08009e60 <_raise_r>:
 8009e60:	291f      	cmp	r1, #31
 8009e62:	b538      	push	{r3, r4, r5, lr}
 8009e64:	4604      	mov	r4, r0
 8009e66:	460d      	mov	r5, r1
 8009e68:	d904      	bls.n	8009e74 <_raise_r+0x14>
 8009e6a:	2316      	movs	r3, #22
 8009e6c:	6003      	str	r3, [r0, #0]
 8009e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e72:	bd38      	pop	{r3, r4, r5, pc}
 8009e74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e76:	b112      	cbz	r2, 8009e7e <_raise_r+0x1e>
 8009e78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e7c:	b94b      	cbnz	r3, 8009e92 <_raise_r+0x32>
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f000 f830 	bl	8009ee4 <_getpid_r>
 8009e84:	462a      	mov	r2, r5
 8009e86:	4601      	mov	r1, r0
 8009e88:	4620      	mov	r0, r4
 8009e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e8e:	f000 b817 	b.w	8009ec0 <_kill_r>
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d00a      	beq.n	8009eac <_raise_r+0x4c>
 8009e96:	1c59      	adds	r1, r3, #1
 8009e98:	d103      	bne.n	8009ea2 <_raise_r+0x42>
 8009e9a:	2316      	movs	r3, #22
 8009e9c:	6003      	str	r3, [r0, #0]
 8009e9e:	2001      	movs	r0, #1
 8009ea0:	e7e7      	b.n	8009e72 <_raise_r+0x12>
 8009ea2:	2400      	movs	r4, #0
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009eaa:	4798      	blx	r3
 8009eac:	2000      	movs	r0, #0
 8009eae:	e7e0      	b.n	8009e72 <_raise_r+0x12>

08009eb0 <raise>:
 8009eb0:	4b02      	ldr	r3, [pc, #8]	; (8009ebc <raise+0xc>)
 8009eb2:	4601      	mov	r1, r0
 8009eb4:	6818      	ldr	r0, [r3, #0]
 8009eb6:	f7ff bfd3 	b.w	8009e60 <_raise_r>
 8009eba:	bf00      	nop
 8009ebc:	20000018 	.word	0x20000018

08009ec0 <_kill_r>:
 8009ec0:	b538      	push	{r3, r4, r5, lr}
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	4d06      	ldr	r5, [pc, #24]	; (8009ee0 <_kill_r+0x20>)
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	4608      	mov	r0, r1
 8009eca:	4611      	mov	r1, r2
 8009ecc:	602b      	str	r3, [r5, #0]
 8009ece:	f7f7 fb76 	bl	80015be <_kill>
 8009ed2:	1c43      	adds	r3, r0, #1
 8009ed4:	d102      	bne.n	8009edc <_kill_r+0x1c>
 8009ed6:	682b      	ldr	r3, [r5, #0]
 8009ed8:	b103      	cbz	r3, 8009edc <_kill_r+0x1c>
 8009eda:	6023      	str	r3, [r4, #0]
 8009edc:	bd38      	pop	{r3, r4, r5, pc}
 8009ede:	bf00      	nop
 8009ee0:	20001564 	.word	0x20001564

08009ee4 <_getpid_r>:
 8009ee4:	f7f7 bb64 	b.w	80015b0 <_getpid>

08009ee8 <__sread>:
 8009ee8:	b510      	push	{r4, lr}
 8009eea:	460c      	mov	r4, r1
 8009eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ef0:	f000 f894 	bl	800a01c <_read_r>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	bfab      	itete	ge
 8009ef8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009efa:	89a3      	ldrhlt	r3, [r4, #12]
 8009efc:	181b      	addge	r3, r3, r0
 8009efe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f02:	bfac      	ite	ge
 8009f04:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f06:	81a3      	strhlt	r3, [r4, #12]
 8009f08:	bd10      	pop	{r4, pc}

08009f0a <__swrite>:
 8009f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f0e:	461f      	mov	r7, r3
 8009f10:	898b      	ldrh	r3, [r1, #12]
 8009f12:	4605      	mov	r5, r0
 8009f14:	05db      	lsls	r3, r3, #23
 8009f16:	460c      	mov	r4, r1
 8009f18:	4616      	mov	r6, r2
 8009f1a:	d505      	bpl.n	8009f28 <__swrite+0x1e>
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f24:	f000 f868 	bl	8009ff8 <_lseek_r>
 8009f28:	89a3      	ldrh	r3, [r4, #12]
 8009f2a:	4632      	mov	r2, r6
 8009f2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f30:	81a3      	strh	r3, [r4, #12]
 8009f32:	4628      	mov	r0, r5
 8009f34:	463b      	mov	r3, r7
 8009f36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f3e:	f000 b817 	b.w	8009f70 <_write_r>

08009f42 <__sseek>:
 8009f42:	b510      	push	{r4, lr}
 8009f44:	460c      	mov	r4, r1
 8009f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f4a:	f000 f855 	bl	8009ff8 <_lseek_r>
 8009f4e:	1c43      	adds	r3, r0, #1
 8009f50:	89a3      	ldrh	r3, [r4, #12]
 8009f52:	bf15      	itete	ne
 8009f54:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f5e:	81a3      	strheq	r3, [r4, #12]
 8009f60:	bf18      	it	ne
 8009f62:	81a3      	strhne	r3, [r4, #12]
 8009f64:	bd10      	pop	{r4, pc}

08009f66 <__sclose>:
 8009f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f6a:	f000 b813 	b.w	8009f94 <_close_r>
	...

08009f70 <_write_r>:
 8009f70:	b538      	push	{r3, r4, r5, lr}
 8009f72:	4604      	mov	r4, r0
 8009f74:	4608      	mov	r0, r1
 8009f76:	4611      	mov	r1, r2
 8009f78:	2200      	movs	r2, #0
 8009f7a:	4d05      	ldr	r5, [pc, #20]	; (8009f90 <_write_r+0x20>)
 8009f7c:	602a      	str	r2, [r5, #0]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	f7f7 fb54 	bl	800162c <_write>
 8009f84:	1c43      	adds	r3, r0, #1
 8009f86:	d102      	bne.n	8009f8e <_write_r+0x1e>
 8009f88:	682b      	ldr	r3, [r5, #0]
 8009f8a:	b103      	cbz	r3, 8009f8e <_write_r+0x1e>
 8009f8c:	6023      	str	r3, [r4, #0]
 8009f8e:	bd38      	pop	{r3, r4, r5, pc}
 8009f90:	20001564 	.word	0x20001564

08009f94 <_close_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	2300      	movs	r3, #0
 8009f98:	4d05      	ldr	r5, [pc, #20]	; (8009fb0 <_close_r+0x1c>)
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	4608      	mov	r0, r1
 8009f9e:	602b      	str	r3, [r5, #0]
 8009fa0:	f7f7 fb60 	bl	8001664 <_close>
 8009fa4:	1c43      	adds	r3, r0, #1
 8009fa6:	d102      	bne.n	8009fae <_close_r+0x1a>
 8009fa8:	682b      	ldr	r3, [r5, #0]
 8009faa:	b103      	cbz	r3, 8009fae <_close_r+0x1a>
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	bd38      	pop	{r3, r4, r5, pc}
 8009fb0:	20001564 	.word	0x20001564

08009fb4 <_fstat_r>:
 8009fb4:	b538      	push	{r3, r4, r5, lr}
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	4d06      	ldr	r5, [pc, #24]	; (8009fd4 <_fstat_r+0x20>)
 8009fba:	4604      	mov	r4, r0
 8009fbc:	4608      	mov	r0, r1
 8009fbe:	4611      	mov	r1, r2
 8009fc0:	602b      	str	r3, [r5, #0]
 8009fc2:	f7f7 fb5a 	bl	800167a <_fstat>
 8009fc6:	1c43      	adds	r3, r0, #1
 8009fc8:	d102      	bne.n	8009fd0 <_fstat_r+0x1c>
 8009fca:	682b      	ldr	r3, [r5, #0]
 8009fcc:	b103      	cbz	r3, 8009fd0 <_fstat_r+0x1c>
 8009fce:	6023      	str	r3, [r4, #0]
 8009fd0:	bd38      	pop	{r3, r4, r5, pc}
 8009fd2:	bf00      	nop
 8009fd4:	20001564 	.word	0x20001564

08009fd8 <_isatty_r>:
 8009fd8:	b538      	push	{r3, r4, r5, lr}
 8009fda:	2300      	movs	r3, #0
 8009fdc:	4d05      	ldr	r5, [pc, #20]	; (8009ff4 <_isatty_r+0x1c>)
 8009fde:	4604      	mov	r4, r0
 8009fe0:	4608      	mov	r0, r1
 8009fe2:	602b      	str	r3, [r5, #0]
 8009fe4:	f7f7 fb58 	bl	8001698 <_isatty>
 8009fe8:	1c43      	adds	r3, r0, #1
 8009fea:	d102      	bne.n	8009ff2 <_isatty_r+0x1a>
 8009fec:	682b      	ldr	r3, [r5, #0]
 8009fee:	b103      	cbz	r3, 8009ff2 <_isatty_r+0x1a>
 8009ff0:	6023      	str	r3, [r4, #0]
 8009ff2:	bd38      	pop	{r3, r4, r5, pc}
 8009ff4:	20001564 	.word	0x20001564

08009ff8 <_lseek_r>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	4608      	mov	r0, r1
 8009ffe:	4611      	mov	r1, r2
 800a000:	2200      	movs	r2, #0
 800a002:	4d05      	ldr	r5, [pc, #20]	; (800a018 <_lseek_r+0x20>)
 800a004:	602a      	str	r2, [r5, #0]
 800a006:	461a      	mov	r2, r3
 800a008:	f7f7 fb50 	bl	80016ac <_lseek>
 800a00c:	1c43      	adds	r3, r0, #1
 800a00e:	d102      	bne.n	800a016 <_lseek_r+0x1e>
 800a010:	682b      	ldr	r3, [r5, #0]
 800a012:	b103      	cbz	r3, 800a016 <_lseek_r+0x1e>
 800a014:	6023      	str	r3, [r4, #0]
 800a016:	bd38      	pop	{r3, r4, r5, pc}
 800a018:	20001564 	.word	0x20001564

0800a01c <_read_r>:
 800a01c:	b538      	push	{r3, r4, r5, lr}
 800a01e:	4604      	mov	r4, r0
 800a020:	4608      	mov	r0, r1
 800a022:	4611      	mov	r1, r2
 800a024:	2200      	movs	r2, #0
 800a026:	4d05      	ldr	r5, [pc, #20]	; (800a03c <_read_r+0x20>)
 800a028:	602a      	str	r2, [r5, #0]
 800a02a:	461a      	mov	r2, r3
 800a02c:	f7f7 fae1 	bl	80015f2 <_read>
 800a030:	1c43      	adds	r3, r0, #1
 800a032:	d102      	bne.n	800a03a <_read_r+0x1e>
 800a034:	682b      	ldr	r3, [r5, #0]
 800a036:	b103      	cbz	r3, 800a03a <_read_r+0x1e>
 800a038:	6023      	str	r3, [r4, #0]
 800a03a:	bd38      	pop	{r3, r4, r5, pc}
 800a03c:	20001564 	.word	0x20001564

0800a040 <_init>:
 800a040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a042:	bf00      	nop
 800a044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a046:	bc08      	pop	{r3}
 800a048:	469e      	mov	lr, r3
 800a04a:	4770      	bx	lr

0800a04c <_fini>:
 800a04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04e:	bf00      	nop
 800a050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a052:	bc08      	pop	{r3}
 800a054:	469e      	mov	lr, r3
 800a056:	4770      	bx	lr
